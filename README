
This is in the midst of development. (version 0.0.1)

+++ Clover Script Language +++

Features ->

Git Repository Location ->

    https://github.com/ab25cq/clover.git

Files ->

    README -> This file
    CHANGELOG -> Alteration records from version 1.0.0
    AUTHOR -> Writer name and mail address
    USAGE -> Clover's Manual and Usage

    code/*.cl code/*.clc -> Clover sources for the test
    Fundamental.clc -> Fundamental Classes

    txt/TODO.txt -> TODO text. This is wrriten by Japanese

    src/alias.c -> alias system
    src/clover.h -> Definitions for Clover embeded applications
    src/common.h -> Definitions for Clover inside
    src/compiler.c -> External program to compile source code.(cclover)
    src/compile.c -> Making byte codes from nodes. This is a way to make bytecodes of Clover. --> (source codes -> nodes -> byte codes)
    src/debug.c -> My original debug system for assert, detecting memory leak.
    src/debug.h -> Header of debug.c.
    src/heap.c -> Memory management systems. (A Gabage Collection)
    src/interface.c -> An interface for embeded applications
    src/klass.c -> A Clover class system on runtime
    src/klass_ctime.c -> A Clover class system on compile time
    src/main.c -> A main program
    src/module.c -> module system
    src/namepace.c -> namespace system
    src/node.c -> Making byte codes from nodes. This is a way to make bytecodes of Clover. --> (source codes -> nodes -> byte codes)
    src/node_tree.c -> Allocating nodes
    src/compile.c -> Making byte codes from nodes. This is a way to make bytecodes of Clover. --> (source codes -> nodes -> byte codes)
    src/node_tree.c -> allocating object related with node
    src/node_type.c -> Compile time type system
    src/parser.c -> Making intermediate code(nodes) from source code.
    src/buffer.c -> Implementation of the Constant Pool and the ByteCodes, and the Resizable buffer
    src/obj_anonymous.c -> Implementation of anonymous class
    src/obj_array.c -> Implementation of Array class
    src/obj_block.c -> Implementation of Block class
    src/obj_bool.c -> Implementation of bool class
    src/obj_byte.c -> Implementaion of byte class
    src/obj_bytes.c -> Implementaion of Bytes class
    src/obj_class_name.c -> Implemetation of ClassName class
    src/obj_clover.c -> Implementaion of Clover class
    src/obj_file.c -> Implementation of File class
    src/obj_float.h -> Implementation of float class
    src/obj_hash.c -> Implementation of Hash class
    src/obj_int.c -> Implementation of int class
    src/obj_mutex.c -> Mutex class implementation
    src/obj_null.c -> Implementation of Null class
    src/obj_range.c -> Implementation of Range class
    src/obj_regular_file.c -> Implementation of RegularFile class
    src/obj_string.c -> Implementation of String class
    src/obj_system.c -> Implementation of System class
    src/obj_thread.c -> Implementation of Thread Class
    src/obj_type_object.c -> Implementation of Type class
    src/obj_user_object.c -> Implementation of Object class
    src/obj_void.c -> Implementation of void class
    src/tags -> ctags
    src/type.c -> Runtime type system
    src/vm.c -> Virtual Machine of Clover. Running bytecodes.
    src/vtable.c -> Implementation of Clover Variable Table
    src/xfunc.c -> My original xfuncs.
    configure.in -> configure source file which is used by autoconf
    Makefile.in -> Makefile source file which is used by configure
    config.h.in -> config.h source file which is used by configure
    install.sh -> this is used by configure

Command ->
    
    clover --> run the script
    cclover --> compile the script(.cl) or compile the class script(.clc)

