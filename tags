!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALLOC	src/debug.h	20;"	d
ARRAY_SIZE	src/debug.c	98;"	d	file:
ASSERT	src/debug.h	47;"	d
ASSERT	src/debug.h	69;"	d
Array_add	src/obj_array.c	/^BOOL Array_add(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Array_items	src/obj_array.c	/^BOOL Array_items(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Array_length	src/obj_array.c	/^BOOL Array_length(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Array_setItem	src/obj_array.c	/^BOOL Array_setItem(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Array_setValue	src/obj_array.c	/^BOOL Array_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
BOOL	src/debug.h	8;"	d
Block_parametors	src/obj_block.c	/^BOOL Block_parametors(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Block_resultType	src/obj_block.c	/^BOOL Block_resultType(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_Bytes	src/obj_bytes.c	/^BOOL Bytes_Bytes(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_char	src/obj_bytes.c	/^BOOL Bytes_char(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_cmp	src/obj_bytes.c	/^BOOL Bytes_cmp(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_length	src/obj_bytes.c	/^BOOL Bytes_length(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_replace	src/obj_bytes.c	/^BOOL Bytes_replace(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_setValue	src/obj_bytes.c	/^BOOL Bytes_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_toPointer	src/obj_bytes.c	/^BOOL Bytes_toPointer(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Bytes_toString	src/obj_bytes.c	/^BOOL Bytes_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
CALLOC	src/debug.h	44;"	d
CALLOC	src/debug.h	64;"	d
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Isrc\/ -I. -L . -I\/home\/ab25cq\/include -L\/home\/ab25cq\/lib -fPIC -DSYSCONFDIR="\\"${sysconfdir}\/\\"" -DDOCDIR="\\"${docdir}\/\\"" -DDATAROOTDIR="\\"${datarootdir}\/\\"" -I\/usr\/local\/include -L \/usr\/local\/lib -g -DMDEBUG -Werror$/;"	m
CHECKML_BEGIN	src/debug.h	33;"	d
CHECKML_BEGIN	src/debug.h	60;"	d
CHECKML_END	src/debug.h	34;"	d
CHECKML_END	src/debug.h	61;"	d
CLARRAY	src/clover.h	765;"	d
CLARRAY_DATA	src/clover.h	753;"	d
CLARRAY_ITEMS	src/clover.h	766;"	d
CLARRAY_ITEMS2	src/clover.h	767;"	d
CLASS_FLAGS_ABSTRACT	src/clover.h	479;"	d
CLASS_FLAGS_DYNAMIC_TYPING	src/clover.h	482;"	d
CLASS_FLAGS_ENUM	src/clover.h	485;"	d
CLASS_FLAGS_FINAL	src/clover.h	483;"	d
CLASS_FLAGS_GENERICS_PARAM	src/clover.h	488;"	d
CLASS_FLAGS_INCLUDED_MODULE	src/clover.h	489;"	d
CLASS_FLAGS_INTERFACE	src/clover.h	477;"	d
CLASS_FLAGS_MODIFIED	src/clover.h	480;"	d
CLASS_FLAGS_NATIVE	src/clover.h	486;"	d
CLASS_FLAGS_NATIVE_BOSS	src/clover.h	487;"	d
CLASS_FLAGS_PRIVATE	src/clover.h	478;"	d
CLASS_FLAGS_SPECIAL_CLASS	src/clover.h	481;"	d
CLASS_FLAGS_STRUCT	src/clover.h	484;"	d
CLASS_FLAGS_VERSION	src/clover.h	474;"	d
CLASS_HASH_SIZE	src/clover.h	272;"	d
CLASS_NAME	src/clover.h	231;"	d
CLASS_VERSION	src/clover.h	475;"	d
CLASS_VERSION_MAX	src/clover.h	476;"	d
CLBLOCK	src/clover.h	870;"	d
CLBOOL	src/clover.h	639;"	d
CLBYTE	src/clover.h	724;"	d
CLBYTES	src/clover.h	900;"	d
CLCHAR	src/clover.h	733;"	d
CLCLASSOBJECT	src/clover.h	921;"	d
CLDOUBLE	src/clover.h	715;"	d
CLFIELD	src/clover.h	932;"	d
CLFLOAT	src/clover.h	706;"	d
CLHASH	src/clover.h	832;"	d
CLHASH_DATA	src/clover.h	820;"	d
CLHASH_ITEM	src/clover.h	834;"	d
CLHASH_KEY	src/clover.h	835;"	d
CLINT	src/clover.h	670;"	d
CLLONG	src/clover.h	697;"	d
CLMETHOD	src/clover.h	943;"	d
CLMUTEX	src/clover.h	890;"	d
CLNULL	src/clover.h	661;"	d
CLOBJECT_HEADER	src/clover.h	630;"	d
CLONIGURUMAREGEX	src/clover.h	783;"	d
CLOVER_H	src/clover.h	2;"	d
CLObject	src/clover.h	/^typedef unsigned int CLObject;$/;"	t
CLPOINTER	src/clover.h	652;"	d
CLRANGE	src/clover.h	845;"	d
CLSHORT	src/clover.h	688;"	d
CLSTRING	src/clover.h	803;"	d
CLSTRING_DATA	src/clover.h	793;"	d
CLTHREAD	src/clover.h	880;"	d
CLTYPEOBJECT	src/clover.h	912;"	d
CLUINT	src/clover.h	679;"	d
CLUSEROBJECT	src/clover.h	744;"	d
CL_ABSTRACT_METHOD	src/clover.h	434;"	d
CL_ALIAS_MAX	src/clover.h	263;"	d
CL_ALIAS_METHOD	src/clover.h	432;"	d
CL_ARRAY_ELEMENTS_MAX	src/clover.h	246;"	d
CL_BLOCKS_MAX	src/clover.h	243;"	d
CL_BLOCK_NEST_MAX	src/clover.h	249;"	d
CL_BREAK_MAX	src/clover.h	260;"	d
CL_CATCH_BLOCK_NUMBER_MAX	src/clover.h	265;"	d
CL_CLASS_METHOD	src/clover.h	428;"	d
CL_CLASS_NAME_MAX	src/clover.h	253;"	d
CL_CLASS_TYPE_VARIABLE_MAX	src/clover.h	258;"	d
CL_CONSTRUCTOR	src/clover.h	430;"	d
CL_ELSE_IF_MAX	src/clover.h	259;"	d
CL_ENUM_NUM_MAX	src/clover.h	284;"	d
CL_FIELDS_MAX	src/clover.h	244;"	d
CL_FIELD_INITIALIZER_STACK_SIZE	src/clover.h	267;"	d
CL_GENERICS_CLASS_DEPTH_MAX	src/clover.h	278;"	d
CL_GENERICS_CLASS_PARAM_IMPLEMENTS_MAX	src/clover.h	280;"	d
CL_GENERICS_CLASS_PARAM_MAX	src/clover.h	248;"	d
CL_GENERICS_NEWABLE_CONSTRUCTOR	src/clover.h	435;"	d
CL_LOCAL_VARIABLE_MAX	src/clover.h	241;"	d
CL_METHODS_MAX	src/clover.h	242;"	d
CL_METHOD_EXCEPTION_MAX	src/clover.h	262;"	d
CL_METHOD_NAME_MAX	src/clover.h	256;"	d
CL_METHOD_NAME_WITH_PARAMS_MAX	src/clover.h	257;"	d
CL_METHOD_PARAM_MAX	src/clover.h	245;"	d
CL_METHOD_PARAM_VARABILE_ARGUMENTS	src/clover.h	437;"	d
CL_MODULE_HASH_SIZE	src/clover.h	274;"	d
CL_MODULE_NAME_MAX	src/clover.h	567;"	d
CL_MODULE_PARAM_MAX	src/clover.h	282;"	d
CL_NAMESPACE_NAME_MAX	src/clover.h	252;"	d
CL_NATIVE_METHOD	src/clover.h	427;"	d
CL_PARAM_INITIALIZER_STACK_SIZE	src/clover.h	268;"	d
CL_PREPROCESSOR_FUN_ARGMENT_LENGTH_MAX	src/clover.h	292;"	d
CL_PREPROCESSOR_FUN_ARGUMENTS_NUM	src/clover.h	291;"	d
CL_PREPROCESSOR_FUN_MAX	src/clover.h	289;"	d
CL_PREPROCESSOR_FUN_NAME_MAX	src/clover.h	290;"	d
CL_PRIVATE_FIELD	src/clover.h	366;"	d
CL_PRIVATE_METHOD	src/clover.h	429;"	d
CL_PROTECTED_FIELD	src/clover.h	367;"	d
CL_PROTECTED_METHOD	src/clover.h	436;"	d
CL_REAL_CLASS_NAME_MAX	src/clover.h	255;"	d
CL_STACK_SIZE	src/clover.h	276;"	d
CL_STATIC_FIELD	src/clover.h	365;"	d
CL_SYNCHRONIZED_METHOD	src/clover.h	431;"	d
CL_TUPLE_ELEMENTS_MAX	src/clover.h	247;"	d
CL_VARIABLE_NAME_MAX	src/clover.h	254;"	d
CL_VIRTUAL_METHOD	src/clover.h	433;"	d
CL_VMT_NAME_MAX	src/clover.h	495;"	d
CL_VM_TYPES_MAX	src/clover.h	324;"	d
COMMON_H	src/common.h	2;"	d
CONS_str	src/clover.h	302;"	d
Class_classDependences	src/obj_class_object.c	/^BOOL Class_classDependences(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_fields	src/obj_class_object.c	/^BOOL Class_fields(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_genericsParametorTypes	src/obj_class_object.c	/^BOOL Class_genericsParametorTypes(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_implementedInterfaces	src/obj_class_object.c	/^BOOL Class_implementedInterfaces(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_isAbstractClass	src/obj_class_object.c	/^BOOL Class_isAbstractClass(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_isFinalClass	src/obj_class_object.c	/^BOOL Class_isFinalClass(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_isInterface	src/obj_class_object.c	/^BOOL Class_isInterface(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_isNativeClass	src/obj_class_object.c	/^BOOL Class_isNativeClass(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_isStruct	src/obj_class_object.c	/^BOOL Class_isStruct(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_methods	src/obj_class_object.c	/^BOOL Class_methods(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_newInstance	src/obj_class_object.c	/^BOOL Class_newInstance(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_setValue	src/obj_class_object.c	/^BOOL Class_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_superClasses	src/obj_class_object.c	/^BOOL Class_superClasses(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_toString	src/obj_class_object.c	/^BOOL Class_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Class_toType	src/obj_class_object.c	/^BOOL Class_toType(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Clover_gc	src/obj_clover.c	/^BOOL Clover_gc(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Clover_outputToString	src/obj_clover.c	/^BOOL Clover_outputToString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Clover_print	src/obj_clover.c	/^BOOL Clover_print(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Clover_printf	src/obj_clover.c	/^BOOL Clover_printf(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Clover_showClasses	src/obj_clover.c	/^BOOL Clover_showClasses(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Clover_sprintf	src/obj_clover.c	/^BOOL Clover_sprintf(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
DEBUG_H	src/debug.h	2;"	d
DESTDIR	Makefile	/^DESTDIR=$/;"	m
DUMMY_ARRAY_SIZE	src/clover.h	735;"	d
Enum_toHash	src/obj_enum.c	/^BOOL Enum_toHash(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
FALSE	src/debug.h	16;"	d
FIELD_NAME	src/clover.h	234;"	d
FIRST_OBJ	src/heap.c	6;"	d	file:
FREE	src/debug.h	45;"	d
FREE	src/debug.h	67;"	d
Field_fieldType	src/obj_field.c	/^BOOL Field_fieldType(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_get	src/obj_field.c	/^BOOL Field_get(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_isPrivateField	src/obj_field.c	/^BOOL Field_isPrivateField(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_isProtectedField	src/obj_field.c	/^BOOL Field_isProtectedField(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_isStaticField	src/obj_field.c	/^BOOL Field_isStaticField(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_name	src/obj_field.c	/^BOOL Field_name(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_set	src/obj_field.c	/^BOOL Field_set(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Field_setValue	src/obj_field.c	/^BOOL Field_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
GETINT	src/common.h	7;"	d
GETINT64	src/common.h	6;"	d
GETSHORT	src/common.h	8;"	d
HAVE_ICONV_H	config.h	3;"	d
HAVE_ICONV_H	config.h	7;"	d
HAVE_MATH_H	config.h	2;"	d
HAVE_NANOSLEEP	config.h	4;"	d
HAVE_NCURSES_H	config.h	5;"	d
HAVE_NCURSES_NCURSES_H	config.h	6;"	d
HAVE_ONIGURUMA_H	config.h	8;"	d
Hash_assoc	src/obj_hash.c	/^BOOL Hash_assoc(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Hash_each	src/obj_hash.c	/^BOOL Hash_each(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Hash_erase	src/obj_hash.c	/^BOOL Hash_erase(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Hash_length	src/obj_hash.c	/^BOOL Hash_length(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Hash_put	src/obj_hash.c	/^BOOL Hash_put(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Hash_setValue	src/obj_hash.c	/^BOOL Hash_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
IMPLEMENTED_INTERFACE_MAX	src/clover.h	492;"	d
INCLUDED_MODULE_MAX	src/clover.h	493;"	d
INSTALL	Makefile	/^INSTALL=\/usr\/bin\/install -c$/;"	m
INVOKE_METHOD_KIND_CLASS	src/common.h	706;"	d
INVOKE_METHOD_KIND_OBJECT	src/common.h	707;"	d
LIBS	Makefile	/^LIBS= -lutil -lonig -lpthread -ldl -lm -lcursesw -lncursesw$/;"	m
LIBSO2NAME	Makefile	/^LIBSO2NAME=libclover.so.1.0.0$/;"	m
LIBSONAME	Makefile	/^LIBSONAME=libclover.so$/;"	m
MALLOC	src/debug.h	41;"	d
MALLOC	src/debug.h	63;"	d
MANAGED	src/debug.h	24;"	d
METHOD_BLOCK_NEST_MAX	src/clover.h	261;"	d
METHOD_NAME	src/clover.h	235;"	d
METHOD_NAME2	src/clover.h	236;"	d
METHOD_PATH	src/clover.h	237;"	d
METHOD_PATH2	src/clover.h	238;"	d
MULTIPLE_ASSIGNMENT_NUM_MAX	src/clover.h	287;"	d
MVALUE	src/clover.h	/^typedef union MVALUE_UNION MVALUE;$/;"	t	typeref:union:MVALUE_UNION
MVALUE_UNION	src/clover.h	/^union MVALUE_UNION {$/;"	u
Method_blockParametors	src/obj_method.c	/^BOOL Method_blockParametors(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_blockResultType	src/obj_method.c	/^BOOL Method_blockResultType(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_exceptions	src/obj_method.c	/^BOOL Method_exceptions(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_invokeMethod	src/obj_method.c	/^BOOL Method_invokeMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isAbstractMethod	src/obj_method.c	/^BOOL Method_isAbstractMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isClassMethod	src/obj_method.c	/^BOOL Method_isClassMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isConstructor	src/obj_method.c	/^BOOL Method_isConstructor(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isGenericsNewableConstructor	src/obj_method.c	/^BOOL Method_isGenericsNewableConstructor(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isNativeMethod	src/obj_method.c	/^BOOL Method_isNativeMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isParamVariableArguments	src/obj_method.c	/^BOOL Method_isParamVariableArguments(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isPrivateMethod	src/obj_method.c	/^BOOL Method_isPrivateMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isProtectedMethod	src/obj_method.c	/^BOOL Method_isProtectedMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isSyncronizedMethod	src/obj_method.c	/^BOOL Method_isSyncronizedMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_isVirtualMethod	src/obj_method.c	/^BOOL Method_isVirtualMethod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_name	src/obj_method.c	/^BOOL Method_name(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_parametors	src/obj_method.c	/^BOOL Method_parametors(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_path	src/obj_method.c	/^BOOL Method_path(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_resultType	src/obj_method.c	/^BOOL Method_resultType(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Method_setValue	src/obj_method.c	/^BOOL Method_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Mutex_Mutex	src/obj_mutex.c	/^BOOL Mutex_Mutex(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Mutex_run	src/obj_mutex.c	/^BOOL Mutex_run(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Mutex_setValue	src/obj_mutex.c	/^BOOL Mutex_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
NAMESPACE_NAME	src/clover.h	232;"	d
NAMESPACE_NAME_MAX	src/clover.h	586;"	d
NAME_SIZE	src/debug.c	83;"	d	file:
NATIVE_CLASS_HASH_SIZE	src/klass.c	15;"	d	file:
NATIVE_METHOD_HASH_SIZE	src/klass.c	137;"	d	file:
NODE_TYPE_ARRAY_VALUE	src/common.h	401;"	d
NODE_TYPE_BLOCK	src/common.h	428;"	d
NODE_TYPE_BLOCK_CALL	src/common.h	426;"	d
NODE_TYPE_BREAK	src/common.h	422;"	d
NODE_TYPE_BYTES_VALUE	src/common.h	433;"	d
NODE_TYPE_BYTE_VALUE	src/common.h	439;"	d
NODE_TYPE_CHARACTER_VALUE	src/common.h	429;"	d
NODE_TYPE_CLASS_FIELD	src/common.h	404;"	d
NODE_TYPE_CLASS_METHOD_CALL	src/common.h	409;"	d
NODE_TYPE_CLASS_NAME	src/common.h	432;"	d
NODE_TYPE_CONTINUE	src/common.h	425;"	d
NODE_TYPE_DEFINE_AND_STORE_VARIABLE_NAME	src/common.h	406;"	d
NODE_TYPE_DEFINE_VARIABLE_NAME	src/common.h	402;"	d
NODE_TYPE_DO	src/common.h	423;"	d
NODE_TYPE_DVALUE	src/common.h	443;"	d
NODE_TYPE_FALSE	src/common.h	418;"	d
NODE_TYPE_FIELD	src/common.h	403;"	d
NODE_TYPE_FOR	src/common.h	424;"	d
NODE_TYPE_FVALUE	src/common.h	419;"	d
NODE_TYPE_HASH_VALUE	src/common.h	435;"	d
NODE_TYPE_IF	src/common.h	420;"	d
NODE_TYPE_INHERIT	src/common.h	415;"	d
NODE_TYPE_LONG_VALUE	src/common.h	442;"	d
NODE_TYPE_MAX	src/common.h	445;"	d
NODE_TYPE_METHOD_CALL	src/common.h	413;"	d
NODE_TYPE_NEW	src/common.h	412;"	d
NODE_TYPE_NULL	src/common.h	416;"	d
NODE_TYPE_OPERAND	src/common.h	397;"	d
NODE_TYPE_PAGE_SIZE	src/node_type.c	38;"	d	file:
NODE_TYPE_PARAM	src/common.h	410;"	d
NODE_TYPE_PATH_VALUE	src/common.h	444;"	d
NODE_TYPE_RANGE_VALUE	src/common.h	434;"	d
NODE_TYPE_REGEX_VALUE	src/common.h	437;"	d
NODE_TYPE_RETURN	src/common.h	411;"	d
NODE_TYPE_REVERT	src/common.h	427;"	d
NODE_TYPE_SHORT_VALUE	src/common.h	440;"	d
NODE_TYPE_STORE_CLASS_FIELD	src/common.h	408;"	d
NODE_TYPE_STORE_FIELD	src/common.h	407;"	d
NODE_TYPE_STORE_TUPLE	src/common.h	438;"	d
NODE_TYPE_STORE_VARIABLE_NAME	src/common.h	405;"	d
NODE_TYPE_STRING_VALUE	src/common.h	399;"	d
NODE_TYPE_SUPER	src/common.h	414;"	d
NODE_TYPE_THROW	src/common.h	430;"	d
NODE_TYPE_TRUE	src/common.h	417;"	d
NODE_TYPE_TRY	src/common.h	431;"	d
NODE_TYPE_TUPLE_VALUE	src/common.h	436;"	d
NODE_TYPE_UINT_VALUE	src/common.h	441;"	d
NODE_TYPE_VALUE	src/common.h	398;"	d
NODE_TYPE_VARIABLE_NAME	src/common.h	400;"	d
NODE_TYPE_WHILE	src/common.h	421;"	d
NULLABLE	src/debug.h	28;"	d
OBJ	Makefile	/^OBJ=src\/main.o src\/utf_mb_str.o src\/heap.o src\/buffer.o src\/klass.o src\/vm.o src\/debug.o src\/xfunc.o src\/interface.o src\/type.o src\/c_to_clover.o src\/obj_clover.o src\/obj_int.o src\/obj_byte.o src\/obj_short.o src\/obj_uint.o src\/obj_long.o src\/obj_char.o src\/obj_bytes.o src\/obj_float.o src\/obj_double.o src\/obj_bool.o src\/obj_pointer.o src\/obj_null.o src\/obj_class_object.o src\/obj_user_object.o src\/obj_string.o src\/obj_oniguruma_regex.o src\/obj_array.o src\/obj_hash.o src\/obj_range.o src\/obj_block.o src\/obj_system.o src\/obj_thread.o src\/obj_mutex.o src\/obj_file.o src\/obj_file.o src\/obj_type_object.o src\/obj_void.o src\/obj_anonymous.o src\/obj_field.o src\/obj_method.o src\/obj_enum.o src\/obj_wait_status.o src\/obj_tm.o$/;"	m
OP_ALOAD	src/clover.h	180;"	d
OP_ASTORE	src/clover.h	175;"	d
OP_BADD	src/clover.h	25;"	d
OP_BAND	src/clover.h	79;"	d
OP_BCOMPLEMENT	src/clover.h	149;"	d
OP_BDIV	src/clover.h	53;"	d
OP_BEQ	src/clover.h	129;"	d
OP_BGTR	src/clover.h	97;"	d
OP_BGTR_EQ	src/clover.h	105;"	d
OP_BLANDAND	src/clover.h	156;"	d
OP_BLEQ	src/clover.h	154;"	d
OP_BLESS	src/clover.h	113;"	d
OP_BLESS_EQ	src/clover.h	121;"	d
OP_BLNOTEQ	src/clover.h	155;"	d
OP_BLOROR	src/clover.h	157;"	d
OP_BLSHIFT	src/clover.h	67;"	d
OP_BMOD	src/clover.h	61;"	d
OP_BMULT	src/clover.h	43;"	d
OP_BNOTEQ	src/clover.h	139;"	d
OP_BOR	src/clover.h	91;"	d
OP_BREAK_IN_METHOD_BLOCK	src/clover.h	211;"	d
OP_BRSHIFT	src/clover.h	73;"	d
OP_BSADD	src/clover.h	32;"	d
OP_BSEQ	src/clover.h	136;"	d
OP_BSMULT	src/clover.h	49;"	d
OP_BSNOTEQ	src/clover.h	146;"	d
OP_BSUB	src/clover.h	35;"	d
OP_BXOR	src/clover.h	85;"	d
OP_CALL_PARAM_INITIALIZER	src/clover.h	201;"	d
OP_COMPLEMENT	src/clover.h	148;"	d
OP_DADD	src/clover.h	30;"	d
OP_DDIV	src/clover.h	58;"	d
OP_DEC_VALUE	src/clover.h	221;"	d
OP_DEQ	src/clover.h	134;"	d
OP_DGTR	src/clover.h	102;"	d
OP_DGTR_EQ	src/clover.h	110;"	d
OP_DLESS	src/clover.h	118;"	d
OP_DLESS_EQ	src/clover.h	126;"	d
OP_DMULT	src/clover.h	48;"	d
OP_DNOTEQ	src/clover.h	144;"	d
OP_DSUB	src/clover.h	40;"	d
OP_DUP	src/clover.h	218;"	d
OP_FADD	src/clover.h	29;"	d
OP_FDIV	src/clover.h	57;"	d
OP_FEQ	src/clover.h	133;"	d
OP_FGTR	src/clover.h	101;"	d
OP_FGTR_EQ	src/clover.h	109;"	d
OP_FLESS	src/clover.h	117;"	d
OP_FLESS_EQ	src/clover.h	125;"	d
OP_FLOAD	src/clover.h	182;"	d
OP_FMULT	src/clover.h	47;"	d
OP_FNOTEQ	src/clover.h	143;"	d
OP_FOLD_PARAMS_TO_ARRAY	src/clover.h	202;"	d
OP_FSTORE	src/clover.h	177;"	d
OP_FSUB	src/clover.h	39;"	d
OP_GOTO	src/clover.h	206;"	d
OP_IADD	src/clover.h	24;"	d
OP_IAND	src/clover.h	78;"	d
OP_IDIV	src/clover.h	52;"	d
OP_IEQ	src/clover.h	128;"	d
OP_IF	src/clover.h	204;"	d
OP_IGTR	src/clover.h	96;"	d
OP_IGTR_EQ	src/clover.h	104;"	d
OP_ILESS	src/clover.h	112;"	d
OP_ILESS_EQ	src/clover.h	120;"	d
OP_ILOAD	src/clover.h	181;"	d
OP_ILSHIFT	src/clover.h	66;"	d
OP_IMOD	src/clover.h	60;"	d
OP_IMULT	src/clover.h	42;"	d
OP_INC_VALUE	src/clover.h	220;"	d
OP_INOTEQ	src/clover.h	138;"	d
OP_INVOKE_BLOCK	src/clover.h	210;"	d
OP_INVOKE_METHOD	src/clover.h	198;"	d
OP_INVOKE_VIRTUAL_CLONE_METHOD	src/clover.h	200;"	d
OP_INVOKE_VIRTUAL_METHOD	src/clover.h	199;"	d
OP_IOR	src/clover.h	90;"	d
OP_IRSHIFT	src/clover.h	72;"	d
OP_ISTORE	src/clover.h	176;"	d
OP_ISUB	src/clover.h	34;"	d
OP_IXOR	src/clover.h	84;"	d
OP_LDCBOOL	src/clover.h	164;"	d
OP_LDCBYTE	src/clover.h	161;"	d
OP_LDCCHAR	src/clover.h	171;"	d
OP_LDCDOUBLE	src/clover.h	172;"	d
OP_LDCFLOAT	src/clover.h	162;"	d
OP_LDCINT	src/clover.h	160;"	d
OP_LDCLONG	src/clover.h	170;"	d
OP_LDCNULL	src/clover.h	165;"	d
OP_LDCPATH	src/clover.h	173;"	d
OP_LDCSHORT	src/clover.h	168;"	d
OP_LDCSTR	src/clover.h	167;"	d
OP_LDCUINT	src/clover.h	169;"	d
OP_LDCWSTR	src/clover.h	163;"	d
OP_LDFIELD	src/clover.h	186;"	d
OP_LDTYPE	src/clover.h	166;"	d
OP_LD_STATIC_FIELD	src/clover.h	187;"	d
OP_LOADD	src/clover.h	28;"	d
OP_LOAND	src/clover.h	82;"	d
OP_LOCOMPLEMENT	src/clover.h	152;"	d
OP_LODIV	src/clover.h	56;"	d
OP_LOEQ	src/clover.h	132;"	d
OP_LOGICAL_DENIAL	src/clover.h	158;"	d
OP_LOGTR	src/clover.h	100;"	d
OP_LOGTR_EQ	src/clover.h	108;"	d
OP_LOLESS	src/clover.h	116;"	d
OP_LOLESS_EQ	src/clover.h	124;"	d
OP_LOLSHIFT	src/clover.h	70;"	d
OP_LOMOD	src/clover.h	64;"	d
OP_LOMULT	src/clover.h	46;"	d
OP_LONOTEQ	src/clover.h	142;"	d
OP_LOOR	src/clover.h	94;"	d
OP_LORSHIFT	src/clover.h	76;"	d
OP_LOSUB	src/clover.h	38;"	d
OP_LOXOR	src/clover.h	88;"	d
OP_NEW_ARRAY	src/clover.h	191;"	d
OP_NEW_BLOCK	src/clover.h	196;"	d
OP_NEW_HASH	src/clover.h	192;"	d
OP_NEW_OBJECT	src/clover.h	190;"	d
OP_NEW_RANGE	src/clover.h	193;"	d
OP_NEW_REGEX	src/clover.h	195;"	d
OP_NEW_TUPLE	src/clover.h	194;"	d
OP_NOTIF	src/clover.h	205;"	d
OP_OLOAD	src/clover.h	183;"	d
OP_OSTORE	src/clover.h	178;"	d
OP_OUTPUT_RESULT	src/clover.h	213;"	d
OP_POP	src/clover.h	215;"	d
OP_POP_N	src/clover.h	216;"	d
OP_POP_N_WITHOUT_TOP	src/clover.h	217;"	d
OP_RETURN	src/clover.h	207;"	d
OP_SADD	src/clover.h	31;"	d
OP_SEQ	src/clover.h	135;"	d
OP_SHADD	src/clover.h	26;"	d
OP_SHAND	src/clover.h	80;"	d
OP_SHCOMPLEMENT	src/clover.h	150;"	d
OP_SHDIV	src/clover.h	54;"	d
OP_SHEQ	src/clover.h	130;"	d
OP_SHGTR	src/clover.h	98;"	d
OP_SHGTR_EQ	src/clover.h	106;"	d
OP_SHLESS	src/clover.h	114;"	d
OP_SHLESS_EQ	src/clover.h	122;"	d
OP_SHLSHIFT	src/clover.h	68;"	d
OP_SHMOD	src/clover.h	62;"	d
OP_SHMULT	src/clover.h	44;"	d
OP_SHNOTEQ	src/clover.h	140;"	d
OP_SHOR	src/clover.h	92;"	d
OP_SHRSHIFT	src/clover.h	74;"	d
OP_SHSUB	src/clover.h	36;"	d
OP_SHXOR	src/clover.h	86;"	d
OP_SMULT	src/clover.h	50;"	d
OP_SNOTEQ	src/clover.h	145;"	d
OP_SRFIELD	src/clover.h	185;"	d
OP_SR_STATIC_FIELD	src/clover.h	188;"	d
OP_SWAP	src/clover.h	219;"	d
OP_THROW	src/clover.h	208;"	d
OP_TRY	src/clover.h	209;"	d
OP_UIADD	src/clover.h	27;"	d
OP_UIAND	src/clover.h	81;"	d
OP_UICOMPLEMENT	src/clover.h	151;"	d
OP_UIDIV	src/clover.h	55;"	d
OP_UIEQ	src/clover.h	131;"	d
OP_UIGTR	src/clover.h	99;"	d
OP_UIGTR_EQ	src/clover.h	107;"	d
OP_UILESS	src/clover.h	115;"	d
OP_UILESS_EQ	src/clover.h	123;"	d
OP_UILSHIFT	src/clover.h	69;"	d
OP_UIMOD	src/clover.h	63;"	d
OP_UIMULT	src/clover.h	45;"	d
OP_UINOTEQ	src/clover.h	141;"	d
OP_UIOR	src/clover.h	93;"	d
OP_UIRSHIFT	src/clover.h	75;"	d
OP_UISUB	src/clover.h	37;"	d
OP_UIXOR	src/clover.h	87;"	d
OS	Makefile	/^OS=LINUX$/;"	m
Object_ID	src/obj_user_object.c	/^BOOL Object_ID(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Object_fields	src/obj_user_object.c	/^BOOL Object_fields(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Object_numFields	src/obj_user_object.c	/^BOOL Object_numFields(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Object_setField	src/obj_user_object.c	/^BOOL Object_setField(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Object_setType	src/obj_user_object.c	/^BOOL Object_setType(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Object_type	src/obj_user_object.c	/^BOOL Object_type(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_compile	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_compile(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_encode	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_encode(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_global	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_global(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_ignoreCase	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_ignoreCase(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_multiLine	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_multiLine(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_setEncode	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setEncode(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_setGlobal	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setGlobal(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_setIgnoreCase	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setIgnoreCase(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_setMultiLine	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setMultiLine(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_setValue	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
OnigurumaRegex_source	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_source(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
PARSE_PHASE_ADD_GENERICS_TYPES	src/common.h	1566;"	d
PARSE_PHASE_ADD_METHODS_AND_FIELDS	src/common.h	1567;"	d
PARSE_PHASE_ADD_SUPER_CLASSES	src/common.h	1564;"	d
PARSE_PHASE_ALLOC_CLASSES	src/common.h	1563;"	d
PARSE_PHASE_CALCULATE_SUPER_CLASSES	src/common.h	1565;"	d
PARSE_PHASE_COMPILE_PARAM_INITIALIZER	src/common.h	1568;"	d
PARSE_PHASE_DO_COMPILE_CODE	src/common.h	1569;"	d
PARSE_PHASE_MAX	src/common.h	1570;"	d
REALLOC	src/debug.h	43;"	d
REALLOC	src/debug.h	66;"	d
REAL_CLASS_NAME	src/clover.h	233;"	d
REGEX_LENGTH_MAX	src/clover.h	286;"	d
Range_head	src/obj_range.c	/^BOOL Range_head(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Range_setHead	src/obj_range.c	/^BOOL Range_setHead(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Range_setTail	src/obj_range.c	/^BOOL Range_setTail(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Range_setValue	src/obj_range.c	/^BOOL Range_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Range_tail	src/obj_range.c	/^BOOL Range_tail(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
SCRIPT_FILE_MAX	src/main.c	27;"	d	file:
SCRIPT_STATMENT_MAX	src/clover.h	250;"	d
SHOW_HEAP	src/common.h	738;"	d
SHOW_HEAP	src/common.h	752;"	d
SHOW_HEAP	src/common.h	764;"	d
SHOW_STACK	src/common.h	736;"	d
SHOW_STACK	src/common.h	750;"	d
SHOW_STACK	src/common.h	762;"	d
SHOW_STACK2	src/common.h	737;"	d
SHOW_STACK2	src/common.h	751;"	d
SHOW_STACK2	src/common.h	763;"	d
SO_VERSION	Makefile	/^SO_VERSION=1.0.0$/;"	m
START_VMLOG	src/common.h	733;"	d
START_VMLOG	src/common.h	747;"	d
START_VMLOG	src/common.h	761;"	d
STRDUP	src/debug.h	42;"	d
STRDUP	src/debug.h	65;"	d
SUPER_CLASS_MAX	src/clover.h	491;"	d
String_append	src/obj_string.c	/^BOOL String_append(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_char	src/obj_string.c	/^BOOL String_char(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_cmp	src/obj_string.c	/^BOOL String_cmp(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_length	src/obj_string.c	/^BOOL String_length(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_match	src/obj_string.c	/^BOOL String_match(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_matchReverse	src/obj_string.c	/^BOOL String_matchReverse(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_replace	src/obj_string.c	/^BOOL String_replace(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_setValue	src/obj_string.c	/^BOOL String_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_toBytes	src/obj_string.c	/^BOOL String_toBytes(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_toDouble	src/obj_string.c	/^BOOL String_toDouble(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
String_toInt	src/obj_string.c	/^BOOL String_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_access	src/obj_system.c	/^BOOL System_access(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_basename	src/obj_system.c	/^BOOL System_basename(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_chdir	src/obj_system.c	/^BOOL System_chdir(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_chmod	src/obj_system.c	/^BOOL System_chmod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_chown	src/obj_system.c	/^BOOL System_chown(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_chroot	src/obj_system.c	/^BOOL System_chroot(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_close	src/obj_system.c	/^BOOL System_close(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_closedir	src/obj_system.c	/^BOOL System_closedir(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_dirname	src/obj_system.c	/^BOOL System_dirname(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_dup2	src/obj_system.c	/^BOOL System_dup2(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_execv	src/obj_system.c	/^BOOL System_execv(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_execvp	src/obj_system.c	/^BOOL System_execvp(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_exit	src/obj_system.c	/^BOOL System_exit(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_flock	src/obj_system.c	/^BOOL System_flock(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_fnmatch	src/obj_system.c	/^BOOL System_fnmatch(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_fork	src/obj_system.c	/^BOOL System_fork(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getcwd	src/obj_system.c	/^BOOL System_getcwd(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getenv	src/obj_system.c	/^BOOL System_getenv(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getgid	src/obj_system.c	/^BOOL System_getgid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getpgid	src/obj_system.c	/^BOOL System_getpgid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getpid	src/obj_system.c	/^BOOL System_getpid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getppid	src/obj_system.c	/^BOOL System_getppid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_getuid	src/obj_system.c	/^BOOL System_getuid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_isatty	src/obj_system.c	/^BOOL System_isatty(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_kill	src/obj_system.c	/^BOOL System_kill(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_lchmod	src/obj_system.c	/^BOOL System_lchmod(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_lchown	src/obj_system.c	/^BOOL System_lchown(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_link	src/obj_system.c	/^BOOL System_link(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_lstat	src/obj_system.c	/^BOOL System_lstat(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_mkdir	src/obj_system.c	/^BOOL System_mkdir(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_mktime	src/obj_system.c	/^BOOL System_mktime(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_msleep	src/obj_system.c	/^BOOL System_msleep(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_nanosleep	src/obj_system.c	/^BOOL System_nanosleep(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_open	src/obj_system.c	/^BOOL System_open(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_opendir	src/obj_system.c	/^BOOL System_opendir(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_pipe	src/obj_system.c	/^BOOL System_pipe(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_rand	src/obj_system.c	/^BOOL System_rand(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_read	src/obj_system.c	/^BOOL System_read(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_readdir	src/obj_system.c	/^BOOL System_readdir(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_readlink	src/obj_system.c	/^BOOL System_readlink(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_rename	src/obj_system.c	/^BOOL System_rename(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_rmdir	src/obj_system.c	/^BOOL System_rmdir(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_setpgid	src/obj_system.c	/^BOOL System_setpgid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_sleep	src/obj_system.c	/^BOOL System_sleep(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_srand	src/obj_system.c	/^BOOL System_srand(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_stat	src/obj_system.c	/^BOOL System_stat(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_symlink	src/obj_system.c	/^BOOL System_symlink(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_system	src/obj_system.c	/^BOOL System_system(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_tcgetattr	src/obj_system.c	/^BOOL System_tcgetattr(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_tcsetattr	src/obj_system.c	/^BOOL System_tcsetattr(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_tcsetpgrp	src/obj_system.c	/^BOOL System_tcsetpgrp(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_time	src/obj_system.c	/^BOOL System_time(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_truncate	src/obj_system.c	/^BOOL System_truncate(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_umask	src/obj_system.c	/^BOOL System_umask(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_unlink	src/obj_system.c	/^BOOL System_unlink(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_utime	src/obj_system.c	/^BOOL System_utime(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_wait	src/obj_system.c	/^BOOL System_wait(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_waitpid	src/obj_system.c	/^BOOL System_waitpid(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
System_write	src/obj_system.c	/^BOOL System_write(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
TRUE	src/debug.h	12;"	d
Thread_Thread	src/obj_thread.c	/^BOOL Thread_Thread(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Thread_join	src/obj_thread.c	/^BOOL Thread_join(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Thread_setValue	src/obj_thread.c	/^BOOL Thread_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_class	src/obj_type_object.c	/^BOOL Type_class(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_classObject	src/obj_type_object.c	/^BOOL Type_classObject(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_createFromString	src/obj_type_object.c	/^BOOL Type_createFromString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_equals	src/obj_type_object.c	/^BOOL Type_equals(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_genericsParam	src/obj_type_object.c	/^BOOL Type_genericsParam(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_genericsParamNumber	src/obj_type_object.c	/^BOOL Type_genericsParamNumber(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_parentClass	src/obj_type_object.c	/^BOOL Type_parentClass(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_parentClassNumber	src/obj_type_object.c	/^BOOL Type_parentClassNumber(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_setValue	src/obj_type_object.c	/^BOOL Type_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_substitutionPosibility	src/obj_type_object.c	/^BOOL Type_substitutionPosibility(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
Type_toString	src/obj_type_object.c	/^BOOL Type_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
VMLOG	src/common.h	734;"	d
VMLOG	src/common.h	748;"	d
VMLOG	src/common.h	760;"	d
WORDSIZ	src/clover.h	270;"	d
WaitStatus_WCOREDUMP	src/obj_wait_status.c	/^BOOL WaitStatus_WCOREDUMP(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WEXITSTATUS	src/obj_wait_status.c	/^BOOL WaitStatus_WEXITSTATUS(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WIFCONTINUED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFCONTINUED(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WIFEXITED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFEXITED(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WIFSIGNALED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFSIGNALED(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WIFSTOPPED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFSTOPPED(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WSTOPSIG	src/obj_wait_status.c	/^BOOL WaitStatus_WSTOPSIG(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
WaitStatus_WTERMSIG	src/obj_wait_status.c	/^BOOL WaitStatus_WTERMSIG(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
_GNU_SOURCE	src/interface.c	1;"	d	file:
_GNU_SOURCE	src/interpreter.c	4;"	d	file:
_GNU_SOURCE	src/obj_clover.c	1;"	d	file:
__64BIT_CPU__	config.h	16;"	d
__LINUX__	config.h	14;"	d
_t_malloc_entry	src/debug.c	/^struct _t_malloc_entry$/;"	s	file:
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
add_alias_to_alias_table	src/alias.c	/^static BOOL add_alias_to_alias_table(sCLClass* klass, sCLMethod* method)$/;"	f	file:
add_class_to_class_table	src/klass.c	/^static void add_class_to_class_table(char* namespace, char* class_name, sCLClass* klass, int parametor_num)$/;"	f	file:
add_dependence_class	src/klass_ctime.c	/^void add_dependence_class(sCLClass* klass, sCLClass* dependence_class)$/;"	f
add_dependences	src/parse.c	/^static void add_dependences(sCLClass* klass, sCLClass* loaded_class)$/;"	f	file:
add_dependences_with_node_type	src/klass_ctime.c	/^static void add_dependences_with_node_type(sCLClass* klass, sCLNodeType* node_type)$/;"	f	file:
add_exception_class	src/klass_ctime.c	/^BOOL add_exception_class(sCLClass* klass, sCLMethod* method, sCLClass* exception_class)$/;"	f
add_field	src/klass_ctime.c	/^BOOL add_field(sCLClass* klass, BOOL static_, BOOL private_, BOOL protected, char* name, sCLNodeType* node_type)$/;"	f
add_field_initializer	src/klass_ctime.c	/^BOOL add_field_initializer(sCLClass* klass, BOOL static_, char* name, MANAGED sByteCode initializer_code, sVarTable* lv_table, int max_stack)$/;"	f
add_fields	src/compiler.c	/^static BOOL add_fields(sParserInfo* info, int parse_phase_num, BOOL static_ , BOOL private_, BOOL protected, char* name, sCLNodeType* result_type, BOOL initializer)$/;"	f	file:
add_generics_param_type	src/klass_ctime.c	/^BOOL add_generics_param_type(sCLClass* klass, char* name, sCLNodeType* extends_type, char num_implements_types, sCLNodeType* implements_types[CL_GENERICS_CLASS_PARAM_IMPLEMENTS_MAX])$/;"	f
add_generics_param_type_name	src/klass_ctime.c	/^BOOL add_generics_param_type_name(sCLClass* klass, char* name)$/;"	f
add_generics_param_type_to_method	src/klass_ctime.c	/^BOOL add_generics_param_type_to_method(sCLClass* klass, sCLMethod* method, char* name, sCLNodeType* extends_type, char num_implements_types, sCLNodeType* implements_types[CL_GENERICS_CLASS_PARAM_IMPLEMENTS_MAX])$/;"	f
add_implemented_interface	src/klass_ctime.c	/^BOOL add_implemented_interface(sCLClass* klass, sCLNodeType* interface)$/;"	f
add_included_module	src/klass_ctime.c	/^BOOL add_included_module(sCLClass* klass, sCLModule* module) $/;"	f
add_item_to_hash	src/obj_hash.c	/^BOOL add_item_to_hash(CLObject self, CLObject key, CLObject item, sVMInfo* info)$/;"	f
add_loaded_class_to_table	src/load_class.c	/^void add_loaded_class_to_table(sCLClass* loaded_class)$/;"	f
add_method	src/klass_ctime.c	/^void add_method(sCLClass* klass, BOOL static_, BOOL private_, BOOL protected_, BOOL native_, BOOL synchronized_, BOOL virtual_, BOOL abstract_, char* name, sCLNodeType* result_type, BOOL constructor, sCLMethod* method)$/;"	f
add_method_to_virtual_method_table	src/klass_ctime.c	/^static BOOL add_method_to_virtual_method_table(sCLClass* klass, char* method_name, int method_index, int num_params)$/;"	f	file:
add_method_to_virtual_method_table_core	src/klass_ctime.c	/^static BOOL add_method_to_virtual_method_table_core(sCLClass* klass, char* method_name, int method_index)$/;"	f	file:
add_param_initializer_to_method	src/klass_ctime.c	/^BOOL add_param_initializer_to_method(sCLClass* klass, MANAGED sByteCode* code_params, int* max_stack_params, int* lv_num_params, int num_params, sCLMethod* method)$/;"	f
add_param_to_method	src/klass_ctime.c	/^BOOL add_param_to_method(sCLClass* klass, sCLNodeType** class_params, int num_params, sCLMethod* method, int block_num, char* block_name, sCLNodeType* bt_result_type, sCLNodeType** bt_class_params, int bt_num_params, char* name, BOOL variable_arguments)$/;"	f
add_preprocessor	src/preprocessor.c	/^static BOOL add_preprocessor(char* name, MANAGED sBuf* fun_source)$/;"	f	file:
add_super_class	src/klass_ctime.c	/^BOOL add_super_class(sCLClass* klass, sCLNodeType* super_klass)$/;"	f
add_to_array	src/obj_array.c	/^void add_to_array(CLObject self, CLObject item, sVMInfo* info)$/;"	f
add_variable_to_table	src/vtable.c	/^BOOL add_variable_to_table(sVarTable* table, char* name, sCLNodeType* type_)$/;"	f
after_class_name	src/parse.c	/^static BOOL after_class_name(sCLNodeType* type, unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
alias_words	src/parse.c	/^static BOOL alias_words(BOOL* processed, char* buf, unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
alloc_array_items	src/obj_array.c	/^static CLObject alloc_array_items(int mvalue_num)$/;"	f	file:
alloc_array_object	src/obj_array.c	/^static CLObject alloc_array_object(CLObject type_object, int mvalue_num, sVMInfo* info)$/;"	f	file:
alloc_block_object	src/obj_block.c	/^static CLObject alloc_block_object()$/;"	f	file:
alloc_bool_object	src/obj_bool.c	/^static CLObject alloc_bool_object()$/;"	f	file:
alloc_byte_object	src/obj_byte.c	/^static CLObject alloc_byte_object()$/;"	f	file:
alloc_bytecode_of_method	src/klass.c	/^void alloc_bytecode_of_method(sCLMethod* method)$/;"	f
alloc_bytes_object	src/obj_bytes.c	/^static CLObject alloc_bytes_object(CLObject type_object, sVMInfo* info)$/;"	f	file:
alloc_char_object	src/obj_char.c	/^static CLObject alloc_char_object()$/;"	f	file:
alloc_class	src/klass.c	/^sCLClass* alloc_class(char* namespace, char* class_name, BOOL private_, BOOL abstract_, BOOL interface, BOOL dynamic_typing_, BOOL final_, BOOL native_, BOOL struct_, BOOL enum_, int parametor_num)$/;"	f
alloc_class_on_compile_time	src/klass_ctime.c	/^sCLClass* alloc_class_on_compile_time(char* namespace, char* class_name, BOOL private_, BOOL abstract_, BOOL interface, BOOL dynamic_typing_, BOOL final_, BOOL native_, BOOL struct_, BOOL enum_, int parametor_num)$/;"	f
alloc_double_object	src/obj_double.c	/^static CLObject alloc_double_object()$/;"	f	file:
alloc_float_object	src/obj_float.c	/^static CLObject alloc_float_object()$/;"	f	file:
alloc_hash_items	src/obj_hash.c	/^static CLObject alloc_hash_items(int mvalue_num)$/;"	f	file:
alloc_hash_object	src/obj_hash.c	/^static CLObject alloc_hash_object(CLObject type_object, int mvalue_num, sVMInfo* info)$/;"	f	file:
alloc_heap_mem	src/heap.c	/^CLObject alloc_heap_mem(int size, CLObject type_object)$/;"	f
alloc_integer_object	src/obj_int.c	/^static CLObject alloc_integer_object()$/;"	f	file:
alloc_long_object	src/obj_long.c	/^static CLObject alloc_long_object()$/;"	f	file:
alloc_mutex_object	src/obj_mutex.c	/^static CLObject alloc_mutex_object(CLObject type_object, sVMInfo* info)$/;"	f	file:
alloc_node	src/node_tree.c	/^static unsigned int alloc_node()$/;"	f	file:
alloc_node_block	src/node_tree.c	/^unsigned int alloc_node_block(sCLNodeType* block_type)$/;"	f
alloc_node_type	src/node_type.c	/^sCLNodeType* alloc_node_type()$/;"	f
alloc_null_object	src/obj_null.c	/^static CLObject alloc_null_object()$/;"	f	file:
alloc_pointer_object	src/obj_pointer.c	/^static CLObject alloc_pointer_object()$/;"	f	file:
alloc_range_object	src/obj_range.c	/^static CLObject alloc_range_object(CLObject type_object)$/;"	f	file:
alloc_regex_object	src/obj_oniguruma_regex.c	/^static CLObject alloc_regex_object(CLObject type_object)$/;"	f	file:
alloc_short_object	src/obj_short.c	/^static CLObject alloc_short_object()$/;"	f	file:
alloc_string_object	src/obj_string.c	/^static CLObject alloc_string_object(unsigned int len2, CLObject type_object, sVMInfo* info)$/;"	f	file:
alloc_thread_object	src/obj_thread.c	/^static CLObject alloc_thread_object(CLObject type_object, sVMInfo* info)$/;"	f	file:
alloc_type_object	src/obj_type_object.c	/^static CLObject alloc_type_object()$/;"	f	file:
alloc_uint_object	src/obj_uint.c	/^static CLObject alloc_uint_object()$/;"	f	file:
allocate_cl_type	src/type.c	/^sCLType* allocate_cl_type()$/;"	f
allocate_new_class	src/compiler.c	/^static BOOL allocate_new_class(char* class_name, sParserInfo* info, BOOL private_, BOOL mixin_, BOOL abstract_, BOOL dynamic_typing_, BOOL final_, BOOL native_, int parse_phase_num, BOOL interface, BOOL struct_, BOOL enum_, int parametor_num, int mixin_version)$/;"	f	file:
append_buf_to_bytecodes	src/buffer.c	/^void append_buf_to_bytecodes(sByteCode* self, int* code, int len, BOOL no_output_to_bytecodes)$/;"	f
append_buf_to_constant_pool	src/buffer.c	/^void append_buf_to_constant_pool(sConst* self, char* src, int src_len, BOOL no_output_to_bytecodes)$/;"	f
append_character_to_module	src/module.c	/^void append_character_to_module(sCLModule* self, char c)$/;"	f
append_code_to_bytecodes	src/buffer.c	/^void append_code_to_bytecodes(sByteCode* code, sConst* constant, sByteCode* code2, BOOL no_output_to_bytecodes)$/;"	f
append_constant_pool_to_bytecodes	src/buffer.c	/^void append_constant_pool_to_bytecodes(sByteCode* code, sConst* constant, sConst* constant2, BOOL no_output_to_bytecodes)$/;"	f
append_double_value_to_constant_pool	src/buffer.c	/^int append_double_value_to_constant_pool(sConst* constant, double n, BOOL no_output_to_bytecodes)$/;"	f
append_float_value_to_constant_pool	src/buffer.c	/^int append_float_value_to_constant_pool(sConst* constant, float n, BOOL no_output_to_bytecodes)$/;"	f
append_generics_type_to_bytecode	src/buffer.c	/^void append_generics_type_to_bytecode(sByteCode* self, sConst* constant, sCLNodeType* type_, BOOL no_output_to_bytecodes)$/;"	f
append_int_value_to_bytecodes	src/buffer.c	/^void append_int_value_to_bytecodes(sByteCode* self, int value, BOOL no_output_to_bytecodes)$/;"	f
append_int_value_to_constant_pool	src/buffer.c	/^int append_int_value_to_constant_pool(sConst* constant, int n, BOOL no_output_to_bytecodes)$/;"	f
append_module_to_table	src/module.c	/^static BOOL append_module_to_table(char* name, sCLModule* module)$/;"	f	file:
append_namespace_to_curernt_namespace	src/namespace.c	/^BOOL append_namespace_to_curernt_namespace(char* current_namespace, char* namespace)$/;"	f
append_node_to_node_block	src/node_tree.c	/^void append_node_to_node_block(unsigned int node_block_id, sNode* node)$/;"	f
append_opecode_to_bytecodes	src/buffer.c	/^void append_opecode_to_bytecodes(sByteCode* self, int value, BOOL no_output_to_bytecodes)$/;"	f
append_str_to_bytecodes	src/buffer.c	/^void append_str_to_bytecodes(sByteCode* code, sConst* constant, char* str, BOOL no_output_to_bytecodes)$/;"	f
append_str_to_constant_pool	src/buffer.c	/^int append_str_to_constant_pool(sConst* constant, char* str, BOOL no_output_to_bytecodes)$/;"	f
append_str_to_module	src/module.c	/^void append_str_to_module(sCLModule* self, char* str)$/;"	f
append_ulong_value_to_bytecodes	src/buffer.c	/^void append_ulong_value_to_bytecodes(sByteCode* self, unsigned long value, BOOL no_output_to_bytecodes)$/;"	f
append_wstr_to_constant_pool	src/buffer.c	/^int append_wstr_to_constant_pool(sConst* constant, char* str, BOOL no_output_to_bytecodes)$/;"	f
arrange_alignment_of_const	src/buffer.c	/^static void arrange_alignment_of_const(sConst* self, int size)$/;"	f	file:
arrange_alignment_of_const_core	src/buffer.c	/^static void arrange_alignment_of_const_core(sConst* self, int alignment)$/;"	f	file:
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
atexit_fun	src/vm.c	/^void atexit_fun()$/;"	f
automatically_include_module_from_class	src/compiler.c	/^static BOOL automatically_include_module_from_class(sParserInfo* info, int parse_phase_num, BOOL interface, int mixin_version)$/;"	f	file:
automatically_super_class_addition	src/compiler.c	/^static BOOL automatically_super_class_addition(sParserInfo* info, BOOL mixin_, int parse_phase_num, BOOL interface, BOOL abstract_, BOOL enum_, BOOL no_super_class, int sline_top)$/;"	f	file:
binary_operator	src/node.c	/^static BOOL binary_operator(sCLNodeType* left_type, sCLNodeType* right_type, sCLNodeType** type_, sCompileInfo* info, int op_int, int op_byte, int op_short, int op_uint, int op_long, int op_float, int op_double, int op_string, int op_bytes, int op_bool, int op_string_mult, int op_bytes_mult, char* operand_symbol, sCLNodeType* int_result_type, sCLNodeType* byte_result_type, sCLNodeType* short_result_type, sCLNodeType* uint_result_type, sCLNodeType* long_result_type, sCLNodeType* float_result_type, sCLNodeType* double_result_type, sCLNodeType* string_result_type, sCLNodeType* bytes_result_type, sCLNodeType* bool_result_type, sCLNodeType* string_mult_result_type, sCLNodeType* bytes_mult_result_type, BOOL quote)$/;"	f	file:
binary_operator_core	src/node.c	/^static BOOL binary_operator_core(sCLNodeType** type_, sCompileInfo* info, int op, sCLNodeType* result_type, sCLNodeType* left_type)$/;"	f	file:
bindir	Makefile	/^bindir=${exec_prefix}\/bin$/;"	m
block_kind	src/common.h	/^        enum eBlockKind block_kind;$/;"	m	struct:sCompileInfoStruct::__anon13	typeref:enum:sCompileInfoStruct::__anon13::eBlockKind
bool_setValue	src/obj_bool.c	/^BOOL bool_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
break_labels	src/common.h	/^        unsigned int* break_labels;$/;"	m	struct:sCompileInfoStruct::__anon12
break_labels_len	src/common.h	/^        int* break_labels_len;$/;"	m	struct:sCompileInfoStruct::__anon12
byte_setValue	src/obj_byte.c	/^BOOL byte_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
byte_toInt	src/obj_byte.c	/^BOOL byte_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
byte_toLong	src/obj_byte.c	/^BOOL byte_toLong(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
byte_to_int	src/obj_byte.c	/^BOOL byte_to_int(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
byte_to_string	src/obj_byte.c	/^BOOL byte_to_string(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
call_clone_method	src/vm.c	/^static BOOL call_clone_method(sCLClass* klass, sVMInfo* info, CLObject vm_type)$/;"	f	file:
call_clone_method_for_calling_by_value	src/node.c	/^static BOOL call_clone_method_for_calling_by_value(sCompileInfo* info, sCLNodeType* left_type, sCLNodeType* right_type, sCLNodeType** type_)$/;"	f	file:
call_initialize_method	src/klass.c	/^BOOL call_initialize_method(sCLClass* klass)$/;"	f
call_method	src/node.c	/^static BOOL call_method(char* method_name, BOOL class_method, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, unsigned int block_id, BOOL no_defined_no_call, BOOL* not_found_method, unsigned int block_node, sCLClass* class_of_class_method_call)$/;"	f	file:
call_method_block	src/node.c	/^static BOOL call_method_block(sCLClass* klass, sCLNodeType** type_, sCLMethod* method, char* block_name, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
call_method_missing_method	src/vm.c	/^static BOOL call_method_missing_method(sCLClass* klass,  BOOL* method_missing_found, sVMInfo* info, CLObject vm_type, char* method_name, BOOL class_method, int num_params, BOOL existance_of_block, int result_type)$/;"	f	file:
call_mixin	src/node.c	/^static BOOL call_mixin(char* method_name, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, unsigned int block_id, unsigned int block_node)$/;"	f	file:
call_preprocessor	src/preprocessor.c	/^static BOOL call_preprocessor(sBuf* command, sBuf* output)$/;"	f	file:
call_super	src/node.c	/^static BOOL call_super(char* method_name, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, unsigned int block_id, unsigned int block_node)$/;"	f	file:
caller_class	src/common.h	/^    sCLNodeType* caller_class;$/;"	m	struct:sCompileInfoStruct
caller_method	src/common.h	/^    sCLMethod* caller_method;$/;"	m	struct:sCompileInfoStruct
calling_array_value	src/common.h	/^        BOOL calling_array_value;$/;"	m	struct:sCompileInfoStruct::__anon14
calling_block	src/common.h	/^        BOOL calling_block;$/;"	m	struct:sCompileInfoStruct::__anon14
calling_method	src/common.h	/^        sCLMethod* calling_method;$/;"	m	struct:sCompileInfoStruct::__anon14
change_namespace	src/compiler.c	/^static BOOL change_namespace(sParserInfo* info)$/;"	f	file:
char_setValue	src/obj_char.c	/^BOOL char_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
char_toInt	src/obj_char.c	/^BOOL char_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
char_toString	src/obj_char.c	/^BOOL char_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
chars_object_size	src/obj_string.c	/^static unsigned int chars_object_size(unsigned int len2)$/;"	f	file:
check_abstract_methods	src/compiler.c	/^void check_abstract_methods(sParserInfo* info, int sline_saved)$/;"	f
check_dependece_offsets	src/klass.c	/^static BOOL check_dependece_offsets(sCLClass* klass)$/;"	f	file:
check_implemented_abstract_methods	src/klass_ctime.c	/^BOOL check_implemented_abstract_methods(sCLNodeType* klass, char** not_implemented_method_name)$/;"	f
check_implemented_interface	src/klass_ctime.c	/^BOOL check_implemented_interface(sCLNodeType* klass, sCLNodeType* interface)$/;"	f
check_implemented_interface2	src/klass_ctime.c	/^BOOL check_implemented_interface2(sCLClass* klass, sCLNodeType* interface)$/;"	f
check_implemented_interface2_core	src/klass_ctime.c	/^static BOOL check_implemented_interface2_core(sCLClass* klass, sCLNodeType* interface)$/;"	f	file:
check_implemented_interface_between_super_classes	src/klass_ctime.c	/^BOOL check_implemented_interface_between_super_classes(sCLNodeType* klass, sCLNodeType* interface, sCLMethod* method)$/;"	f
check_implemented_interface_without_super_class	src/klass_ctime.c	/^BOOL check_implemented_interface_without_super_class(sCLNodeType* klass, sCLNodeType* interface)$/;"	f
check_method_params	src/klass.c	/^static BOOL check_method_params(sCLMethod* method, sCLClass* klass, char* method_name, CLObject* class_params, int num_params, BOOL search_for_class_method, int block_num, int block_num_params, CLObject* block_param_type, CLObject block_type, CLObject type_object, sVMInfo* info)$/;"	f	file:
check_method_params	src/klass_ctime.c	/^static BOOL check_method_params(sCLMethod* method, sCLNodeType* klass, char* method_name, sCLNodeType** class_params, int num_params, BOOL search_for_class_method, sCLNodeType* type_, int block_num, int block_num_params, sCLNodeType** block_param_type, sCLNodeType* block_type)$/;"	f	file:
check_method_params_with_param_initializer	src/klass_ctime.c	/^static BOOL check_method_params_with_param_initializer(sCLMethod* method, sCLNodeType* klass, char* method_name, sCLNodeType** class_params, int num_params, BOOL search_for_class_method, sCLNodeType* type_, sCLNodeType* generics_solving_type, int block_num, int block_num_params, sCLNodeType** block_param_type, sCLNodeType* block_type, int* used_param_num_with_initializer)$/;"	f	file:
check_param_initializer	src/compiler.c	/^static void check_param_initializer(sByteCode* code_params, int num_params, char* sname, int* sline, int* err_num)$/;"	f	file:
check_private_access	src/node.c	/^static BOOL check_private_access(sCLClass* klass, sCLClass* access_class)$/;"	f	file:
check_struct_implements_iclonable	src/compiler.c	/^void check_struct_implements_iclonable(sParserInfo* info, int sline)$/;"	f
check_the_existance_of_this_method_before	src/compiler.c	/^static void check_the_existance_of_this_method_before(sCLNodeType* klass, char* sname, int* sline, int* err_num, sCLNodeType** class_params, int num_params, BOOL static_, BOOL mixin_, sCLNodeType* type, char* name, int block_num, int bt_num_params, sCLNodeType** bt_class_params, sCLNodeType* bt_result_type, int parse_phase_num)$/;"	f	file:
check_the_same_interface_of_two_methods	src/klass_ctime.c	/^static BOOL check_the_same_interface_of_two_methods(sCLNodeType* klass1, sCLMethod* method1, sCLNodeType* klass2, sCLMethod* method2, BOOL constructor)$/;"	f	file:
check_the_same_parametor_of_two_methods	src/klass_ctime.c	/^BOOL check_the_same_parametor_of_two_methods(sCLNodeType* klass1, sCLMethod* method1, sCLNodeType* klass2, sCLMethod* method2)$/;"	f
check_type	src/obj_type_object.c	/^BOOL check_type(CLObject ovalue1, CLObject type_object, sVMInfo* info)$/;"	f
check_type_for_array	src/obj_type_object.c	/^BOOL check_type_for_array(CLObject obj, char* generics_param_type, sVMInfo* info)$/;"	f
check_type_with_class_name	src/obj_type_object.c	/^BOOL check_type_with_class_name(CLObject ovalue1, char* class_name, sVMInfo* info)$/;"	f
check_type_with_class_name_and_nullable	src/obj_type_object.c	/^BOOL check_type_with_class_name_and_nullable(CLObject ovalue1, char* class_name, sVMInfo* info)$/;"	f
check_type_with_dynamic_typing	src/obj_type_object.c	/^BOOL check_type_with_dynamic_typing(CLObject ovalue1, CLObject type_object, sVMInfo* info)$/;"	f
check_type_with_nullable	src/obj_type_object.c	/^BOOL check_type_with_nullable(CLObject ovalue1, CLObject type_object, sVMInfo* info)$/;"	f
check_type_without_exception	src/obj_type_object.c	/^BOOL check_type_without_exception(CLObject ovalue1, CLObject type_object, sVMInfo* info)$/;"	f
check_type_without_generics	src/obj_type_object.c	/^BOOL check_type_without_generics(CLObject ovalue1, CLObject type_object, sVMInfo* info, BOOL dynamic_typing)$/;"	f
check_type_without_info	src/obj_type_object.c	/^BOOL check_type_without_info(CLObject ovalue1, char* class_name)$/;"	f
check_valid_generics_type	src/node_type.c	/^BOOL check_valid_generics_type(sCLNodeType* type, char* sname, int* sline, int* err_num, sCLClass* caller_class, sCLMethod* caller_method)$/;"	f
check_valid_star_type	src/node_type.c	/^BOOL check_valid_star_type(sCLClass* klass)$/;"	f
cl_compiler_final	src/compile.c	/^void cl_compiler_final()$/;"	f
cl_compiler_init	src/compile.c	/^void cl_compiler_init()$/;"	f
cl_eval_file	src/interface.c	/^BOOL cl_eval_file(char* file_name)$/;"	f
cl_excute_block	src/vm.c	/^BOOL cl_excute_block(CLObject block, BOOL result_existance, sVMInfo* info, CLObject vm_type)$/;"	f
cl_excute_block_with_new_stack	src/vm.c	/^BOOL cl_excute_block_with_new_stack(MVALUE* result, CLObject block, BOOL result_existance, sVMInfo* new_info, CLObject vm_type)$/;"	f
cl_excute_method	src/vm.c	/^BOOL cl_excute_method(sCLMethod* method, sCLClass* klass, sCLClass* class_of_class_method_call, NULLABLE sVMInfo* info, CLObject* result_value)$/;"	f
cl_final	src/vm.c	/^void cl_final()$/;"	f
cl_gc	src/heap.c	/^void cl_gc()$/;"	f
cl_get_array_element	src/interface.c	/^BOOL cl_get_array_element(CLObject array, int index, sCLClass* element_class, MVALUE* result)$/;"	f
cl_get_class	src/klass.c	/^sCLClass* cl_get_class(char* real_class_name)$/;"	f
cl_get_class_field	src/interface.c	/^BOOL cl_get_class_field(sCLClass* klass, char* field_name, sCLClass* field_class, MVALUE* result)$/;"	f
cl_get_class_with_argument_namespace_only	src/namespace.c	/^sCLClass* cl_get_class_with_argument_namespace_only(char* namespace, char* class_name, int parametor_num)$/;"	f
cl_get_class_with_namespace	src/klass.c	/^sCLClass* cl_get_class_with_namespace(char* namespace, char* class_name, int parametor_num)$/;"	f
cl_init	src/vm.c	/^BOOL cl_init(int heap_size, int handle_size)$/;"	f
cl_load_fundamental_classes	src/klass.c	/^BOOL cl_load_fundamental_classes()$/;"	f
cl_main	src/vm.c	/^BOOL cl_main(sByteCode* code, sConst* constant, int lv_num, int max_stack, int stack_size)$/;"	f
cl_parser_final	src/parser.c	/^static void cl_parser_final()$/;"	f	file:
cl_parser_init	src/parser.c	/^static void cl_parser_init()$/;"	f	file:
cl_print	src/interface.c	/^int cl_print(sVMInfo* info, char* msg, ...)$/;"	f
cl_type_to_buffer	src/interpreter.c	/^ALLOC char* cl_type_to_buffer(sCLType* cl_type, sCLClass* klass)$/;"	f
cl_unload_all_classes	src/klass.c	/^void cl_unload_all_classes()$/;"	f
cl_vm	src/vm.c	/^static BOOL cl_vm(sByteCode* code, sConst* constant, MVALUE* var, sVMInfo* info, CLObject vm_type)$/;"	f	file:
class_final	src/klass.c	/^void class_final()$/;"	f
class_init	src/klass.c	/^void class_init()$/;"	f
class_not_found	src/parse.c	/^static void class_not_found(char* namespace, char* class_name, sCLClass** result, char* sname, int* sline, int* err_num, sCLClass* klass, int parametor_num)$/;"	f	file:
class_of_calling_method	src/common.h	/^        sCLClass* class_of_calling_method;$/;"	m	struct:sCompileInfoStruct::__anon14
clear_method_index_of_compile_time	src/klass_ctime.c	/^void clear_method_index_of_compile_time()$/;"	f
clone_cl_type	src/type.c	/^ALLOC sCLType* clone_cl_type(sCLType* cl_type2, sCLClass* klass, sCLClass* klass2)$/;"	f
clone_cl_type2	src/type.c	/^void clone_cl_type2(sCLType* self, sCLType* cl_type2, sCLClass* klass, sCLClass* klass2)$/;"	f
clone_node_type	src/node_type.c	/^ALLOC sCLNodeType* clone_node_type(sCLNodeType* node_type)$/;"	f
clone_type_object_core	src/obj_type_object.c	/^static void clone_type_object_core(CLObject type_object1, CLObject type_object2, sVMInfo* info)$/;"	f	file:
code	src/common.h	/^    sByteCode* code;$/;"	m	struct:sCompileInfoStruct
compaction	src/heap.c	/^static void compaction(unsigned char* mark_flg)$/;"	f	file:
compile_block	src/compile.c	/^BOOL compile_block(sNodeBlock* block, sCLNodeType** type_, sCompileInfo* info)$/;"	f
compile_block_node	src/node.c	/^BOOL compile_block_node(unsigned int block_node, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f
compile_block_object	src/compile.c	/^BOOL compile_block_object(sNodeBlock* block, sConst* constant, sByteCode* code, sCLNodeType** type_, sCompileInfo* info, sCLNodeType* caller_class, sCLMethod* caller_method, enum eBlockKind block_kind)$/;"	f
compile_class	src/compiler.c	/^static BOOL compile_class(sParserInfo* info, BOOL mixin_, int parse_phase_num, BOOL interface, BOOL abstract_, BOOL native_)$/;"	f	file:
compile_class_source	src/compiler.c	/^static BOOL compile_class_source(char* sname)$/;"	f	file:
compile_conditional	src/node.c	/^static BOOL compile_conditional(unsigned int conditional_node, sCLNodeType** conditional_type, sCLNodeType** class_params, int* num_params, sCompileInfo* info, sCLNodeType** type_, sVarTable* conditional_lv_table)$/;"	f	file:
compile_error	src/parse.c	/^void compile_error(char* msg, ...)$/;"	f
compile_expressiont_in_loop	src/node.c	/^static BOOL compile_expressiont_in_loop(unsigned int conditional_node, sCLNodeType** conditional_type, sCLNodeType** class_params, int* num_params, sCompileInfo* info, sVarTable* lv_table)$/;"	f	file:
compile_field_initializer	src/compile.c	/^BOOL compile_field_initializer(sByteCode* initializer, ALLOC sCLNodeType** initializer_code_type, sCLNodeType* klass, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sVarTable* lv_table, int* max_stack)$/;"	f
compile_left_node	src/node.c	/^BOOL compile_left_node(unsigned int node, sCLNodeType** left_type, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f
compile_loop_block	src/compile.c	/^BOOL compile_loop_block(sNodeBlock* block, sCLNodeType** type_, sCompileInfo* info)$/;"	f
compile_method	src/compile.c	/^BOOL compile_method(sCLMethod* method, sCLNodeType* klass, char** p, char* sname, int* sline, int* err_num, sVarTable* lv_table, BOOL constructor, char* current_namespace)$/;"	f
compile_middle_node	src/node.c	/^BOOL compile_middle_node(unsigned int node, sCLNodeType** middle_type, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f
compile_node	src/node.c	/^BOOL compile_node(unsigned int node, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f
compile_node_for_getting_result_type_of_method_block	src/compile.c	/^static BOOL compile_node_for_getting_result_type_of_method_block(sNodeBlock* method_block, unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_param_initializer	src/compile.c	/^BOOL compile_param_initializer(ALLOC sByteCode* initializer, sCLNodeType** initializer_code_type, int* max_stack, int* lv_var_num, sCLNodeType* klass, char** p, char* sname, int* sline, int* err_num, char* current_namespace, BOOL parse_only)$/;"	f
compile_params_and_block	src/node.c	/^BOOL compile_params_and_block(unsigned int node, sCompileInfo* info, unsigned int block_node, sCLClass* class_of_calling_method, sCLMethod* calling_method, int* num_params, sCLNodeType** class_params, sCLNodeType* type_)$/;"	f
compile_regex	src/obj_oniguruma_regex.c	/^static BOOL compile_regex(CLObject self, const OnigUChar* regex_str, BOOL ignore_case, BOOL multiline, BOOL global, OnigEncoding enc, sVMInfo* info, CLObject vm_type)$/;"	f	file:
compile_right_node	src/node.c	/^BOOL compile_right_node(unsigned int node, sCLNodeType** right_type, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f
compile_script	src/compiler.c	/^static BOOL compile_script(char* sname, BOOL output_value)$/;"	f	file:
compile_statments	src/compile.c	/^BOOL compile_statments(char** p, char* sname, int* sline, sByteCode* code, sConst* constant, int* err_num, int* max_stack, char* current_namespace, sVarTable* var_table, BOOL output_result)$/;"	f
constant	src/common.h	/^    sConst* constant;$/;"	m	struct:sCompileInfoStruct
continue_labels	src/common.h	/^        unsigned int* continue_labels;$/;"	m	struct:sCompileInfoStruct::__anon12
continue_labels_len	src/common.h	/^        int* continue_labels_len;$/;"	m	struct:sCompileInfoStruct::__anon12
correct_offset	src/obj_string.c	/^static BOOL correct_offset(CLObject offset, int* offset_value, CLObject self, sVMInfo* info)$/;"	f	file:
correct_stack_pointer	src/compile.c	/^void correct_stack_pointer(int* stack_num, char* sname, int* sline, sByteCode* code, int* err_num, BOOL no_output_to_bytecodes)$/;"	f
correct_stack_pointer_n	src/compile.c	/^void correct_stack_pointer_n(int* stack_num, int n, char* sname, int* sline, sByteCode* code, int* err_num, BOOL no_output_to_bytecodes)$/;"	f
correct_stack_pointer_with_output_result	src/compile.c	/^void correct_stack_pointer_with_output_result(int* stack_num, char* sname, int* sline, sByteCode* code, int* err_num, BOOL no_output_to_bytecodes)$/;"	f
create_array_object	src/obj_array.c	/^CLObject create_array_object(CLObject type_object, MVALUE elements[], int num_elements, sVMInfo* info)$/;"	f
create_array_object2	src/obj_array.c	/^CLObject create_array_object2(CLObject type_object, CLObject elements[], int num_elements, sVMInfo* info)$/;"	f
create_array_object_for_new	src/obj_array.c	/^static CLObject create_array_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_array_object_with_element_class_name	src/obj_array.c	/^CLObject create_array_object_with_element_class_name(char* element_class_name, MVALUE elements[], int num_elements, sVMInfo* info)$/;"	f
create_block	src/obj_block.c	/^CLObject create_block(char* constant, int const_len, int* code, int code_len, int max_stack, int num_locals, int num_params, MVALUE* parent_var, int num_parent_vars, CLObject result_type, CLObject* params, BOOL breakable)$/;"	f
create_bool_object	src/obj_bool.c	/^CLObject create_bool_object(BOOL value)$/;"	f
create_bool_object_for_new	src/obj_bool.c	/^static CLObject create_bool_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_buffer_from_string_object	src/obj_string.c	/^BOOL create_buffer_from_string_object(CLObject str, ALLOC char** result, sVMInfo* info)$/;"	f
create_byte_object	src/obj_byte.c	/^CLObject create_byte_object(unsigned char value)$/;"	f
create_byte_object_for_new	src/obj_byte.c	/^static CLObject create_byte_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_byte_object_with_type	src/obj_byte.c	/^CLObject create_byte_object_with_type(unsigned char value, CLObject type_object)$/;"	f
create_bytes_object	src/obj_bytes.c	/^CLObject create_bytes_object(char* str, int len, CLObject type_object, sVMInfo* info)$/;"	f
create_bytes_object_by_multiply	src/obj_bytes.c	/^CLObject create_bytes_object_by_multiply(CLObject string, int number, sVMInfo* info)$/;"	f
create_bytes_object_by_multiply_with_type	src/obj_bytes.c	/^CLObject create_bytes_object_by_multiply_with_type(CLObject string, int number, sVMInfo* info, CLObject type_object)$/;"	f
create_bytes_object_for_new	src/obj_bytes.c	/^static CLObject create_bytes_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_char_object	src/obj_char.c	/^CLObject create_char_object(wchar_t value)$/;"	f
create_char_object_for_new	src/obj_char.c	/^static CLObject create_char_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_cl_type_from_module	src/module.c	/^void create_cl_type_from_module(sCLType* cl_type, sCLModule* module, sCLClass* klass)$/;"	f
create_cl_type_from_node_type	src/node_type.c	/^ALLOC sCLType* create_cl_type_from_node_type(sCLNodeType* node_type, sCLClass* klass)$/;"	f
create_cl_type_from_node_type2	src/node_type.c	/^void create_cl_type_from_node_type2(sCLType* cl_type, sCLNodeType* node_type, sCLClass* klass)$/;"	f
create_class_object	src/obj_class_object.c	/^CLObject create_class_object(CLObject type_object, CLObject klass)$/;"	f
create_class_object_for_new	src/obj_class_object.c	/^static CLObject create_class_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_clover_array_from_c_array	src/c_to_clover.c	/^CLObject create_clover_array_from_c_array(void* c_array, int num_elements, size_t element_size, char* element_class_name, sVMInfo* info)$/;"	f
create_double_object	src/obj_double.c	/^CLObject create_double_object(double value)$/;"	f
create_double_object_for_new	src/obj_double.c	/^static CLObject create_double_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_double_object_with_type	src/obj_double.c	/^CLObject create_double_object_with_type(double value, CLObject type)$/;"	f
create_field_object	src/obj_field.c	/^CLObject create_field_object(CLObject type_object, sCLClass* klass, sCLField* field)$/;"	f
create_field_object_for_new	src/obj_field.c	/^static CLObject create_field_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_float_object	src/obj_float.c	/^CLObject create_float_object(float value)$/;"	f
create_float_object_for_new	src/obj_float.c	/^static CLObject create_float_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_float_object_with_type	src/obj_float.c	/^CLObject create_float_object_with_type(float value, CLObject type_object)$/;"	f
create_generics_param_type_pattern	src/klass_ctime.c	/^void create_generics_param_type_pattern(ALLOC sGenericsParamPattern** generics_type_patterns, int* generics_type_pattern_num, sCLNodeType* caller_class)$/;"	f
create_generics_param_type_pattern_core	src/klass_ctime.c	/^static void create_generics_param_type_pattern_core(int i, sGenericsParamPattern** pattern, sCLNodeType* caller_class)$/;"	f	file:
create_generics_type_object	src/obj_class_object.c	/^BOOL create_generics_type_object(CLObject* result, sCLGenericsParamTypes* generics_param_type, CLObject vm_type, sVMInfo* info, sCLClass* klass)$/;"	f
create_hash_object	src/obj_hash.c	/^BOOL create_hash_object(CLObject* obj, CLObject type_object, MVALUE keys[], MVALUE elements[], int num_elements, sVMInfo* info)$/;"	f
create_hash_object_for_new	src/obj_hash.c	/^static CLObject create_hash_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_int_object	src/obj_int.c	/^CLObject create_int_object(int value)$/;"	f
create_int_object_for_new	src/obj_int.c	/^static CLObject create_int_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_int_object_with_type	src/obj_int.c	/^CLObject create_int_object_with_type(int value, CLObject type_object)$/;"	f
create_int_object_with_type_name	src/obj_int.c	/^CLObject create_int_object_with_type_name(int value, char* type_name, sVMInfo* info)$/;"	f
create_long_object	src/obj_long.c	/^CLObject create_long_object(unsigned long value)$/;"	f
create_long_object_for_new	src/obj_long.c	/^static CLObject create_long_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_long_object_with_type	src/obj_long.c	/^CLObject create_long_object_with_type(unsigned long value, CLObject type_object)$/;"	f
create_method	src/klass_ctime.c	/^BOOL create_method(sCLClass* klass, sCLMethod** method)$/;"	f
create_method_object	src/obj_method.c	/^CLObject create_method_object(CLObject type_object, sCLClass* klass, sCLMethod* method)$/;"	f
create_method_object_for_new	src/obj_method.c	/^static CLObject create_method_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_method_path	src/klass_ctime.c	/^static void create_method_path(char* result, int result_size, sCLMethod* method, sCLClass* klass)$/;"	f	file:
create_module	src/module.c	/^sCLModule* create_module(char* namespace, char* name)$/;"	f
create_module_from_real_module_name	src/module.c	/^static sCLModule* create_module_from_real_module_name(char* real_module_name)$/;"	f	file:
create_mutex_object	src/obj_mutex.c	/^static CLObject create_mutex_object(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_node_type_from_cl_type	src/node_type.c	/^ALLOC sCLNodeType* create_node_type_from_cl_type(sCLType* cl_type, sCLClass* klass)$/;"	f
create_node_type_from_class_name	src/node_type.c	/^sCLNodeType* create_node_type_from_class_name(char* class_name)$/;"	f
create_null_object	src/obj_null.c	/^CLObject create_null_object()$/;"	f
create_null_object_for_new	src/obj_null.c	/^static CLObject create_null_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_number_object_from_size	src/c_to_clover.c	/^CLObject create_number_object_from_size(size_t size, unsigned long value, char* type_name, sVMInfo* info)$/;"	f
create_oniguruma_regex_object	src/obj_oniguruma_regex.c	/^BOOL create_oniguruma_regex_object(CLObject* self, CLObject type_object, OnigUChar* regex_str, BOOL ignore_case, BOOL multiline, BOOL global, OnigEncoding enc, sVMInfo* info, CLObject vm_type)$/;"	f
create_pointer_object	src/obj_pointer.c	/^CLObject create_pointer_object(void* value, int size, CLObject pointed_object)$/;"	f
create_pointer_object_for_new	src/obj_pointer.c	/^static CLObject create_pointer_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_pointer_object_with_class_name	src/obj_pointer.c	/^CLObject create_pointer_object_with_class_name(void* value, int size, CLObject pointed_object, char* class_name, sVMInfo* info)$/;"	f
create_range_object	src/obj_range.c	/^CLObject create_range_object(CLObject type_object, CLObject head_object, CLObject tail_object)$/;"	f
create_range_object_for_new	src/obj_range.c	/^static CLObject create_range_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_real_class_name	src/klass.c	/^void create_real_class_name(char* result, int result_size, char* namespace, char* class_name, int parametor_num)$/;"	f
create_real_module_name	src/module.c	/^static void create_real_module_name(char* result, int result_size, char* namespace, char* module_name)$/;"	f	file:
create_regex_object_for_new	src/obj_oniguruma_regex.c	/^static CLObject create_regex_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_short_object	src/obj_short.c	/^CLObject create_short_object(unsigned short value)$/;"	f
create_short_object_for_new	src/obj_short.c	/^static CLObject create_short_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_short_object_with_type	src/obj_short.c	/^CLObject create_short_object_with_type(unsigned short value, CLObject type_object)$/;"	f
create_string_object	src/obj_string.c	/^CLObject create_string_object(wchar_t* str, int len, CLObject type_object, sVMInfo* info)$/;"	f
create_string_object_by_multiply	src/obj_string.c	/^CLObject create_string_object_by_multiply(CLObject string, int number, sVMInfo* info)$/;"	f
create_string_object_by_multiply_with_type	src/obj_string.c	/^CLObject create_string_object_by_multiply_with_type(CLObject string, int number, sVMInfo* info, CLObject type_object)$/;"	f
create_string_object_for_new	src/obj_string.c	/^static CLObject create_string_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_string_object_from_ascii_string	src/obj_string.c	/^BOOL create_string_object_from_ascii_string(CLObject* result, char* str, CLObject type_object, sVMInfo* info)$/;"	f
create_string_object_from_ascii_string_with_class_name	src/obj_string.c	/^BOOL create_string_object_from_ascii_string_with_class_name(CLObject* result, char* str, char* class_name, sVMInfo* info)$/;"	f
create_string_object_with_class_name	src/obj_string.c	/^CLObject create_string_object_with_class_name(wchar_t* str, int len, char* class_name, sVMInfo* info)$/;"	f
create_thread_object	src/obj_thread.c	/^static CLObject create_thread_object(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_type_object	src/obj_type_object.c	/^CLObject create_type_object(sCLClass* klass)$/;"	f
create_type_object_for_new	src/obj_type_object.c	/^static CLObject create_type_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_type_object_from_bytecodes	src/obj_type_object.c	/^CLObject create_type_object_from_bytecodes(int** pc, sByteCode* code, sConst* constant, sVMInfo* info)$/;"	f
create_type_object_from_cl_type	src/obj_type_object.c	/^CLObject create_type_object_from_cl_type(sCLClass* klass, sCLType* cl_type, sVMInfo* info)$/;"	f
create_type_object_from_other_type_object	src/obj_type_object.c	/^CLObject create_type_object_from_other_type_object(CLObject type_object, sVMInfo* info)$/;"	f
create_type_object_with_class_name	src/obj_type_object.c	/^CLObject create_type_object_with_class_name(char* class_name)$/;"	f
create_type_object_with_class_name_and_generics_name	src/obj_type_object.c	/^CLObject create_type_object_with_class_name_and_generics_name(char* class_name, sVMInfo* info)$/;"	f
create_type_object_with_class_name_and_generics_name_core	src/obj_type_object.c	/^static BOOL create_type_object_with_class_name_and_generics_name_core(CLObject object, char** p, sVMInfo* info)$/;"	f	file:
create_uint_object	src/obj_uint.c	/^CLObject create_uint_object(unsigned int value)$/;"	f
create_uint_object_for_new	src/obj_uint.c	/^static CLObject create_uint_object_for_new(CLObject type_object, sVMInfo* info)$/;"	f	file:
create_uint_object_with_type	src/obj_uint.c	/^CLObject create_uint_object_with_type(unsigned int value, CLObject type_object)$/;"	f
create_user_object	src/obj_user_object.c	/^BOOL create_user_object(CLObject type_object, CLObject* obj, CLObject vm_type, MVALUE* fields, int num_fields, sVMInfo* info)$/;"	f
create_user_object_with_class_name	src/obj_user_object.c	/^BOOL create_user_object_with_class_name(char* class_name, CLObject* obj, CLObject vm_type, sVMInfo* info)$/;"	f
current_namespace	src/common.h	/^    char* current_namespace;$/;"	m	struct:sParserInfoStruct
datadir	Makefile	/^datadir=${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir=${prefix}\/share\/clover$/;"	m
debug_calloc	src/debug.c	/^ALLOC void* debug_calloc(size_t count, size_t size, const char* file_name, int line, const char* func_name)$/;"	f
debug_final	src/debug.c	/^void debug_final()$/;"	f
debug_free	src/debug.c	/^void debug_free(void* memory, const char* file_name, int line, const char* func_name)$/;"	f
debug_init	src/debug.c	/^void debug_init()$/;"	f
debug_log	src/clover.h	/^    FILE* debug_log;$/;"	m	struct:sVMInfoStruct
debug_malloc	src/debug.c	/^ALLOC void* debug_malloc(size_t size, const char* file_name, int line, const char* func_name)$/;"	f
debug_realloc	src/debug.c	/^ALLOC void* debug_realloc(void* memory, size_t size, const char* file_name, int line, const char* func_name)$/;"	f
debug_strdup	src/debug.c	/^ALLOC char* debug_strdup(char* str, const char* file_name, int line, const char* func_name)$/;"	f
dec_stack_num	src/node.c	/^static void dec_stack_num(int* stack_num, int value)$/;"	f	file:
delete_comment	src/parse.c	/^BOOL delete_comment(sBuf* source, sBuf* source2)$/;"	f
delete_comment	src/preprocessor.c	/^BOOL delete_comment(sBuf* source, sBuf* source2)$/;"	f
determine_the_calling_method	src/node.c	/^static BOOL determine_the_calling_method(sCLClass** klass, sCLMethod** method, char* method_name, BOOL class_method, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, unsigned int block_id, BOOL no_defined_no_call, BOOL* not_found_method, unsigned int block_node, int* block_num_params, sCLNodeType** block_type, sCLNodeType* block_param_types[CL_METHOD_PARAM_MAX], BOOL* block_exist, int* used_param_num_with_initializer, sCLNodeType** result_type, sCLNodeType* err_messsage_class_params[CL_METHOD_PARAM_MAX])$/;"	f	file:
determine_the_calling_method_before_compling_params	src/node.c	/^BOOL determine_the_calling_method_before_compling_params(sCLClass** klass, sCLMethod** method, sCompileInfo* info, unsigned int node, char* method_name, sCLNodeType** type_, unsigned int block_id, unsigned int block_node)$/;"	f
determine_the_goto_point_of_break	src/node.c	/^static void determine_the_goto_point_of_break(unsigned int* break_labels_before, int* break_labels_len_before, sCompileInfo* info)$/;"	f	file:
determine_the_goto_point_of_continue	src/node.c	/^static void determine_the_goto_point_of_continue(unsigned int* continue_labels_before, int* continue_labels_len_before, sCompileInfo* info)$/;"	f	file:
display_candidates	src/interpreter.c	/^void display_candidates(char** candidates)$/;"	f
do_call_method	src/node.c	/^static BOOL do_call_method(sCLClass* klass, sCLMethod* method, char* method_name,  BOOL class_method, BOOL calling_super, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, unsigned int block_id, BOOL block_exist, int block_num_params, sCLNodeType** block_param_types, sCLNodeType* block_type, int used_param_num_with_initializer, sCLNodeType* result_type, unsigned int block_node, sCLClass* class_of_class_method_call)$/;"	f	file:
do_call_method_with_duck_typing	src/node.c	/^static BOOL do_call_method_with_duck_typing(sCLClass* klass, sCLMethod* method, char* method_name,  BOOL class_method,  sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, unsigned int block_id, BOOL block_exist, int block_num_params, sCLNodeType** block_param_types, sCLNodeType* block_type, sCLNodeType* result_type)$/;"	f	file:
do_call_mixin	src/node.c	/^static BOOL do_call_mixin(sCLMethod* method, int method_index, BOOL class_method, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info, int used_param_num_with_initializer, sCLNodeType* result_type, BOOL block_exist, unsigned int block_id, unsigned int block_node)$/;"	f	file:
do_include_file	src/compiler.c	/^static BOOL do_include_file(char* sname, char* current_namespace, int parse_phase_num)$/;"	f	file:
docdir	Makefile	/^docdir=${datarootdir}\/doc$/;"	m
does_this_var_exist	src/vtable.c	/^BOOL does_this_var_exist(sVarTable* table, char* name)$/;"	f
double_setValue	src/obj_double.c	/^BOOL double_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
double_toFloat	src/obj_double.c	/^BOOL double_toFloat(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
double_toInt	src/obj_double.c	/^BOOL double_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
double_toString	src/obj_double.c	/^BOOL double_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
eBlockKind	src/common.h	/^enum eBlockKind { kBKNone, kBKWhileDoForBlock, kBKMethodBlock, kBKTryBlock };$/;"	g
eNodeSubstitutionType	src/common.h	/^enum eNodeSubstitutionType {$/;"	g
eOperand	src/common.h	/^enum eOperand { $/;"	g
eUtfMbsKind	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	g
entry_alias_of_class	src/alias.c	/^BOOL entry_alias_of_class(sCLClass* klass)$/;"	f
entry_alias_of_class_to_alias_table	src/alias.c	/^static BOOL entry_alias_of_class_to_alias_table(sCLClass* klass)$/;"	f	file:
entry_alias_of_dependece	src/alias.c	/^static BOOL entry_alias_of_dependece(sCLClass* klass)$/;"	f	file:
entry_alias_of_methods_and_fields_of_class	src/alias.c	/^static BOOL entry_alias_of_methods_and_fields_of_class(sCLClass* klass)$/;"	f	file:
entry_alias_of_super_class	src/alias.c	/^static BOOL entry_alias_of_super_class(sCLClass* klass)$/;"	f	file:
entry_exception_object	src/vm.c	/^void entry_exception_object(sVMInfo* info, sCLClass* klass, char* msg, ...)$/;"	f
entry_exception_object_with_class_name	src/vm.c	/^void entry_exception_object_with_class_name(sVMInfo* info, char* class_name, char* msg, ...)$/;"	f
entry_native_enum_fields	src/obj_enum.c	/^void entry_native_enum_fields(sCLClass* klass, int num_fields, int values[])$/;"	f
entry_vtable_to_node_block	src/vtable.c	/^void entry_vtable_to_node_block(unsigned int block, sVarTable* new_table, sVarTable* lv_table)$/;"	f
enum_to_hash	src/obj_enum.c	/^BOOL enum_to_hash(CLObject hash, sCLClass* klass, sVMInfo* info)$/;"	f
equalibility_of_key	src/obj_hash.c	/^static BOOL equalibility_of_key(CLObject left_key, CLObject right_key, sVMInfo* info, BOOL* result)$/;"	f	file:
equals_core	src/obj_type_object.c	/^static BOOL equals_core(CLObject left, CLObject right)$/;"	f	file:
erase_item	src/obj_hash.c	/^static BOOL erase_item(CLObject self, CLObject key, sVMInfo* info)$/;"	f	file:
erase_variable_to_table	src/vtable.c	/^BOOL erase_variable_to_table(sVarTable* table, char* name)$/;"	f
err_num	src/common.h	/^    int* err_num;$/;"	m	struct:sCompileInfoStruct
err_num	src/common.h	/^    int* err_num;$/;"	m	struct:sParserInfoStruct
eval_str	src/interpreter.c	/^static BOOL eval_str(char* str)$/;"	f	file:
excute_block	src/vm.c	/^static BOOL excute_block(CLObject block, BOOL result_existance, sVMInfo* info, CLObject vm_type)$/;"	f	file:
excute_block_with_new_stack	src/vm.c	/^static BOOL excute_block_with_new_stack(MVALUE* result, CLObject block, BOOL result_existance, sVMInfo* new_info, CLObject vm_type)$/;"	f	file:
excute_method	src/vm.c	/^static BOOL excute_method(sCLMethod* method, sCLClass* klass, sCLClass* class_of_class_method_call, sConst* constant, int result_type, sVMInfo* info, CLObject vm_type)$/;"	f	file:
exec_prefix	Makefile	/^exec_prefix=${prefix}$/;"	m
exist_break	src/common.h	/^    BOOL* exist_break;$/;"	m	struct:sCompileInfoStruct
exist_return	src/common.h	/^    BOOL* exist_return;$/;"	m	struct:sCompileInfoStruct
existance_of_break	src/clover.h	/^    BOOL existance_of_break;$/;"	m	struct:sVMInfoStruct
expect_next_character	src/parse.c	/^BOOL expect_next_character(char* characters, int* err_num, char** p, char* sname, int* sline)$/;"	f
expect_next_character_with_one_forward	src/parse.c	/^void expect_next_character_with_one_forward(char* characters, int* err_num, char** p, char* sname, int* sline)$/;"	f
expression_add_sub	src/parse.c	/^static BOOL expression_add_sub(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_and	src/parse.c	/^static BOOL expression_and(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_and_and	src/parse.c	/^static BOOL expression_and_and(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_comma	src/parse.c	/^static BOOL expression_comma(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_comparison_equal_operator	src/parse.c	/^static BOOL expression_comparison_equal_operator(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_comparison_operator	src/parse.c	/^static BOOL expression_comparison_operator(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_conditional_operator	src/parse.c	/^static BOOL expression_conditional_operator(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_monadic_operator	src/parse.c	/^static BOOL expression_monadic_operator(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_mult_div	src/parse.c	/^static BOOL expression_mult_div(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_node	src/parse.c	/^static BOOL expression_node(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_node_do	src/parse.c	/^static BOOL expression_node_do(unsigned int* node, sParserInfo* info, sCLNodeType* type, sVarTable* lv_table)$/;"	f	file:
expression_node_for	src/parse.c	/^static BOOL expression_node_for(unsigned int* node, sParserInfo* info, sCLNodeType* type, sVarTable* lv_table)$/;"	f	file:
expression_node_if	src/parse.c	/^static BOOL expression_node_if(unsigned int* node, sParserInfo* info, sCLNodeType* type, sVarTable* lv_table)$/;"	f	file:
expression_node_try	src/parse.c	/^static BOOL expression_node_try(unsigned int* node, sParserInfo* info, int sline_top, sCLNodeType* finally_block_type, sVarTable* lv_table)$/;"	f	file:
expression_node_while	src/parse.c	/^static BOOL expression_node_while(unsigned int* node, sParserInfo* info, sCLNodeType* type, sVarTable* lv_table)$/;"	f	file:
expression_or	src/parse.c	/^static BOOL expression_or(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_or_or	src/parse.c	/^static BOOL expression_or_or(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_range	src/parse.c	/^static BOOL expression_range(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_shift	src/parse.c	/^static BOOL expression_shift(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_substitution	src/parse.c	/^static BOOL expression_substitution(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
expression_xor	src/parse.c	/^static BOOL expression_xor(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
extends_and_implements	src/compiler.c	/^static BOOL extends_and_implements(sParserInfo* info, BOOL mixin_, int parse_phase_num, BOOL interface, BOOL abstract_, BOOL enum_, BOOL native_)$/;"	f	file:
extname	src/compiler.c	/^static char* extname(char* file_name)$/;"	f	file:
extname	src/parser.c	/^static char* extname(char* file_name)$/;"	f	file:
extname	src/preprocessor.c	/^static char* extname(char* file_name)$/;"	f	file:
fCreateFun	src/clover.h	/^typedef CLObject (*fCreateFun)(CLObject type_object, sVMInfo*);$/;"	t
fFreeFun	src/clover.h	/^typedef void (*fFreeFun)(CLObject self);$/;"	t
fMarkFun	src/clover.h	/^typedef void (*fMarkFun)(CLObject self, unsigned char* mark_flg);$/;"	t
fNativeClassInitializar	src/clover.h	/^typedef void (*fNativeClassInitializar)(sCLClass* klass);$/;"	t
fNativeMethod	src/clover.h	/^typedef BOOL (*fNativeMethod)(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass);$/;"	t
fShowFun	src/clover.h	/^typedef void (*fShowFun)(sVMInfo* info, CLObject self);$/;"	t
field_initializer	src/vm.c	/^BOOL field_initializer(MVALUE* result, sByteCode* code, sConst* constant, int lv_num, int max_stack, CLObject vm_type)$/;"	f
final_vtable	src/vtable.c	/^void final_vtable()$/;"	f
float_setValue	src/obj_float.c	/^BOOL float_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
float_toDouble	src/obj_float.c	/^BOOL float_toDouble(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
float_toInt	src/obj_float.c	/^BOOL float_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
float_toString	src/obj_float.c	/^BOOL float_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
fold_variable_arguments_to_array	src/node.c	/^static void fold_variable_arguments_to_array(sCLMethod* method, int num_params, sCompileInfo* info)$/;"	f	file:
free_block_object	src/obj_block.c	/^static void free_block_object(CLObject self)$/;"	f	file:
free_bytes_object	src/obj_bytes.c	/^void free_bytes_object(CLObject self)$/;"	f
free_cl_types	src/type.c	/^void free_cl_types()$/;"	f
free_class	src/klass.c	/^static void free_class(sCLClass* klass)$/;"	f	file:
free_module	src/module.c	/^static void free_module(sCLModule* self)$/;"	f	file:
free_mutex_object	src/obj_mutex.c	/^static void free_mutex_object(CLObject obj)$/;"	f	file:
free_node_blocks	src/node_tree.c	/^static void free_node_blocks()$/;"	f	file:
free_node_types	src/node_type.c	/^void free_node_types()$/;"	f
free_nodes	src/node_tree.c	/^void free_nodes()$/;"	f
free_regex_object	src/obj_oniguruma_regex.c	/^static void free_regex_object(CLObject obj)$/;"	f	file:
gAliases	src/alias.c	/^static struct sAliasItem gAliases[CL_ALIAS_MAX];$/;"	v	typeref:struct:sAliasItem	file:
gAnonymousClass	src/klass.c	/^sCLClass* gAnonymousClass;$/;"	v
gAnonymousType	src/node_type.c	/^sCLNodeType* gAnonymousType;$/;"	v
gAnonymousTypeObject	src/klass.c	/^CLObject gAnonymousTypeObject = 0;$/;"	v
gArrayClass	src/klass.c	/^sCLClass* gArrayClass;$/;"	v
gArrayType	src/node_type.c	/^sCLNodeType* gArrayType;$/;"	v
gArrayTypeObject	src/klass.c	/^CLObject gArrayTypeObject = 0;$/;"	v
gBlockClass	src/klass.c	/^sCLClass* gBlockClass;$/;"	v
gBlockType	src/node_type.c	/^sCLNodeType* gBlockType;$/;"	v
gBlockTypeObject	src/klass.c	/^CLObject gBlockTypeObject = 0;$/;"	v
gBoolClass	src/klass.c	/^sCLClass* gBoolClass;$/;"	v
gBoolType	src/node_type.c	/^sCLNodeType* gBoolType;$/;"	v
gBoolTypeObject	src/klass.c	/^CLObject gBoolTypeObject = 0;$/;"	v
gByteClass	src/klass.c	/^sCLClass* gByteClass;$/;"	v
gByteType	src/node_type.c	/^sCLNodeType* gByteType;$/;"	v
gByteTypeObject	src/klass.c	/^CLObject gByteTypeObject = 0;$/;"	v
gBytesClass	src/klass.c	/^sCLClass* gBytesClass;$/;"	v
gBytesType	src/node_type.c	/^sCLNodeType* gBytesType;$/;"	v
gBytesTypeObject	src/klass.c	/^CLObject gBytesTypeObject = 0;$/;"	v
gCLHeap	src/heap.c	/^static sCLHeapManager gCLHeap;$/;"	v	file:
gCandidates	src/interpreter.c	/^char** gCandidates = NULL;$/;"	v
gCharClass	src/klass.c	/^sCLClass* gCharClass;$/;"	v
gCharType	src/node_type.c	/^sCLNodeType* gCharType;$/;"	v
gCharTypeObject	src/klass.c	/^CLObject gCharTypeObject = 0;$/;"	v
gClassHashList	src/klass.c	/^sCLClass* gClassHashList[CLASS_HASH_SIZE];$/;"	v
gDoubleClass	src/klass.c	/^sCLClass* gDoubleClass;$/;"	v
gDoubleType	src/node_type.c	/^sCLNodeType* gDoubleType;$/;"	v
gDoubleTypeObject	src/klass.c	/^CLObject gDoubleTypeObject = 0;$/;"	v
gEntriedClass	src/alias.c	/^static struct sEntriedClassItem gEntriedClass[CLASS_HASH_SIZE];$/;"	v	typeref:struct:sEntriedClassItem	file:
gExceptionClass	src/klass.c	/^sCLClass* gExceptionClass;$/;"	v
gExceptionType	src/node_type.c	/^sCLNodeType* gExceptionType;$/;"	v
gFloatClass	src/klass.c	/^sCLClass* gFloatClass;$/;"	v
gFloatType	src/node_type.c	/^sCLNodeType* gFloatType;$/;"	v
gFloatTypeObject	src/klass.c	/^CLObject gFloatTypeObject = 0;$/;"	v
gGParamClass	src/klass.c	/^sCLClass* gGParamClass[CL_GENERICS_CLASS_PARAM_MAX];$/;"	v
gGParamTypes	src/node_type.c	/^sCLNodeType* gGParamTypes[CL_GENERICS_CLASS_PARAM_MAX];$/;"	v
gGenericsTypePatterns	src/klass_ctime.c	/^static sGenericsParamPattern* gGenericsTypePatterns;$/;"	v	file:
gHashClass	src/klass.c	/^sCLClass* gHashClass;$/;"	v
gHashType	src/node_type.c	/^sCLNodeType* gHashType;$/;"	v
gHashTypeObject	src/klass.c	/^CLObject gHashTypeObject = 0;$/;"	v
gHeadCLType	src/type.c	/^static sCLType* gHeadCLType;$/;"	v	file:
gHeadVMInfo	src/vm.c	/^sVMInfo* gHeadVMInfo;$/;"	v
gHeadVTable	src/vtable.c	/^sVarTable* gHeadVTable;$/;"	v
gInputingClass	src/interpreter.c	/^BOOL gInputingClass = FALSE;$/;"	v
gInputingMethod	src/interpreter.c	/^BOOL gInputingMethod = FALSE;$/;"	v
gInputingPath	src/interpreter.c	/^BOOL gInputingPath = FALSE;$/;"	v
gIntClass	src/klass.c	/^sCLClass* gIntClass;$/;"	v
gIntType	src/node_type.c	/^sCLNodeType* gIntType;      \/\/ foudamental classes$/;"	v
gIntTypeObject	src/klass.c	/^CLObject gIntTypeObject = 0;$/;"	v
gLoadedClassOnCompileTime	src/load_class.c	/^static char* gLoadedClassOnCompileTime = NULL;$/;"	v	file:
gLongClass	src/klass.c	/^sCLClass* gLongClass;$/;"	v
gLongType	src/node_type.c	/^sCLNodeType* gLongType;$/;"	v
gLongTypeObject	src/klass.c	/^CLObject gLongTypeObject = 0;$/;"	v
gMallocEntries	src/debug.c	/^static t_malloc_entry* gMallocEntries[ARRAY_SIZE];$/;"	v	file:
gModules	src/module.c	/^sCLModule* gModules[CL_MODULE_HASH_SIZE];$/;"	v
gNativeClassHash	src/klass.c	/^static struct sNativeClassHashItem gNativeClassHash[NATIVE_CLASS_HASH_SIZE];$/;"	v	typeref:struct:sNativeClassHashItem	file:
gNativeClasses	src/klass.c	/^static sNativeClass gNativeClasses[] = {$/;"	v	file:
gNativeMethodHash	src/klass.c	/^static struct sNativeMethodHashItem gNativeMethodHash[NATIVE_METHOD_HASH_SIZE];$/;"	v	typeref:struct:sNativeMethodHashItem	file:
gNativeMethods	src/klass.c	/^static sNativeMethod gNativeMethods[] = {$/;"	v	file:
gNodeBlocks	src/node_tree.c	/^sNodeBlock* gNodeBlocks;$/;"	v
gNodeTypes	src/node_type.c	/^static sCLNodeType** gNodeTypes = NULL;$/;"	v	file:
gNodes	src/node_tree.c	/^sNodeTree* gNodes;$/;"	v
gNullClass	src/klass.c	/^sCLClass* gNullClass;$/;"	v
gNullType	src/node_type.c	/^sCLNodeType* gNullType;$/;"	v
gNullTypeObject	src/klass.c	/^CLObject gNullTypeObject = 0;$/;"	v
gNumCandidates	src/interpreter.c	/^int gNumCandidates = 0;$/;"	v
gNumGenericsTypePattern	src/klass_ctime.c	/^static int gNumGenericsTypePattern;$/;"	v	file:
gNumLoadedClassOnCompileTime	src/load_class.c	/^static int gNumLoadedClassOnCompileTime;$/;"	v	file:
gObjectClass	src/klass.c	/^sCLClass* gObjectClass;$/;"	v
gObjectType	src/node_type.c	/^sCLNodeType* gObjectType;$/;"	v
gOnigurumaRegexClass	src/klass.c	/^sCLClass* gOnigurumaRegexClass;$/;"	v
gOnigurumaRegexTypeObject	src/klass.c	/^CLObject gOnigurumaRegexTypeObject = 0;$/;"	v
gParsePhaseNum	src/compiler.c	/^int gParsePhaseNum = 1;$/;"	v
gParsePhaseNum	src/parser.c	/^int gParsePhaseNum = PARSE_PHASE_ADD_METHODS_AND_FIELDS;$/;"	v
gParserGetClassType	src/parse.c	/^sCLNodeType* gParserGetClassType = NULL;$/;"	v
gParserInputingPath	src/parse.c	/^BOOL gParserInputingPath = FALSE;$/;"	v
gParserLastNode	src/common.h	/^unsigned int gParserLastNode;$/;"	v
gParserLastNode	src/parse.c	/^unsigned int gParserLastNode = -1;$/;"	v
gParserOutput	src/errmsg.c	/^BOOL gParserOutput = TRUE;$/;"	v
gParserVarTable	src/common.h	/^sVarTable* gParserVarTable;$/;"	v
gParserVarTable	src/parse.c	/^sVarTable* gParserVarTable = NULL;$/;"	v
gPointerClass	src/klass.c	/^sCLClass* gPointerClass;$/;"	v
gPointerType	src/node_type.c	/^sCLNodeType* gPointerType;$/;"	v
gPointerTypeObject	src/klass.c	/^CLObject gPointerTypeObject = 0;$/;"	v
gPreprocessorFunctions	src/preprocessor.c	/^sPreprocessorFunction gPreprocessorFunctions[CL_PREPROCESSOR_FUN_MAX];$/;"	v
gRangeClass	src/klass.c	/^sCLClass* gRangeClass;$/;"	v
gRangeType	src/node_type.c	/^sCLNodeType* gRangeType;$/;"	v
gRangeTypeObject	src/klass.c	/^CLObject gRangeTypeObject = 0;$/;"	v
gRegexType	src/node_type.c	/^sCLNodeType* gRegexType;$/;"	v
gShortClass	src/klass.c	/^sCLClass* gShortClass;$/;"	v
gShortType	src/node_type.c	/^sCLNodeType* gShortType;$/;"	v
gShortTypeObject	src/klass.c	/^CLObject gShortTypeObject = 0;$/;"	v
gSizeBlocks	src/node_tree.c	/^static unsigned int gSizeBlocks;$/;"	v	file:
gSizeGenericsTypePattern	src/klass_ctime.c	/^static int gSizeGenericsTypePattern;$/;"	v	file:
gSizeLoadedClassOnCompileTime	src/load_class.c	/^static int gSizeLoadedClassOnCompileTime;$/;"	v	file:
gSizeNodes	src/node_tree.c	/^static unsigned int gSizeNodes;$/;"	v	file:
gSizePageNodeTypes	src/node_type.c	/^static int gSizePageNodeTypes = 0;$/;"	v	file:
gStartVMCond	src/obj_thread.c	/^static pthread_cond_t gStartVMCond = PTHREAD_COND_INITIALIZER;$/;"	v	file:
gStringClass	src/klass.c	/^sCLClass* gStringClass;$/;"	v
gStringType	src/node_type.c	/^sCLNodeType* gStringType;$/;"	v
gStringTypeObject	src/klass.c	/^CLObject gStringTypeObject = 0;$/;"	v
gThreadClass	src/klass.c	/^sCLClass* gThreadClass;$/;"	v
gThreadType	src/node_type.c	/^sCLNodeType* gThreadType;$/;"	v
gTupleType	src/node_type.c	/^sCLNodeType* gTupleType[CL_GENERICS_CLASS_PARAM_MAX+1];$/;"	v
gTypeClass	src/klass.c	/^sCLClass* gTypeClass;$/;"	v
gTypeObject	src/klass.c	/^CLObject gTypeObject = 0;$/;"	v
gTypeType	src/node_type.c	/^sCLNodeType* gTypeType;$/;"	v
gUIntClass	src/klass.c	/^sCLClass* gUIntClass;$/;"	v
gUIntType	src/node_type.c	/^sCLNodeType* gUIntType;$/;"	v
gUIntTypeObject	src/klass.c	/^CLObject gUIntTypeObject = 0;$/;"	v
gUsedBlocks	src/node_tree.c	/^static unsigned int gUsedBlocks;$/;"	v	file:
gUsedNodeTypes	src/node_type.c	/^static int gUsedNodeTypes = 0;$/;"	v	file:
gUsedNodes	src/node_tree.c	/^static unsigned int gUsedNodes;$/;"	v	file:
gUsedPageNodeTypes	src/node_type.c	/^static int gUsedPageNodeTypes = 0;$/;"	v	file:
gVMInfo	src/obj_type_object.c	/^sVMInfo* gVMInfo = NULL;$/;"	v
gVMMutex	src/obj_thread.c	/^static pthread_mutex_t gVMMutex;$/;"	v	file:
gVoidClass	src/klass.c	/^sCLClass* gVoidClass;$/;"	v
gVoidType	src/node_type.c	/^sCLNodeType* gVoidType;$/;"	v
gc	src/heap.c	/^static void gc(CLObject type_object)$/;"	f	file:
gc_all	src/heap.c	/^static void gc_all()$/;"	f	file:
generics_param_types	src/clover.h	/^    sCLClass* generics_param_types[CL_GENERICS_CLASS_PARAM_MAX];$/;"	m	struct:sVMType
get_alias_hash	src/alias.c	/^static int get_alias_hash(char* alias_name)$/;"	f	file:
get_bytes_and_int_object_from_stack	src/vm.c	/^static BOOL get_bytes_and_int_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_class_info_from_bytecode	src/vm.c	/^static BOOL get_class_info_from_bytecode(sCLClass** result, int** pc, sConst* constant, sVMInfo* info)$/;"	f	file:
get_class_name_from_bytecodes	src/vm.c	/^static void get_class_name_from_bytecodes(int** pc, sConst* constant, char** type)$/;"	f	file:
get_class_name_or_namespace_name	src/interpreter.c	/^static void get_class_name_or_namespace_name(char* result, char** p)$/;"	f	file:
get_class_name_or_namespace_name	src/obj_type_object.c	/^static void get_class_name_or_namespace_name(char* result, char** p)$/;"	f	file:
get_class_names	src/klass.c	/^ALLOC char** get_class_names(int* num_class_names)$/;"	f
get_clone_method	src/klass_ctime.c	/^sCLMethod* get_clone_method(sCLClass* klass)$/;"	f
get_definition_from_class	src/compiler.c	/^static BOOL get_definition_from_class(sParserInfo* info, BOOL mixin_, int parse_phase_num, BOOL interface, BOOL abstract_, BOOL native_)$/;"	f	file:
get_field	src/klass.c	/^sCLField* get_field(sCLClass* klass, char* field_name, BOOL class_field)$/;"	f
get_field_including_super_classes	src/klass_ctime.c	/^sCLField* get_field_including_super_classes(sCLNodeType* klass, char* field_name, sCLNodeType** founded_class, BOOL class_field, sCLNodeType** field_type, sCLNodeType* type_)$/;"	f
get_field_index	src/klass_ctime.c	/^int get_field_index(sCLClass* klass, char* field_name, BOOL class_field)$/;"	f
get_field_index_including_super_classes	src/klass_ctime.c	/^int get_field_index_including_super_classes(sCLClass* klass, char* field_name, BOOL class_field)$/;"	f
get_field_index_including_super_classes_without_class_field	src/klass_ctime.c	/^int get_field_index_including_super_classes_without_class_field(sCLClass* klass, char* field_name)$/;"	f
get_field_index_without_class_field	src/klass_ctime.c	/^static int get_field_index_without_class_field(sCLClass* klass, char* field_name)$/;"	f	file:
get_field_num_including_super_classes	src/klass.c	/^int get_field_num_including_super_classes(sCLClass* klass)$/;"	f
get_field_num_including_super_classes_without_class_field	src/klass.c	/^int get_field_num_including_super_classes_without_class_field(sCLClass* klass)$/;"	f
get_field_type	src/klass_ctime.c	/^BOOL get_field_type(sCLClass* klass, sCLField* field, ALLOC sCLNodeType** result, sCLNodeType* type_)$/;"	f
get_func	src/preprocessor.c	/^static sPreprocessorFunction* get_func(char* name)$/;"	f	file:
get_generics_param_number	src/klass_ctime.c	/^int get_generics_param_number(sCLClass* klass)$/;"	f
get_generics_param_types	src/klass_ctime.c	/^sCLGenericsParamTypes* get_generics_param_types(sCLClass* klass, sCLClass* caller_class, sCLMethod* caller_method)$/;"	f
get_generics_type_num	src/parse.c	/^int get_generics_type_num(sCLClass* klass, char* type_name)$/;"	f
get_generics_type_num_of_method_scope	src/parse.c	/^int get_generics_type_num_of_method_scope(sCLClass* klass, sCLMethod* method, char* type_name)$/;"	f
get_hash	src/klass.c	/^unsigned int get_hash(char* name)$/;"	f
get_hash_item	src/obj_hash.c	/^static BOOL get_hash_item(CLObject self, CLObject key, CLObject* hash_item, sVMInfo* info)$/;"	f	file:
get_hash_key_for_native_class	src/klass.c	/^static unsigned int get_hash_key_for_native_class(char* path)$/;"	f	file:
get_hash_key_for_native_method	src/klass.c	/^static unsigned int get_hash_key_for_native_method(char* path)$/;"	f	file:
get_hash_value	src/obj_hash.c	/^static BOOL get_hash_value(CLObject key, sVMInfo* info, int* hash_value)$/;"	f	file:
get_heap_mem_size	src/heap.c	/^static unsigned int get_heap_mem_size(CLObject object)$/;"	f	file:
get_hex_number	src/parse.c	/^static BOOL get_hex_number(char* buf, size_t buf_size, char* p2, unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
get_loaded_class	src/load_class.c	/^char* get_loaded_class(int index)$/;"	f
get_method	src/klass_ctime.c	/^sCLMethod* get_method(sCLClass* klass, char* method_name)$/;"	f
get_method_from_alias_table	src/alias.c	/^sCLMethod* get_method_from_alias_table(char* name, sCLClass** klass)$/;"	f
get_method_from_index	src/klass_ctime.c	/^sCLMethod* get_method_from_index(sCLClass* klass, int method_index)$/;"	f
get_method_index	src/klass_ctime.c	/^int get_method_index(sCLClass* klass, sCLMethod* method)$/;"	f
get_method_index_from_the_parametor_point	src/klass_ctime.c	/^int get_method_index_from_the_parametor_point(sCLClass* klass, char* method_name, int method_index, BOOL search_for_class_method)$/;"	f
get_method_names	src/klass_ctime.c	/^ALLOC char** get_method_names(sCLClass* klass)$/;"	f
get_method_names_with_arguments	src/interpreter.c	/^ALLOC ALLOC char** get_method_names_with_arguments(sCLClass* klass, BOOL class_method, int* num_methods)$/;"	f
get_method_num_params	src/klass_ctime.c	/^int get_method_num_params(sCLMethod* method)$/;"	f
get_method_on_super_classes	src/klass_ctime.c	/^sCLMethod* get_method_on_super_classes(sCLClass* klass, char* method_name, sCLClass** founded_class)$/;"	f
get_method_with_type_params	src/klass_ctime.c	/^sCLMethod* get_method_with_type_params(sCLNodeType* klass, char* method_name, sCLNodeType** class_params, int num_params, BOOL search_for_class_method, sCLNodeType* type_, int start_point, int block_num, int block_num_params, sCLNodeType** block_param_type, sCLNodeType* block_type, ALLOC sCLNodeType** result_type)$/;"	f
get_method_with_type_params_and_param_initializer	src/klass_ctime.c	/^sCLMethod* get_method_with_type_params_and_param_initializer(sCLNodeType* klass, char* method_name, sCLNodeType** class_params, int num_params, BOOL search_for_class_method, sCLNodeType* type_, sCLNodeType* generics_solving_type, int start_point, int block_num, int block_num_params, sCLNodeType** block_param_type, sCLNodeType* block_type, int* used_param_num_with_initializer, sCLNodeType** result_type)$/;"	f
get_method_with_type_params_and_param_initializer_on_super_classes	src/klass_ctime.c	/^sCLMethod* get_method_with_type_params_and_param_initializer_on_super_classes(sCLNodeType* klass, char* method_name, sCLNodeType** class_params, int num_params, sCLNodeType** founded_class, BOOL search_for_class_method, sCLNodeType* type_, sCLNodeType* generics_solving_type, int block_num, int block_num_params, sCLNodeType** block_param_type, sCLNodeType* block_type, int* used_param_num_with_initializer, sCLNodeType** result_type)$/;"	f
get_method_with_type_params_on_super_classes	src/klass_ctime.c	/^sCLMethod* get_method_with_type_params_on_super_classes(sCLNodeType* klass, char* method_name, sCLNodeType** class_params, int num_params, sCLNodeType** founded_class, BOOL search_for_class_method, sCLNodeType* type_, int block_num, int block_num_params, sCLNodeType** block_param_type, sCLNodeType* block_type, ALLOC sCLNodeType** result_type)$/;"	f
get_module	src/module.c	/^sCLModule* get_module(char* namespace, char* name)$/;"	f
get_module_body	src/module.c	/^char* get_module_body(sCLModule* module)$/;"	f
get_module_from_cl_type	src/module.c	/^sCLModule* get_module_from_cl_type(sCLClass* klass, sCLType* cl_type)$/;"	f
get_module_from_real_module_name	src/module.c	/^static sCLModule* get_module_from_real_module_name(char* real_module_name)$/;"	f	file:
get_namespace_and_class_name_from_real_class_name	src/klass.c	/^static void get_namespace_and_class_name_from_real_class_name(char* namespace, char* class_name, int* parametor_num, char* real_class_name)$/;"	f	file:
get_native_class_initializar	src/klass.c	/^static fNativeClassInitializar get_native_class_initializar(char* class_name)$/;"	f	file:
get_native_method	src/klass.c	/^static fNativeMethod get_native_method(char* path)$/;"	f	file:
get_number	src/parse.c	/^static BOOL get_number(char* buf, size_t buf_size, char* p2, unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
get_object_from_mvalue	src/heap.c	/^CLObject get_object_from_mvalue(MVALUE mvalue)$/;"	f
get_oct_number	src/parse.c	/^static BOOL get_oct_number(char* buf, size_t buf_size, char* p2, unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
get_one_bool_object_from_stack	src/vm.c	/^static BOOL get_one_bool_object_from_stack(CLObject* ovalue1, sVMInfo* info)$/;"	f	file:
get_one_byte_object_from_stack	src/vm.c	/^static BOOL get_one_byte_object_from_stack(CLObject* ovalue1, sVMInfo* info)$/;"	f	file:
get_one_int_object_from_stack	src/vm.c	/^static BOOL get_one_int_object_from_stack(CLObject* ovalue1, sVMInfo* info)$/;"	f	file:
get_one_long_object_from_stack	src/vm.c	/^static BOOL get_one_long_object_from_stack(CLObject* ovalue1, sVMInfo* info)$/;"	f	file:
get_one_short_object_from_stack	src/vm.c	/^static BOOL get_one_short_object_from_stack(CLObject* ovalue1, sVMInfo* info)$/;"	f	file:
get_one_uint_object_from_stack	src/vm.c	/^static BOOL get_one_uint_object_from_stack(CLObject* ovalue1, sVMInfo* info)$/;"	f	file:
get_params	src/parse.c	/^static BOOL get_params(sParserInfo* info, unsigned int* res_node, char start_brace, char end_brace, sVarTable* lv_table, unsigned int* block_object, unsigned int* block_node)$/;"	f	file:
get_parent_var_num	src/node.c	/^static int get_parent_var_num(sNodeBlock* block)$/;"	f	file:
get_result_type_of_method	src/klass_ctime.c	/^ALLOC sCLNodeType* get_result_type_of_method(sCLNodeType* klass, sCLMethod* method)$/;"	f
get_result_type_of_method_block	src/compile.c	/^BOOL get_result_type_of_method_block(sNodeBlock* block, sCompileInfo* info, enum eBlockKind block_kind)$/;"	f
get_static_fields_num	src/klass.c	/^int get_static_fields_num(sCLClass* klass)$/;"	f
get_static_fields_num_including_super_class	src/klass.c	/^static int get_static_fields_num_including_super_class(sCLClass* klass)$/;"	f	file:
get_static_fields_num_on_super_class	src/klass_ctime.c	/^static int get_static_fields_num_on_super_class(sCLClass* klass)$/;"	f	file:
get_string_and_int_object_from_stack	src/vm.c	/^static BOOL get_string_and_int_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_sum_of_fields_on_super_clasess	src/klass_ctime.c	/^static int get_sum_of_fields_on_super_clasess(sCLClass* klass)$/;"	f	file:
get_sum_of_fields_on_super_clasess_without_class_fields	src/klass_ctime.c	/^static int get_sum_of_fields_on_super_clasess_without_class_fields(sCLClass* klass)$/;"	f	file:
get_sum_of_fields_on_super_classes	src/klass.c	/^static int get_sum_of_fields_on_super_classes(sCLClass* klass)$/;"	f	file:
get_sum_of_parent_var_num	src/vtable.c	/^static int get_sum_of_parent_var_num(sVarTable* it)$/;"	f	file:
get_super	src/klass.c	/^sCLClass* get_super(sCLClass* klass)$/;"	f
get_super_from_type_object	src/obj_type_object.c	/^CLObject get_super_from_type_object(CLObject type_object, sVMInfo* info)$/;"	f
get_two_bool_object_from_stack	src/vm.c	/^static BOOL get_two_bool_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_byte_object_from_stack	src/vm.c	/^static BOOL get_two_byte_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_bytes_object_from_stack	src/vm.c	/^static BOOL get_two_bytes_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_double_object_from_stack	src/vm.c	/^static BOOL get_two_double_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_float_object_from_stack	src/vm.c	/^static BOOL get_two_float_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_int_object_from_stack	src/vm.c	/^static BOOL get_two_int_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_long_object_from_stack	src/vm.c	/^static BOOL get_two_long_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_short_object_from_stack	src/vm.c	/^static BOOL get_two_short_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_string_object_from_stack	src/vm.c	/^static BOOL get_two_string_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_two_uint_object_from_stack	src/vm.c	/^static BOOL get_two_uint_object_from_stack(CLObject* ovalue1, CLObject* ovalue2, sVMInfo* info)$/;"	f	file:
get_type_from_mvalue	src/vm.c	/^CLObject get_type_from_mvalue(MVALUE* mvalue, sVMInfo* info)$/;"	f
get_type_from_statment	src/compile.c	/^BOOL get_type_from_statment(char** p, char* sname, int* sline, sByteCode* code, sConst* constant, int* err_num, int* max_stack, char* current_namespace, sVarTable* var_table, BOOL output_result, sCLNodeType** type_)$/;"	f
get_type_object_from_cl_type	src/obj_type_object.c	/^CLObject get_type_object_from_cl_type(sCLType* cl_type, sCLClass* klass, sVMInfo* info)$/;"	f
get_type_object_from_cl_type_core	src/obj_type_object.c	/^static CLObject get_type_object_from_cl_type_core(sCLType* cl_type, sCLClass* klass, sVMInfo* info)$/;"	f	file:
get_type_patterns_from_generics_param_type	src/node_type.c	/^BOOL get_type_patterns_from_generics_param_type(sCLClass* klass, sCLGenericsParamTypes* generics_param_types, sCLNodeType** extends_type, sCLNodeType** implements_types, int* num_implements_types)$/;"	f
get_value_with_size	src/c_to_clover.c	/^unsigned long get_value_with_size(size_t size, CLObject number)$/;"	f
get_var_names	src/interpreter.c	/^static char** get_var_names(int* num_var_names)$/;"	f	file:
get_variable_from_table	src/vtable.c	/^sVar* get_variable_from_table(sVarTable* table, char* name)$/;"	f
get_variable_from_table_by_var_index	src/vtable.c	/^sVar* get_variable_from_table_by_var_index(sVarTable* table, int index)$/;"	f
get_variable_from_this_table_only	src/vtable.c	/^static sVar* get_variable_from_this_table_only(sVarTable* table, char* name)$/;"	f	file:
get_variable_from_this_table_only_with_index	src/vtable.c	/^sVar* get_variable_from_this_table_only_with_index(sVarTable* table, int index)$/;"	f
get_variable_index_from_table	src/vtable.c	/^int get_variable_index_from_table(sVarTable* table, char* name)$/;"	f
get_virtual_method_with_params	src/klass.c	/^sCLMethod* get_virtual_method_with_params(CLObject type_object, char* method_name, CLObject* class_params, int num_params, sCLClass** founded_class, BOOL search_for_class_method, int block_num, int block_num_params, CLObject* block_param_type, CLObject block_type,sVMInfo* info)$/;"	f
heap_final	src/heap.c	/^void heap_final()$/;"	f
heap_init	src/heap.c	/^void heap_init(int heap_size, int size_hadles)$/;"	f
in_try_block	src/common.h	/^        BOOL in_try_block;$/;"	m	struct:sCompileInfoStruct::__anon13
inc_stack_num	src/node.c	/^static void inc_stack_num(int* stack_num, int* max_stack, int value)$/;"	f	file:
include_file	src/compiler.c	/^static BOOL include_file(sParserInfo* info, int parse_phase_num)$/;"	f	file:
include_generics_param_type	src/obj_type_object.c	/^BOOL include_generics_param_type(CLObject type_object)$/;"	f
include_module	src/compiler.c	/^static BOOL include_module(sCLModule* module, sParserInfo* info, int parse_phase_num, BOOL interface)$/;"	f	file:
includedir	Makefile	/^includedir=${prefix}\/include\/clover$/;"	m
increase_or_decrease_field	src/node.c	/^static BOOL increase_or_decrease_field(unsigned int node, unsigned int left_node, char* field_name, BOOL class_field, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
increase_or_decrease_local_variable	src/node.c	/^static BOOL increase_or_decrease_local_variable(char* name, sVar* var, unsigned int node, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
increment_and_decrement	src/parse.c	/^static BOOL increment_and_decrement(enum eOperand op, unsigned int* node, unsigned int right, unsigned int middle, sParserInfo* info , int sline_top, sVarTable* lv_table, BOOL quote)$/;"	f	file:
init_block_vtable	src/vtable.c	/^sVarTable* init_block_vtable(sVarTable* lv_table)$/;"	f
init_generics_type_pattern	src/klass_ctime.c	/^static void init_generics_type_pattern()$/;"	f	file:
init_included_modules_flags	src/compiler.c	/^static void init_included_modules_flags()$/;"	f	file:
init_method	src/compiler.c	/^static BOOL init_method(sParserInfo* info, int parse_phase_num)$/;"	f	file:
init_method_block_vtable	src/vtable.c	/^sVarTable* init_method_block_vtable(sVarTable* lv_table)$/;"	f
init_node_blocks	src/node_tree.c	/^static void init_node_blocks()$/;"	f	file:
init_node_types	src/node_type.c	/^void init_node_types()$/;"	f
init_nodes	src/node_tree.c	/^void init_nodes()$/;"	f
init_var_table	src/vtable.c	/^sVarTable* init_var_table()$/;"	f
init_vtable	src/vtable.c	/^void init_vtable()$/;"	f
initialize_hidden_class_method_and_flags	src/klass.c	/^static void initialize_hidden_class_method_and_flags(sCLClass* klass)$/;"	f	file:
initialize_hidden_class_method_of_anonymous	src/obj_anonymous.c	/^void initialize_hidden_class_method_of_anonymous(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_array	src/obj_array.c	/^void initialize_hidden_class_method_of_array(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_block	src/obj_block.c	/^void initialize_hidden_class_method_of_block(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_bytes	src/obj_bytes.c	/^void initialize_hidden_class_method_of_bytes(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_class_object	src/obj_class_object.c	/^void initialize_hidden_class_method_of_class_object(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_field_object	src/obj_field.c	/^void initialize_hidden_class_method_of_field_object(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_hash	src/obj_hash.c	/^void initialize_hidden_class_method_of_hash(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_bool	src/obj_bool.c	/^void initialize_hidden_class_method_of_immediate_bool(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_byte	src/obj_byte.c	/^void initialize_hidden_class_method_of_immediate_byte(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_char	src/obj_char.c	/^void initialize_hidden_class_method_of_immediate_char(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_double	src/obj_double.c	/^void initialize_hidden_class_method_of_immediate_double(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_float	src/obj_float.c	/^void initialize_hidden_class_method_of_immediate_float(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_int	src/obj_int.c	/^void initialize_hidden_class_method_of_immediate_int(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_long	src/obj_long.c	/^void initialize_hidden_class_method_of_immediate_long(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_null	src/obj_null.c	/^void initialize_hidden_class_method_of_immediate_null(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_short	src/obj_short.c	/^void initialize_hidden_class_method_of_immediate_short(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_uint	src/obj_uint.c	/^void initialize_hidden_class_method_of_immediate_uint(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_immediate_void	src/obj_void.c	/^void initialize_hidden_class_method_of_immediate_void(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_method_object	src/obj_method.c	/^void initialize_hidden_class_method_of_method_object(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_mutex	src/obj_mutex.c	/^void initialize_hidden_class_method_of_mutex(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_oniguruma_regex	src/obj_oniguruma_regex.c	/^void initialize_hidden_class_method_of_oniguruma_regex(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_pointer	src/obj_pointer.c	/^void initialize_hidden_class_method_of_pointer(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_range	src/obj_range.c	/^void initialize_hidden_class_method_of_range(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_string	src/obj_string.c	/^void initialize_hidden_class_method_of_string(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_thread	src/obj_thread.c	/^void initialize_hidden_class_method_of_thread(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_type	src/obj_type_object.c	/^void initialize_hidden_class_method_of_type(sCLClass* klass)$/;"	f
initialize_hidden_class_method_of_user_object	src/obj_user_object.c	/^void initialize_hidden_class_method_of_user_object(sCLClass* klass)$/;"	f
int_setValue	src/obj_int.c	/^BOOL int_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toByte	src/obj_int.c	/^BOOL int_toByte(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toChar	src/obj_int.c	/^BOOL int_toChar(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toDouble	src/obj_int.c	/^BOOL int_toDouble(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toFloat	src/obj_int.c	/^BOOL int_toFloat(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toLong	src/obj_int.c	/^BOOL int_toLong(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toShort	src/obj_int.c	/^BOOL int_toShort(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toString	src/obj_int.c	/^BOOL int_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
int_toUInt	src/obj_int.c	/^BOOL int_toUInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
is_abstract_method_implemented	src/klass_ctime.c	/^static BOOL is_abstract_method_implemented(sCLNodeType* klass, sCLNodeType* klass_of_method, sCLMethod* method)$/;"	f	file:
is_already_added_on_loaded_class_table	src/load_class.c	/^static BOOL is_already_added_on_loaded_class_table(char* real_class_name)$/;"	f	file:
is_already_contained_on_dependeces	src/klass_ctime.c	/^static BOOL is_already_contained_on_dependeces(sCLClass* klass, sCLClass* dependence_class)$/;"	f	file:
is_called_from_inside	src/node.c	/^static BOOL is_called_from_inside(sCLClass* real_caller_class, sCLClass* klass)$/;"	f	file:
is_dynamic_typing_class	src/klass.c	/^BOOL is_dynamic_typing_class(sCLClass* klass)$/;"	f
is_generics_param_class	src/klass.c	/^BOOL is_generics_param_class(sCLClass* klass)$/;"	f
is_generics_param_type	src/klass_ctime.c	/^BOOL is_generics_param_type(sCLNodeType* node_type)$/;"	f
is_method_exception_class	src/klass_ctime.c	/^BOOL is_method_exception_class(sCLClass* klass, sCLMethod* method, sCLClass* exception_class)$/;"	f
is_parent_class	src/klass_ctime.c	/^BOOL is_parent_class(sCLClass* klass1, sCLClass* klass2) $/;"	f
is_parent_class_by_name	src/obj_enum.c	/^static BOOL is_parent_class_by_name(sCLClass* klass1, char* parent_class_name)$/;"	f	file:
is_parent_native_class	src/klass_ctime.c	/^BOOL is_parent_native_class(sCLClass* klass1)$/;"	f
is_this_class_entried	src/alias.c	/^static BOOL is_this_class_entried(char* real_class_name)$/;"	f	file:
is_this_clone_method	src/klass_ctime.c	/^static BOOL is_this_clone_method(sCLClass* klass, sCLMethod* method)$/;"	f	file:
is_this_completion_method	src/klass_ctime.c	/^static BOOL is_this_completion_method(sCLClass* klass, sCLMethod* method)$/;"	f	file:
is_this_completion_method_of_class_method	src/klass_ctime.c	/^static BOOL is_this_completion_method_of_class_method(sCLClass* klass, sCLMethod* method)$/;"	f	file:
is_this_giving_type_parametor	src/klass_ctime.c	/^BOOL is_this_giving_type_parametor(sCLNodeType* caller_class, sCLClass* klass, sCLNodeType* type_)$/;"	f
is_this_initialize_method	src/klass_ctime.c	/^static BOOL is_this_initialize_method(sCLClass* klass, sCLMethod* method)$/;"	f	file:
is_this_method_missing_method	src/klass_ctime.c	/^static BOOL is_this_method_missing_method(sCLClass* klass, sCLMethod* method)$/;"	f	file:
is_this_method_missing_method_of_class_method	src/klass_ctime.c	/^static BOOL is_this_method_missing_method_of_class_method(sCLClass* klass, sCLMethod* method)$/;"	f	file:
is_valid_class_pointer	src/klass.c	/^BOOL is_valid_class_pointer(void* class_pointer)$/;"	f
is_valid_object	src/heap.c	/^BOOL is_valid_object(CLObject obj)$/;"	f
items_object_size	src/obj_array.c	/^static unsigned int items_object_size(int mvalue_num)$/;"	f	file:
items_object_size	src/obj_hash.c	/^static unsigned int items_object_size(int table_size)$/;"	f	file:
kBKMethodBlock	src/common.h	/^enum eBlockKind { kBKNone, kBKWhileDoForBlock, kBKMethodBlock, kBKTryBlock };$/;"	e	enum:eBlockKind
kBKNone	src/common.h	/^enum eBlockKind { kBKNone, kBKWhileDoForBlock, kBKMethodBlock, kBKTryBlock };$/;"	e	enum:eBlockKind
kBKTryBlock	src/common.h	/^enum eBlockKind { kBKNone, kBKWhileDoForBlock, kBKMethodBlock, kBKTryBlock };$/;"	e	enum:eBlockKind
kBKWhileDoForBlock	src/common.h	/^enum eBlockKind { kBKNone, kBKWhileDoForBlock, kBKMethodBlock, kBKTryBlock };$/;"	e	enum:eBlockKind
kByte	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	e	enum:eUtfMbsKind
kEucjp	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	e	enum:eUtfMbsKind
kNSAnd	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSDiv	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSLShift	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSMinus	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSMod	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSMult	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSNone	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSOr	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSPlus	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSRShift	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kNSXor	src/common.h	/^    kNSNone, kNSPlus, kNSMinus, kNSMult, kNSDiv, kNSMod, kNSLShift, kNSRShift, kNSAnd, kNSXor, kNSOr$/;"	e	enum:eNodeSubstitutionType
kOpAdd	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpAnd	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpAndAnd	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComma	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonEqual	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonEqualTilda	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonGreater	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonGreaterEqual	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonLesser	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonLesserEqual	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComparisonNotEqual	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpComplement	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpConditional	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpDiv	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpIndexing	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpLeftShift	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpLogicalDenial	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpMinusMinus	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpMinusMinus2	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpMod	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpMult	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpOr	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpOrOr	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpPlusPlus	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpPlusPlus2	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpRightShift	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpSub	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpSubstitutionIndexing	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kOpXor	src/common.h	/^    kOpAdd, kOpSub, kOpMult, kOpDiv, kOpMod, kOpPlusPlus2, kOpMinusMinus2, kOpIndexing, kOpSubstitutionIndexing, kOpPlusPlus, kOpMinusMinus, kOpComplement, kOpLogicalDenial, kOpLeftShift, kOpRightShift, kOpComparisonGreater, kOpComparisonLesser, kOpComparisonGreaterEqual, kOpComparisonLesserEqual, kOpComparisonEqual, kOpComparisonNotEqual, kOpComparisonEqualTilda, kOpAnd, kOpXor, kOpOr, kOpOrOr, kOpAndAnd, kOpConditional, kOpComma$/;"	e	enum:eOperand
kSjis	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	e	enum:eUtfMbsKind
kUnknown	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	e	enum:eUtfMbsKind
kUtf8	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	e	enum:eUtfMbsKind
kUtf8Mac	src/common.h	/^enum eUtfMbsKind { kEucjp, kSjis, kUtf8, kUtf8Mac, kByte, kUnknown };$/;"	e	enum:eUtfMbsKind
klass	src/common.h	/^    sCLNodeType* klass;$/;"	m	struct:sParserInfoStruct
libdir	Makefile	/^libdir=${exec_prefix}\/lib$/;"	m
line_buffer_from_head_to_cursor_point	src/interpreter.c	/^static ALLOC char* line_buffer_from_head_to_cursor_point()$/;"	f	file:
load_class	src/klass.c	/^static sCLClass* load_class(char* file_name, BOOL solve_dependences, int parametor_num)$/;"	f	file:
load_class_final	src/load_class.c	/^void load_class_final()$/;"	f
load_class_from_classpath	src/klass.c	/^sCLClass* load_class_from_classpath(char* real_class_name, BOOL solve_dependences, int mixin_version)$/;"	f
load_class_from_classpath_on_compile_time	src/klass_ctime.c	/^static sCLClass* load_class_from_classpath_on_compile_time(char* real_class_name, BOOL solve_dependences, int mixin_version)$/;"	f	file:
load_class_init	src/load_class.c	/^void load_class_init()$/;"	f
load_class_with_namespace_on_compile_time	src/klass_ctime.c	/^sCLClass* load_class_with_namespace_on_compile_time(char* namespace, char* class_name, BOOL solve_dependences, int parametor_num, int mixin_version)$/;"	f
load_code	src/interface.c	/^static BOOL load_code(sByteCode* code, sConst* constant, int* gv_var_num, int* max_stack, char* fname)$/;"	f	file:
load_field	src/node.c	/^static BOOL load_field(char* field_name, BOOL class_field, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
load_fundamental_classes_on_compile_time	src/klass_ctime.c	/^BOOL load_fundamental_classes_on_compile_time()$/;"	f
load_local_varialbe	src/node.c	/^static BOOL load_local_varialbe(char* name, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
load_local_varialbe_from_var_index	src/node.c	/^static BOOL load_local_varialbe_from_var_index(int index, sCLNodeType** type_, sCompileInfo* info)$/;"	f	file:
load_module_from_file	src/module.c	/^static BOOL load_module_from_file(ALLOC sCLModule** self, char* real_module_name)$/;"	f	file:
load_tuple_element	src/node.c	/^static BOOL load_tuple_element(int element_num, int tuple_element_num, sCLNodeType* tuple_type, sCLNodeType** type_, sCompileInfo* info)$/;"	f	file:
load_type_object_core	src/obj_type_object.c	/^static BOOL load_type_object_core(CLObject object, int** pc, sByteCode* code, sConst* constant, sVMInfo* info)$/;"	f	file:
load_type_object_from_cl_type_core	src/obj_type_object.c	/^static void load_type_object_from_cl_type_core(CLObject object, sCLClass* klass, sCLType* cl_type, sVMInfo* info)$/;"	f	file:
log_number	src/clover.h	/^    int log_number;$/;"	m	struct:sVMInfoStruct
long_setValue	src/obj_long.c	/^BOOL long_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toByte	src/obj_long.c	/^BOOL long_toByte(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toChar	src/obj_long.c	/^BOOL long_toChar(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toDouble	src/obj_long.c	/^BOOL long_toDouble(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toFloat	src/obj_long.c	/^BOOL long_toFloat(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toInt	src/obj_long.c	/^BOOL long_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toShort	src/obj_long.c	/^BOOL long_toShort(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toString	src/obj_long.c	/^BOOL long_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
long_toUInt	src/obj_long.c	/^BOOL long_toUInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
lv_table	src/common.h	/^    sVarTable* lv_table;$/;"	m	struct:sCompileInfoStruct
mBlock	src/common.h	/^            unsigned int mBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mBlock	src/common.h	/^        unsigned int mBlock;                                 \/\/ node block id$/;"	m	union:sNodeTreeStruct::__anon4
mBlock	src/obj_thread.c	/^    CLObject mBlock;$/;"	m	struct:sThreadFuncArg	file:
mBlockLevel	src/clover.h	/^    int mBlockLevel;$/;"	m	struct:sVarStruct
mBlockLevel	src/clover.h	/^    int mBlockLevel;$/;"	m	struct:sVarTableStruct
mBlockNode	src/common.h	/^            unsigned int mBlockNode;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mBlockType	src/clover.h	/^    sCLBlockType mBlockType;$/;"	m	struct:sCLMethodStruct
mBlockType	src/common.h	/^    sCLNodeType* mBlockType;$/;"	m	struct:sNodeBlockStruct
mBody	src/clover.h	/^    sBuf mBody;$/;"	m	struct:sCLModuleStruct
mBreakable	src/clover.h	/^    int mBreakable;             \/\/ 0:none 1:tuple 2:bool 3:dynamic typing$/;"	m	struct:sCLBlockStruct
mBreakable	src/common.h	/^    BOOL mBreakable;$/;"	m	struct:sNodeBlockStruct
mBuf	src/clover.h	/^    char* mBuf;$/;"	m	struct:sBufStruct
mByteCodes	src/clover.h	/^        sByteCode mByteCodes;$/;"	m	union:sCLMethodStruct::__anon3
mByteValue	src/common.h	/^        unsigned char mByteValue;$/;"	m	union:sNodeTreeStruct::__anon4
mCatchBlockNumber	src/common.h	/^            int mCatchBlockNumber;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mCatchBlocks	src/common.h	/^            unsigned int mCatchBlocks[CL_CATCH_BLOCK_NUMBER_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mCharacterValue	src/common.h	/^        wchar_t mCharacterValue;$/;"	m	union:sNodeTreeStruct::__anon4
mChars	src/clover.h	/^    char* mChars;$/;"	m	struct:sCLBytesStruct
mChars	src/clover.h	/^    wchar_t mChars[DUMMY_ARRAY_SIZE];$/;"	m	struct:sCLStringDataStruct
mClass	src/alias.c	/^    sCLClass* mClass;$/;"	m	struct:sAliasItem	file:
mClass	src/clover.h	/^    CLObject mClass;$/;"	m	struct:sCLClassObjectStruct
mClass	src/clover.h	/^    sCLClass* mClass;$/;"	m	struct:sCLFieldObjectStruct
mClass	src/clover.h	/^    sCLClass* mClass;$/;"	m	struct:sCLMethodObjectStruct
mClass	src/clover.h	/^    sCLClass* mClass;$/;"	m	struct:sCLNodeTypeStruct
mClass	src/clover.h	/^    sCLClass* mClass;$/;"	m	struct:sCLObjectHeaderStruct
mClass	src/clover.h	/^    sCLClass* mClass;$/;"	m	struct:sCLTypeObjectStruct
mClass	src/common.h	/^        sCLClass* mClass;$/;"	m	union:sNodeTreeStruct::__anon4
mClassHashList	src/clover.h	/^    sCLClass* mClassHashList[CLASS_HASH_SIZE];$/;"	m	struct:sCLNameSpaceStruct
mClassName	src/klass.c	/^    char* mClassName;$/;"	m	struct:sNativeClassHashItem	file:
mClassName	src/klass.c	/^    const char* mClassName;$/;"	m	struct:sNativeClassStruct	file:
mClassNameOffset	src/clover.h	/^    char mClassNameOffset;   \/\/ Offset of constant pool$/;"	m	struct:sCLClassStruct
mClassNameOffset	src/clover.h	/^    int mClassNameOffset;                                  \/\/ real class name(offset of constant pool)$/;"	m	struct:sCLTypeStruct
mClassParams	src/common.h	/^    sCLNodeType* mClassParams[CL_METHOD_PARAM_MAX];$/;"	m	struct:sNodeBlockStruct
mCloneMethodIndex	src/clover.h	/^    int mCloneMethodIndex;$/;"	m	struct:sCLClassStruct
mCode	src/clover.h	/^    int* mCode;$/;"	m	struct:sByteCodeStruct
mCode	src/clover.h	/^    sByteCode* mCode;$/;"	m	struct:sCLBlockStruct
mCompletionMethodIndex	src/clover.h	/^    int mCompletionMethodIndex;$/;"	m	struct:sCLClassStruct
mCompletionMethodIndexOfClassMethod	src/clover.h	/^    int mCompletionMethodIndexOfClassMethod;$/;"	m	struct:sCLClassStruct
mConst	src/clover.h	/^    char* mConst;$/;"	m	struct:sConstStruct
mConstPool	src/clover.h	/^    sConst mConstPool;$/;"	m	struct:sCLClassStruct
mConstant	src/clover.h	/^    sConst* mConstant;$/;"	m	struct:sCLBlockStruct
mCreateFun	src/clover.h	/^    fCreateFun mCreateFun;$/;"	m	struct:sCLClassStruct
mCurrentMem	src/heap.c	/^    unsigned char* mCurrentMem;$/;"	m	struct:sCLHeapManager_	file:
mDValue	src/common.h	/^        double mDValue;$/;"	m	union:sNodeTreeStruct::__anon4
mData	src/clover.h	/^    CLObject mData;$/;"	m	struct:sCLArrayStruct
mData	src/clover.h	/^    CLObject mData;$/;"	m	struct:sCLHashStruct
mData	src/clover.h	/^    CLObject mData;$/;"	m	struct:sCLStringStruct
mDependencesOffset	src/clover.h	/^    int* mDependencesOffset;$/;"	m	struct:sCLClassStruct
mDoBlock	src/common.h	/^        unsigned int mDoBlock;                               \/\/ node block id$/;"	m	union:sNodeTreeStruct::__anon4
mElseBlock	src/common.h	/^            unsigned int mElseBlock;                         \/\/ node block id$/;"	m	struct:sNodeTreeStruct::__anon4::__anon7
mElseIfBlock	src/common.h	/^            unsigned int mElseIfBlock[CL_ELSE_IF_MAX];       \/\/ node block id$/;"	m	struct:sNodeTreeStruct::__anon4::__anon7
mElseIfBlockNum	src/common.h	/^            unsigned int mElseIfBlockNum;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon7
mElseIfConditional	src/common.h	/^            unsigned int mElseIfConditional[CL_ELSE_IF_MAX]; \/\/ node id$/;"	m	struct:sNodeTreeStruct::__anon4::__anon7
mEncoding	src/clover.h	/^    CLObject mEncoding;$/;"	m	struct:sCLOnigurumaRegexStruct
mEnteringSourceEnd	src/common.h	/^    BOOL mEnteringSourceEnd;$/;"	m	struct:sNodeBlockStruct
mExceptionClassNameOffset	src/clover.h	/^    int mExceptionClassNameOffset[CL_METHOD_EXCEPTION_MAX];   \/\/ real class name(offset of constant pool)$/;"	m	struct:sCLMethodStruct
mExceptionType	src/common.h	/^            sCLNodeType* mExceptionType[CL_CATCH_BLOCK_NUMBER_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mExceptionVariableName	src/common.h	/^            char mExceptionVariableName[CL_CATCH_BLOCK_NUMBER_MAX][CL_VARIABLE_NAME_MAX+1];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mExistence	src/clover.h	/^    int mExistence;                      \/\/ for gabage collection$/;"	m	struct:sCLObjectHeaderStruct
mExtendsType	src/clover.h	/^    sCLType mExtendsType;$/;"	m	struct:sCLGenericsParamTypesStruct
mExtendsType	src/compiler.c	/^    sCLNodeType* mExtendsType;$/;"	m	struct:sCLNodeGenericsParamTypesStruct	file:
mFValue	src/common.h	/^        float mFValue;$/;"	m	union:sNodeTreeStruct::__anon4
mField	src/clover.h	/^    sCLField* mField;$/;"	m	struct:sCLFieldObjectStruct
mFieldIndex	src/clover.h	/^    int mFieldIndex;$/;"	m	struct:sCLFieldStruct
mFields	src/clover.h	/^    MVALUE mFields[DUMMY_ARRAY_SIZE];$/;"	m	struct:sCLUserObjectStruct
mFields	src/clover.h	/^    sCLField* mFields;$/;"	m	struct:sCLClassStruct
mFieldsInitialized	src/clover.h	/^    BOOL mFieldsInitialized;$/;"	m	struct:sCLClassStruct
mFileName	src/debug.c	/^    char mFileName[NAME_SIZE];$/;"	m	struct:_t_malloc_entry	file:
mFinallyBlock	src/common.h	/^            unsigned int mFinallyBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mFlags	src/clover.h	/^    int mFlags;$/;"	m	struct:sCLFieldStruct
mFlags	src/clover.h	/^    int mFlags;$/;"	m	struct:sCLMethodStruct
mFlags	src/clover.h	/^    long long mFlags;$/;"	m	struct:sCLClassStruct
mForBlock	src/common.h	/^        unsigned int mForBlock;                              \/\/ node block id$/;"	m	union:sNodeTreeStruct::__anon4
mFreeFun	src/clover.h	/^    fFreeFun mFreeFun;$/;"	m	struct:sCLClassStruct
mFreeHandles	src/heap.c	/^    int mFreeHandles;    \/\/ -1 for NULL. index of mHandles$/;"	m	struct:sCLHeapManager_	file:
mFun	src/klass.c	/^    fNativeClassInitializar mFun;$/;"	m	struct:sNativeClassHashItem	file:
mFun	src/klass.c	/^    fNativeClassInitializar mFun;$/;"	m	struct:sNativeClassStruct	file:
mFun	src/klass.c	/^    fNativeMethod mFun;$/;"	m	struct:sNativeMethodHashItem	file:
mFun	src/klass.c	/^    fNativeMethod mFun;$/;"	m	struct:sNativeMethodStruct	file:
mFuncName	src/debug.c	/^    char mFuncName[NAME_SIZE];$/;"	m	struct:_t_malloc_entry	file:
mGenericsTypes	src/clover.h	/^    CLObject mGenericsTypes[CL_GENERICS_CLASS_PARAM_MAX];$/;"	m	struct:sCLTypeObjectStruct
mGenericsTypes	src/clover.h	/^    sCLGenericsParamTypes mGenericsTypes[CL_GENERICS_CLASS_PARAM_MAX];$/;"	m	struct:sCLClassStruct
mGenericsTypes	src/clover.h	/^    sCLGenericsParamTypes mGenericsTypes[CL_GENERICS_CLASS_PARAM_MAX];$/;"	m	struct:sCLMethodStruct
mGenericsTypes	src/clover.h	/^    struct sCLNodeTypeStruct* mGenericsTypes[CL_GENERICS_CLASS_PARAM_MAX];$/;"	m	struct:sCLNodeTypeStruct	typeref:struct:sCLNodeTypeStruct::sCLNodeTypeStruct
mGenericsTypes	src/clover.h	/^    struct sCLTypeStruct* mGenericsTypes[CL_GENERICS_CLASS_PARAM_MAX]; \/\/ real class name(offset of constant pool)$/;"	m	struct:sCLTypeStruct	typeref:struct:sCLTypeStruct::sCLTypeStruct
mGenericsTypes	src/common.h	/^    sCLNodeType* mGenericsTypes[CL_GENERICS_CLASS_PARAM_MAX];$/;"	m	struct:sGenericsParamPatternStruct
mGenericsTypesNum	src/clover.h	/^    char mGenericsTypesNum;$/;"	m	struct:sCLClassStruct
mGenericsTypesNum	src/clover.h	/^    char mGenericsTypesNum;$/;"	m	struct:sCLMethodStruct
mGenericsTypesNum	src/clover.h	/^    char mGenericsTypesNum;$/;"	m	struct:sCLNodeTypeStruct
mGenericsTypesNum	src/clover.h	/^    char mGenericsTypesNum;$/;"	m	struct:sCLTypeStruct
mGenericsTypesNum	src/clover.h	/^    int mGenericsTypesNum;$/;"	m	struct:sCLTypeObjectStruct
mGenericsTypesNum	src/common.h	/^    int mGenericsTypesNum;$/;"	m	struct:sGenericsParamPatternStruct
mGlobal	src/clover.h	/^    BOOL mGlobal;$/;"	m	struct:sCLOnigurumaRegexStruct
mGlobal	src/common.h	/^            BOOL mGlobal;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mHandles	src/heap.c	/^    sHandle* mHandles;$/;"	m	struct:sCLHeapManager_	file:
mHashValue	src/clover.h	/^    unsigned int mHashValue;$/;"	m	struct:sCLHashDataItemStruct
mHead	src/clover.h	/^    CLObject mHead;$/;"	m	struct:sCLRangeStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLArrayItemsStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLArrayStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLBlockStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLBoolStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLByteStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLBytesStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLCharStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLClassObjectStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLDoubleStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLFieldObjectStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLFloatStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLHashDataStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLHashStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLIntStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLLongStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLMethodObjectStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLMutexStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLNullStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLOnigurumaRegexStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLPointerStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLRangeStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLShortStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLStringDataStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLStringStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLThreadStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLTypeObjectStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLUIntStruct
mHeader	src/clover.h	/^    sCLObjectHeader mHeader;$/;"	m	struct:sCLUserObjectStruct
mHeapMemSize	src/clover.h	/^    int mHeapMemSize;$/;"	m	struct:sCLObjectHeaderStruct
mIfBlock	src/common.h	/^            unsigned int mIfBlock;                           \/\/ node block id$/;"	m	struct:sNodeTreeStruct::__anon4::__anon7
mIgnoreCase	src/clover.h	/^    BOOL mIgnoreCase;$/;"	m	struct:sCLOnigurumaRegexStruct
mIgnoreCase	src/common.h	/^            BOOL mIgnoreCase;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mImplementedInterfaces	src/clover.h	/^    sCLType mImplementedInterfaces[IMPLEMENTED_INTERFACE_MAX];$/;"	m	struct:sCLClassStruct
mImplementsTypes	src/clover.h	/^    sCLType mImplementsTypes[CL_GENERICS_CLASS_PARAM_IMPLEMENTS_MAX];$/;"	m	struct:sCLGenericsParamTypesStruct
mImplementsTypes	src/compiler.c	/^    sCLNodeType* mImplementsTypes[CL_GENERICS_CLASS_PARAM_IMPLEMENTS_MAX];$/;"	m	struct:sCLNodeGenericsParamTypesStruct	file:
mIncludedModules	src/clover.h	/^    sCLType mIncludedModules[INCLUDED_MODULE_MAX];$/;"	m	struct:sCLClassStruct
mIndex	src/clover.h	/^    int mIndex;$/;"	m	struct:sVarStruct
mInitializeMethodIndex	src/clover.h	/^    int mInitializeMethodIndex;$/;"	m	struct:sCLClassStruct
mInitializer	src/clover.h	/^    sByteCode mInitializer;$/;"	m	struct:sCLFieldStruct
mInitializer	src/clover.h	/^    sByteCode mInitializer;$/;"	m	struct:sCLParamInitializerStruct
mInitializerLVNum	src/clover.h	/^    int mInitializerLVNum;$/;"	m	struct:sCLFieldStruct
mInitializerMaxStack	src/clover.h	/^    int mInitializerMaxStack;$/;"	m	struct:sCLFieldStruct
mItem	src/clover.h	/^    CLObject mItem;$/;"	m	struct:sCLHashDataItemStruct
mItems	src/clover.h	/^    MVALUE mItems[DUMMY_ARRAY_SIZE];$/;"	m	struct:sCLArrayItemsStruct
mItems	src/clover.h	/^    sCLHashDataItem mItems[DUMMY_ARRAY_SIZE];$/;"	m	struct:sCLHashDataStruct
mKey	src/clover.h	/^    CLObject mKey;$/;"	m	struct:sCLHashDataItemStruct
mLVNum	src/clover.h	/^    int mLVNum;$/;"	m	struct:sCLParamInitializerStruct
mLVTable	src/common.h	/^    sVarTable* mLVTable;$/;"	m	struct:sNodeBlockStruct
mLeft	src/common.h	/^    unsigned int mLeft;     \/\/ node index$/;"	m	struct:sNodeTreeStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sBufStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sByteCodeStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sCLArrayStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sCLBytesStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sCLHashStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sCLStringStruct
mLen	src/clover.h	/^    int mLen;$/;"	m	struct:sConstStruct
mLenNodes	src/common.h	/^    int mLenNodes;$/;"	m	struct:sNodeBlockStruct
mLine	src/debug.c	/^    int mLine;$/;"	m	struct:_t_malloc_entry	file:
mLocalVariables	src/clover.h	/^    sVar mLocalVariables[CL_LOCAL_VARIABLE_MAX];  \/\/ open address hash$/;"	m	struct:sVarTableStruct
mLongValue	src/common.h	/^        unsigned long mLongValue;$/;"	m	union:sNodeTreeStruct::__anon4
mMarkFun	src/clover.h	/^    fMarkFun mMarkFun;$/;"	m	struct:sCLClassStruct
mMaxBlockVarNum	src/clover.h	/^    int mMaxBlockVarNum;$/;"	m	struct:sVarTableStruct
mMaxStack	src/clover.h	/^    int mMaxStack;$/;"	m	struct:sCLBlockStruct
mMaxStack	src/clover.h	/^    int mMaxStack;$/;"	m	struct:sCLMethodStruct
mMaxStack	src/clover.h	/^    int mMaxStack;$/;"	m	struct:sCLParamInitializerStruct
mMaxStack	src/common.h	/^    int mMaxStack;$/;"	m	struct:sNodeBlockStruct
mMem	src/heap.c	/^    unsigned char* mMem;$/;"	m	struct:sCLHeapManager_	file:
mMemB	src/heap.c	/^    unsigned char* mMemB;$/;"	m	struct:sCLHeapManager_	file:
mMemLen	src/heap.c	/^    unsigned int mMemLen;$/;"	m	struct:sCLHeapManager_	file:
mMemSize	src/heap.c	/^    unsigned int mMemSize;$/;"	m	struct:sCLHeapManager_	file:
mMemory	src/debug.c	/^    void* mMemory;$/;"	m	struct:_t_malloc_entry	file:
mMethod	src/alias.c	/^    sCLMethod* mMethod;$/;"	m	struct:sAliasItem	file:
mMethod	src/clover.h	/^    sCLMethod* mMethod;$/;"	m	struct:sCLMethodObjectStruct
mMethodIndex	src/clover.h	/^    char mMethodIndex;$/;"	m	struct:sVMethodMapStruct
mMethodIndexOfCompileTime	src/clover.h	/^    int mMethodIndexOfCompileTime;  \/\/ compile time data$/;"	m	struct:sCLClassStruct
mMethodMissingMethodIndex	src/clover.h	/^    int mMethodMissingMethodIndex;$/;"	m	struct:sCLClassStruct
mMethodMissingMethodIndexOfClassMethod	src/clover.h	/^    int mMethodMissingMethodIndexOfClassMethod;$/;"	m	struct:sCLClassStruct
mMethodName	src/clover.h	/^    char mMethodName[CL_VMT_NAME_MAX];$/;"	m	struct:sVMethodMapStruct
mMethods	src/clover.h	/^    sCLMethod* mMethods;$/;"	m	struct:sCLClassStruct
mMiddle	src/common.h	/^    unsigned int mMiddle;$/;"	m	struct:sNodeTreeStruct
mModified	src/clover.h	/^    BOOL mModified;$/;"	m	struct:sCLModuleStruct
mMultiLine	src/clover.h	/^    BOOL mMultiLine;$/;"	m	struct:sCLOnigurumaRegexStruct
mMultiline	src/common.h	/^            BOOL mMultiline;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mMutex	src/clover.h	/^    pthread_mutex_t mMutex;$/;"	m	struct:sCLMutexStruct
mName	src/alias.c	/^    char mName[CL_CLASS_NAME_MAX];$/;"	m	struct:sEntriedClassItem	file:
mName	src/alias.c	/^    char mName[CL_METHOD_NAME_MAX];$/;"	m	struct:sAliasItem	file:
mName	src/clover.h	/^    char mName[CL_METHOD_NAME_MAX];$/;"	m	struct:sVarStruct
mName	src/clover.h	/^    char mName[CL_MODULE_NAME_MAX+1];$/;"	m	struct:sCLModuleStruct
mName	src/clover.h	/^    char mName[NAMESPACE_NAME_MAX];$/;"	m	struct:sCLNameSpaceStruct
mName	src/compiler.c	/^    char mName[CL_CLASS_TYPE_VARIABLE_MAX];$/;"	m	struct:sCLNodeGenericsParamTypesStruct	file:
mName	src/preprocessor.c	/^    char* mName;$/;"	m	struct:sPreprocessorFunctionStruct	file:
mNameOffset	src/clover.h	/^    int mNameOffset;     \/\/ offset of constant pool$/;"	m	struct:sCLMethodStruct
mNameOffset	src/clover.h	/^    int mNameOffset;   \/\/ offset of constant pool$/;"	m	struct:sCLFieldStruct
mNameOffset	src/clover.h	/^    int mNameOffset;$/;"	m	struct:sCLBlockTypeStruct
mNameOffset	src/clover.h	/^    int mNameOffset;$/;"	m	struct:sCLGenericsParamTypesStruct
mNameSpaceOffset	src/clover.h	/^    char mNameSpaceOffset;   \/\/ Offset of constant pool$/;"	m	struct:sCLClassStruct
mNativeMethod	src/clover.h	/^        fNativeMethod mNativeMethod;$/;"	m	union:sCLMethodStruct::__anon3
mNestOfMethodFromDefinitionPoint	src/common.h	/^    int mNestOfMethodFromDefinitionPoint;$/;"	m	struct:sCompileInfoStruct
mNewVMInfo	src/obj_thread.c	/^    sVMInfo* mNewVMInfo;$/;"	m	struct:sThreadFuncArg	file:
mNext	src/clover.h	/^    struct sCLTypeStruct* mNext;$/;"	m	struct:sCLTypeStruct	typeref:struct:sCLTypeStruct::sCLTypeStruct
mNext	src/clover.h	/^    struct sVarTableStruct* mNext;              \/\/ for free var table$/;"	m	struct:sVarTableStruct	typeref:struct:sVarTableStruct::sVarTableStruct
mNextClass	src/clover.h	/^    struct sCLClassStruct* mNextClass;   \/\/ next class in hash table linked list$/;"	m	struct:sCLClassStruct	typeref:struct:sCLClassStruct::sCLClassStruct
mNextEntry	src/debug.c	/^    struct _t_malloc_entry* mNextEntry;$/;"	m	struct:_t_malloc_entry	typeref:struct:_t_malloc_entry::_t_malloc_entry	file:
mNextFreeHandle	src/heap.c	/^    int mNextFreeHandle;         \/\/ -1 for NULL. index of mHandles$/;"	m	struct:sHandle_	file:
mNextNameSpace	src/clover.h	/^    struct sCLNameSpaceStruct* mNextNameSpace;  \/\/ next namespace in hash table linked list$/;"	m	struct:sCLNameSpaceStruct	typeref:struct:sCLNameSpaceStruct::sCLNameSpaceStruct
mNode	src/common.h	/^    unsigned int mNode;$/;"	m	struct:sNodeStruct
mNodeSubstitutionType	src/common.h	/^            enum eNodeSubstitutionType mNodeSubstitutionType;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5	typeref:enum:sNodeTreeStruct::__anon4::__anon5::eNodeSubstitutionType
mNodeType	src/common.h	/^    char mNodeType;$/;"	m	struct:sNodeTreeStruct
mNodes	src/common.h	/^    sNode* mNodes;$/;"	m	struct:sNodeBlockStruct
mNumBlockType	src/clover.h	/^    int mNumBlockType;$/;"	m	struct:sCLMethodStruct
mNumDependences	src/clover.h	/^    int mNumDependences;$/;"	m	struct:sCLClassStruct
mNumException	src/clover.h	/^    int mNumException;$/;"	m	struct:sCLMethodStruct
mNumFields	src/clover.h	/^    int mNumFields;$/;"	m	struct:sCLClassStruct
mNumFieldsIncludingSuperClasses	src/clover.h	/^    int mNumFieldsIncludingSuperClasses;$/;"	m	struct:sCLClassStruct
mNumHandles	src/heap.c	/^    int mNumHandles;$/;"	m	struct:sCLHeapManager_	file:
mNumImplementedInterfaces	src/clover.h	/^    char mNumImplementedInterfaces;$/;"	m	struct:sCLClassStruct
mNumImplementsTypes	src/clover.h	/^    char mNumImplementsTypes;$/;"	m	struct:sCLGenericsParamTypesStruct
mNumImplementsTypes	src/compiler.c	/^    char mNumImplementsTypes;$/;"	m	struct:sCLNodeGenericsParamTypesStruct	file:
mNumIncludedModules	src/clover.h	/^    char mNumIncludedModules;$/;"	m	struct:sCLClassStruct
mNumLoadedMethods	src/clover.h	/^    int mNumLoadedMethods;          \/\/ compile time data$/;"	m	struct:sCLClassStruct
mNumLocals	src/clover.h	/^    int mNumLocals;      \/\/ number of local variables$/;"	m	struct:sCLMethodStruct
mNumLocals	src/clover.h	/^    int mNumLocals;$/;"	m	struct:sCLBlockStruct
mNumLocals	src/common.h	/^    int mNumLocals;$/;"	m	struct:sNodeBlockStruct
mNumMethods	src/clover.h	/^    int mNumMethods;$/;"	m	struct:sCLClassStruct
mNumParamInitializer	src/clover.h	/^    char mNumParamInitializer;$/;"	m	struct:sCLMethodStruct
mNumParams	src/clover.h	/^    int mNumParams;$/;"	m	struct:sCLBlockStruct
mNumParams	src/clover.h	/^    int mNumParams;$/;"	m	struct:sCLBlockTypeStruct
mNumParams	src/clover.h	/^    int mNumParams;$/;"	m	struct:sCLMethodStruct
mNumParams	src/common.h	/^    int mNumParams;$/;"	m	struct:sNodeBlockStruct
mNumParentVar	src/clover.h	/^    int mNumParentVar;$/;"	m	struct:sCLBlockStruct
mNumSuperClasses	src/clover.h	/^    char mNumSuperClasses;$/;"	m	struct:sCLClassStruct
mNumVirtualMethodMap	src/clover.h	/^    int mNumVirtualMethodMap;$/;"	m	struct:sCLClassStruct
mNumber	src/common.h	/^    int mNumber;$/;"	m	struct:sGenericsParamPatternStruct
mObjectValue	src/clover.h	/^    } mObjectValue;$/;"	m	union:MVALUE_UNION	typeref:struct:MVALUE_UNION::__anon1
mOffset	src/clover.h	/^        int mOffset;$/;"	m	union:sCLFieldStruct::__anon2
mOffset	src/heap.c	/^    int mOffset;                 \/\/ -1 for FreeHandle$/;"	m	struct:sHandle_	file:
mOperand	src/common.h	/^            enum eOperand mOperand;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon10	typeref:enum:sNodeTreeStruct::__anon4::__anon10::eOperand
mParamInitializers	src/clover.h	/^    sCLParamInitializer* mParamInitializers;$/;"	m	struct:sCLMethodStruct
mParamTypes	src/clover.h	/^    sCLType* mParamTypes;$/;"	m	struct:sCLBlockTypeStruct
mParamTypes	src/clover.h	/^    sCLType* mParamTypes;$/;"	m	struct:sCLMethodStruct
mParams	src/clover.h	/^    CLObject mParams[CL_METHOD_PARAM_MAX];$/;"	m	struct:sCLBlockStruct
mParent	src/clover.h	/^    struct sVarTableStruct* mParent;            \/\/ make linked list$/;"	m	struct:sVarTableStruct	typeref:struct:sVarTableStruct::sVarTableStruct
mParentLocalVar	src/clover.h	/^    MVALUE* mParentLocalVar;$/;"	m	struct:sCLBlockStruct
mPath	src/klass.c	/^    char* mPath;$/;"	m	struct:sNativeMethodHashItem	file:
mPath	src/klass.c	/^    const char* mPath;$/;"	m	struct:sNativeMethodStruct	file:
mPathOffset	src/clover.h	/^    int mPathOffset;     \/\/ offset of constant pool$/;"	m	struct:sCLMethodStruct
mPointedObject	src/clover.h	/^    CLObject mPointedObject;$/;"	m	struct:sCLPointerStruct
mPointer	src/clover.h	/^    char* mPointer;$/;"	m	struct:sCLPointerStruct
mQuote	src/common.h	/^            BOOL mQuote;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon10
mQuote	src/common.h	/^            BOOL mQuote;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mRealClassNameOffset	src/clover.h	/^    char mRealClassNameOffset;   \/\/ Offset of constant pool$/;"	m	struct:sCLClassStruct
mRegex	src/clover.h	/^    regex_t* mRegex;$/;"	m	struct:sCLOnigurumaRegexStruct
mRegexString	src/common.h	/^            char mRegexString[REGEX_LENGTH_MAX+1];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mResultExistance	src/obj_thread.c	/^    BOOL mResultExistance;$/;"	m	struct:sThreadFuncArg	file:
mResultType	src/clover.h	/^    CLObject mResultType;$/;"	m	struct:sCLBlockStruct
mResultType	src/clover.h	/^    sCLType mResultType;     \/\/ offset of constant pool(real class name --> namespace$class_name)$/;"	m	struct:sCLMethodStruct
mResultType	src/clover.h	/^    sCLType mResultType;$/;"	m	struct:sCLBlockTypeStruct
mRight	src/common.h	/^    unsigned int mRight;$/;"	m	struct:sNodeTreeStruct
mRunningClass	src/clover.h	/^    sCLClass* mRunningClass;$/;"	m	struct:sVMInfoStruct
mRunningMethod	src/clover.h	/^    struct sCLMethodStruct* mRunningMethod;$/;"	m	struct:sVMInfoStruct	typeref:struct:sVMInfoStruct::sCLMethodStruct
mSLine	src/common.h	/^    int mSLine;$/;"	m	struct:sNodeStruct
mSName	src/common.h	/^    char* mSName;$/;"	m	struct:sNodeStruct
mShortValue	src/common.h	/^        unsigned short mShortValue;$/;"	m	union:sNodeTreeStruct::__anon4
mShowFun	src/clover.h	/^    fShowFun mShowFun;$/;"	m	struct:sCLClassStruct
mSize	src/clover.h	/^    int mSize;$/;"	m	struct:sBufStruct
mSize	src/clover.h	/^    int mSize;$/;"	m	struct:sByteCodeStruct
mSize	src/clover.h	/^    int mSize;$/;"	m	struct:sCLArrayStruct
mSize	src/clover.h	/^    int mSize;$/;"	m	struct:sCLHashStruct
mSize	src/clover.h	/^    int mSize;$/;"	m	struct:sCLPointerStruct
mSize	src/clover.h	/^    int mSize;$/;"	m	struct:sConstStruct
mSizeDependences	src/clover.h	/^    int mSizeDependences;$/;"	m	struct:sCLClassStruct
mSizeFields	src/clover.h	/^    int mSizeFields;$/;"	m	struct:sCLClassStruct
mSizeHandles	src/heap.c	/^    int mSizeHandles;$/;"	m	struct:sCLHeapManager_	file:
mSizeMethods	src/clover.h	/^    int mSizeMethods;$/;"	m	struct:sCLClassStruct
mSizeNodes	src/common.h	/^    int mSizeNodes;$/;"	m	struct:sNodeBlockStruct
mSizeVirtualMethodMap	src/clover.h	/^    int mSizeVirtualMethodMap;$/;"	m	struct:sCLClassStruct
mSleepMem	src/heap.c	/^    unsigned char* mSleepMem;$/;"	m	struct:sCLHeapManager_	file:
mSource	src/clover.h	/^    OnigUChar* mSource;$/;"	m	struct:sCLOnigurumaRegexStruct
mSource	src/preprocessor.c	/^    sBuf mSource;$/;"	m	struct:sPreprocessorFunctionStruct	file:
mStar	src/clover.h	/^    BOOL mStar;$/;"	m	struct:sCLNodeTypeStruct
mStar	src/clover.h	/^    BOOL mStar;$/;"	m	struct:sCLTypeStruct
mStaticField	src/clover.h	/^        MVALUE mStaticField;$/;"	m	union:sCLFieldStruct::__anon2
mStaticMethodBlock	src/clover.h	/^    BOOL mStaticMethodBlock;$/;"	m	struct:sCLBlockStruct
mStringValue	src/common.h	/^        char* mStringValue;$/;"	m	union:sNodeTreeStruct::__anon4
mSuperClass	src/clover.h	/^    sCLType mSuperClass;$/;"	m	struct:sCLClassStruct
mSuperClasses	src/clover.h	/^    sCLType mSuperClasses[SUPER_CLASS_MAX];$/;"	m	struct:sCLClassStruct
mTail	src/clover.h	/^    CLObject mTail;$/;"	m	struct:sCLRangeStruct
mThread	src/clover.h	/^    pthread_t mThread;$/;"	m	struct:sCLThreadStruct
mTryBlock	src/common.h	/^            unsigned int mTryBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mType	src/clover.h	/^    CLObject mType;$/;"	m	struct:sCLObjectHeaderStruct
mType	src/clover.h	/^    sCLNodeType* mType;$/;"	m	struct:sVarStruct
mType	src/clover.h	/^    sCLType mType;$/;"	m	struct:sCLFieldStruct
mType	src/common.h	/^    sCLNodeType* mType;$/;"	m	struct:sNodeTreeStruct
mUIntValue	src/common.h	/^        unsigned int mUIntValue;$/;"	m	union:sNodeTreeStruct::__anon4
mValue	src/clover.h	/^        CLObject mValue;$/;"	m	struct:MVALUE_UNION::__anon1
mValue	src/clover.h	/^    double mValue;$/;"	m	struct:sCLDoubleStruct
mValue	src/clover.h	/^    float mValue;$/;"	m	struct:sCLFloatStruct
mValue	src/clover.h	/^    int mValue;$/;"	m	struct:sCLBoolStruct
mValue	src/clover.h	/^    int mValue;$/;"	m	struct:sCLIntStruct
mValue	src/clover.h	/^    int mValue;$/;"	m	struct:sCLNullStruct
mValue	src/clover.h	/^    unsigned char mValue;$/;"	m	struct:sCLByteStruct
mValue	src/clover.h	/^    unsigned int mValue;$/;"	m	struct:sCLUIntStruct
mValue	src/clover.h	/^    unsigned long mValue;$/;"	m	struct:sCLLongStruct
mValue	src/clover.h	/^    unsigned short mValue;$/;"	m	struct:sCLShortStruct
mValue	src/clover.h	/^    void* mValue;$/;"	m	struct:sCLPointerStruct
mValue	src/clover.h	/^    wchar_t mValue;$/;"	m	struct:sCLCharStruct
mValue	src/common.h	/^        int mValue;$/;"	m	union:sNodeTreeStruct::__anon4
mVarName	src/common.h	/^            char* mVarName;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mVarName	src/common.h	/^            char* mVarName;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mVarNames	src/common.h	/^            char* mVarNames[MULTIPLE_ASSIGNMENT_NUM_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon11
mVarNum	src/clover.h	/^    int mVarNum;$/;"	m	struct:sVarTableStruct
mVarNum	src/common.h	/^            int mVarNum;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon11
mVirtualMethodMap	src/clover.h	/^    sVMethodMap* mVirtualMethodMap;$/;"	m	struct:sCLClassStruct
mWhileBlock	src/common.h	/^        unsigned int mWhileBlock;                            \/\/ node block id$/;"	m	union:sNodeTreeStruct::__anon4
main	src/compiler.c	/^int main(int argc, char** argv)$/;"	f
main	src/interpreter.c	/^int main(int argc, char** argv)$/;"	f
main	src/main.c	/^int main(int argc, char** argv) $/;"	f
main	src/parser.c	/^int main(int argc, char** argv)$/;"	f
main	src/preprocessor.c	/^int main(int argc, char* argv[])$/;"	f
make_block_result	src/compile.c	/^void make_block_result(sCLNodeType** result_type)$/;"	f
make_group_strings_from_region	src/obj_string.c	/^static BOOL make_group_strings_from_region(OnigRegion* region, char* str, CLObject group_strings, sVMInfo* info)$/;"	f	file:
make_group_strings_with_range_from_region	src/obj_string.c	/^static BOOL make_group_strings_with_range_from_region(OnigRegion* region, CLObject group_strings, char* str, sVMInfo* info)$/;"	f	file:
make_substr_from_string_object	src/obj_string.c	/^static CLObject make_substr_from_string_object(CLObject str, int head, int tail, sVMInfo* info)$/;"	f	file:
make_super_class_list	src/klass_ctime.c	/^BOOL make_super_class_list(sCLClass* klass)$/;"	f
mandir	Makefile	/^mandir=${datarootdir}\/man$/;"	m
mark	src/heap.c	/^static void mark(unsigned char* mark_flg, CLObject type_object)$/;"	f	file:
mark_array_object	src/obj_array.c	/^static void mark_array_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_block_object	src/obj_block.c	/^static void mark_block_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_class_fields	src/klass.c	/^void mark_class_fields(unsigned char* mark_flg)$/;"	f
mark_class_fields_of_class	src/klass.c	/^static void mark_class_fields_of_class(sCLClass* klass, unsigned char* mark_flg)$/;"	f	file:
mark_class_fields_of_class_and_super_class	src/klass.c	/^static void mark_class_fields_of_class_and_super_class(sCLClass* klass, unsigned char* mark_flg)$/;"	f	file:
mark_class_object	src/obj_class_object.c	/^static void mark_class_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_hash_object	src/obj_hash.c	/^static void mark_hash_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_object	src/heap.c	/^void mark_object(CLObject obj, unsigned char* mark_flg)$/;"	f
mark_pointer_object	src/obj_pointer.c	/^static void mark_pointer_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_range_object	src/obj_range.c	/^static void mark_range_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_regex_object	src/obj_oniguruma_regex.c	/^static void mark_regex_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_string_object	src/obj_string.c	/^static void mark_string_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_type_object	src/obj_type_object.c	/^static void mark_type_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_type_object_core	src/obj_type_object.c	/^static void mark_type_object_core(CLObject object, unsigned char* mark_flg)$/;"	f	file:
mark_user_object	src/obj_user_object.c	/^static void mark_user_object(CLObject object, unsigned char* mark_flg)$/;"	f	file:
max_stack	src/common.h	/^    int* max_stack;$/;"	m	struct:sCompileInfoStruct
method	code/block.rb	/^def method()$/;"	f
method	src/common.h	/^    sCLMethod* method;$/;"	m	struct:sParserInfoStruct
method_block	src/common.h	/^        sNodeBlock* method_block;$/;"	m	struct:sCompileInfoStruct::__anon13
method_not_found	src/node.c	/^static BOOL method_not_found(sCLNodeType** type_, sCompileInfo* info, char* method_name, sCLNodeType** class_params, int* num_params, unsigned int block_id, BOOL no_defined_no_call, BOOL* not_found_method)$/;"	f	file:
methods_and_fields_and_alias	src/compiler.c	/^static BOOL methods_and_fields_and_alias(sParserInfo* info, int parse_phase_num, BOOL interface)$/;"	f	file:
mgetmaxx	src/interpreter.c	/^static int mgetmaxx()$/;"	f	file:
mgetmaxy	src/interpreter.c	/^static int mgetmaxy()$/;"	f	file:
module_final	src/module.c	/^void module_final()$/;"	f
module_init	src/module.c	/^void module_init()$/;"	f
monadic_operator	src/node.c	/^static BOOL monadic_operator(sCLNodeType* left_type, sCLNodeType** type_, sCompileInfo* info, char* operand_symbol)$/;"	f	file:
my_complete_internal	src/interpreter.c	/^static int my_complete_internal(int count, int key)$/;"	f	file:
new_generics_type_pattern	src/klass_ctime.c	/^static sGenericsParamPattern* new_generics_type_pattern()$/;"	f	file:
new_vm_mutex	src/obj_thread.c	/^void new_vm_mutex()$/;"	f
next_info	src/clover.h	/^    struct sVMInfoStruct* next_info;$/;"	m	struct:sVMInfoStruct	typeref:struct:sVMInfoStruct::sVMInfoStruct
no_output_to_bytecodes	src/common.h	/^    BOOL no_output_to_bytecodes;$/;"	m	struct:sCompileInfoStruct
node_expression	src/parse.c	/^BOOL node_expression(unsigned int* node, sParserInfo* info, sVarTable* lv_table)$/;"	f
node_expression_without_comma	src/parse.c	/^BOOL node_expression_without_comma(unsigned int* node, sParserInfo* info, sVarTable* lv_table)$/;"	f
node_type_string	src/node_tree.c	/^char* node_type_string[NODE_TYPE_MAX] = {$/;"	v
node_type_to_buffer	src/node_type.c	/^ALLOC char* node_type_to_buffer(sCLNodeType* node_type)$/;"	f
null_check_for_eq	src/vm.c	/^static BOOL null_check_for_eq(sVMInfo* info)$/;"	f	file:
null_check_for_neq	src/vm.c	/^static BOOL null_check_for_neq(sVMInfo* info)$/;"	f	file:
num_generics_param_types	src/clover.h	/^    int num_generics_param_types;$/;"	m	struct:sVMType
num_loaded_class	src/load_class.c	/^int num_loaded_class()$/;"	f
num_vm	src/vm.c	/^static int num_vm;$/;"	v	file:
num_vm_types	src/clover.h	/^    int num_vm_types;$/;"	m	struct:sVMInfoStruct
object_size	src/obj_array.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_block.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_bool.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_byte.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_bytes.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_char.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_class_object.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_double.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_field.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_float.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_hash.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_int.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_long.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_method.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_mutex.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_null.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_oniguruma_regex.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_pointer.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_range.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_short.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_string.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_thread.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_type_object.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_uint.c	/^static unsigned int object_size()$/;"	f	file:
object_size	src/obj_user_object.c	/^static unsigned int object_size(sCLClass* klass)$/;"	f	file:
object_to_ptr	src/heap.c	/^void* object_to_ptr(CLObject obj) $/;"	f
on_complete	src/interpreter.c	/^char* on_complete(const char* text, int a)$/;"	f
operand_posibility	src/node_type.c	/^BOOL operand_posibility(sCLNodeType* left_type, sCLNodeType* right_type)$/;"	f
operand_posibility_with_class_name	src/node_type.c	/^BOOL operand_posibility_with_class_name(sCLNodeType* left_type, char* class_name)$/;"	f
output_exception_message	src/vm.c	/^void output_exception_message(CLObject exception_object)$/;"	f
output_exception_message_with_info	src/vm.c	/^static void output_exception_message_with_info(sVMInfo* info)$/;"	f	file:
output_result_for_interpreter	src/vm.c	/^static BOOL output_result_for_interpreter(sVMInfo* info)$/;"	f	file:
output_var_table	src/parser.c	/^static void output_var_table(sVarTable* table)$/;"	f	file:
p	src/common.h	/^    char** p;$/;"	m	struct:sParserInfoStruct
param_initializer	src/vm.c	/^static BOOL param_initializer(sConst* constant, sByteCode* code, int lv_num, int max_stack, sVMInfo* info, CLObject vm_type)$/;"	f	file:
params_of_cl_type_to_params_of_node_type	src/node.c	/^static BOOL params_of_cl_type_to_params_of_node_type(ALLOC sCLNodeType** result, sCLType* params, int num_params, sCLClass* klass)$/;"	f	file:
parent	src/clover.h	/^    struct sVMType* parent;$/;"	m	struct:sVMType	typeref:struct:sVMType::sVMType
parse	src/compiler.c	/^static BOOL parse(sParserInfo* info, int parse_phase_num)$/;"	f	file:
parse_alias	src/compiler.c	/^static BOOL parse_alias(sParserInfo* info, int parse_phase_num, int sline_top)$/;"	f	file:
parse_annotation	src/parse.c	/^void parse_annotation(char** p, char* sname, int* sline, int* err_num)$/;"	f
parse_block	src/compile.c	/^BOOL parse_block(unsigned int* block_id, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLNodeType* klass, sCLNodeType* block_type, sCLMethod* method, sVarTable* lv_table)$/;"	f
parse_block_object	src/compile.c	/^BOOL parse_block_object(unsigned int* block_id, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLNodeType* klass, sCLNodeType* block_type, sCLMethod* method, sVarTable* lv_table, int sline_top, int num_params, sCLNodeType** class_params)$/;"	f
parse_block_params	src/parse.c	/^static BOOL parse_block_params(sCLNodeType** class_params, int* num_params, sParserInfo* info, sVarTable* new_table, int sline_top)$/;"	f	file:
parse_class	src/compiler.c	/^static BOOL parse_class(sParserInfo* info, BOOL private_, BOOL mixin_, BOOL abstract_, BOOL dynamic_typing_, BOOL final_, BOOL struct_, BOOL native_, int parse_phase_num, BOOL interface)$/;"	f	file:
parse_class_name	src/interpreter.c	/^static BOOL parse_class_name(char** p, sCLClass** klass)$/;"	f	file:
parse_constructor	src/compiler.c	/^static BOOL parse_constructor(sParserInfo* info, sCLNodeType* result_type, char* name, BOOL mixin_, BOOL native_, BOOL synchronized_, int parse_phase_num, int sline_top, BOOL interface)$/;"	f	file:
parse_declaration_of_method_block	src/compiler.c	/^static BOOL parse_declaration_of_method_block(sParserInfo* info, sVarTable* lv_table, char* block_name, sCLNodeType** bt_result_type, sCLNodeType** bt_class_params, int* bt_num_params, int size_bt_class_params, int sline_top, int* block_num)$/;"	f	file:
parse_enum	src/compiler.c	/^static BOOL parse_enum(sParserInfo* info, BOOL private_, BOOL mixin_, BOOL native_, int parse_phase_num)$/;"	f	file:
parse_enum_element	src/compiler.c	/^static BOOL parse_enum_element(sParserInfo* info, BOOL mixin_, BOOL parse_phase_num, BOOL native_)$/;"	f	file:
parse_generics_param_types	src/compiler.c	/^static BOOL parse_generics_param_types(sParserInfo* info, int* generics_param_types_num, sCLNodeGenericsParamTypes generics_param_types[CL_GENERICS_CLASS_PARAM_MAX], int parse_phase_num, BOOL get_param_number_only)$/;"	f	file:
parse_generics_types_name	src/parse.c	/^BOOL parse_generics_types_name(char** p, char* sname, int* sline, int* err_num, char* generics_types_num, sCLNodeType** generics_types, char* current_namespace, sCLClass* klass, sCLMethod* method, BOOL skip)$/;"	f
parse_method	src/compiler.c	/^static BOOL parse_method(sParserInfo* info, BOOL static_, BOOL private_, BOOL protected_, BOOL native_, BOOL mixin_, BOOL synchronized_, BOOL virtual_, BOOL abstract_, sCLNodeType* result_type, char* name, int parse_phase_num, int sline_top, BOOL interface)$/;"	f	file:
parse_module	src/compiler.c	/^static BOOL parse_module(sParserInfo* info, int parse_phase_num)$/;"	f	file:
parse_module_name	src/parse.c	/^BOOL parse_module_name(sCLModule** result, char** p, char* sname, int* sline, int* err_num, char* current_namespace, BOOL no_err_msg)$/;"	f
parse_namespace	src/compiler.c	/^static BOOL parse_namespace(sParserInfo* info, int parse_phase_num)$/;"	f	file:
parse_namespace_and_class	src/parse.c	/^BOOL parse_namespace_and_class(sCLClass** result, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLClass* klass, sCLMethod* method, BOOL skip, BOOL* star, BOOL* self_class)$/;"	f
parse_namespace_and_class_and_generics_type	src/parse.c	/^BOOL parse_namespace_and_class_and_generics_type(ALLOC sCLNodeType** type, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLClass* klass, sCLMethod* method, BOOL skip)$/;"	f
parse_namespace_and_class_and_generics_type_without_generics_check	src/parse.c	/^static BOOL parse_namespace_and_class_and_generics_type_without_generics_check(ALLOC sCLNodeType** type, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLClass* klass, sCLMethod* method, BOOL skip)$/;"	f	file:
parse_params	src/parse.c	/^BOOL parse_params(sCLNodeType** class_params, int* num_params, int size_params, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLClass* klass, sCLMethod* method, sVarTable* lv_table, char close_character, int sline_top)$/;"	f
parse_params_with_initializer	src/parse.c	/^BOOL parse_params_with_initializer(sCLNodeType** class_params, ALLOC sByteCode* code_params, int* max_stack_params, int* lv_num_params, int* num_params, int size_params, char** p, char* sname, int* sline, int* err_num, char* current_namespace, sCLNodeType* klass, sCLMethod* method, sVarTable* lv_table, char close_character, int sline_top, BOOL* variable_arguments, BOOL parse_only_to_param_initializer)$/;"	f
parse_quote	src/parse.c	/^static void parse_quote(char** p, int* sline, BOOL* quote)$/;"	f	file:
parse_throws	src/compiler.c	/^static BOOL parse_throws(sParserInfo* info, sCLClass* exception_class[CL_METHOD_EXCEPTION_MAX], int* exception_num)$/;"	f	file:
parse_word	src/parse.c	/^BOOL parse_word(char* buf, int buf_size, char** p, char* sname, int* sline, int* err_num, BOOL print_out_err_msg)$/;"	f
parser_err_msg	src/errmsg.c	/^void parser_err_msg(char* msg, char* sname, int sline_top)$/;"	f
parser_err_msg_format	src/errmsg.c	/^void parser_err_msg_format(char* sname, int sline, char* msg, ...)$/;"	f
parser_err_msg_without_line	src/errmsg.c	/^void parser_err_msg_without_line(char* msg, ...)$/;"	f
parser_get_class_type	src/parser.c	/^static BOOL parser_get_class_type(char* sname) $/;"	f	file:
parser_get_type	src/parser.c	/^static BOOL parser_get_type(char* sname) $/;"	f	file:
parser_get_variable_names	src/parser.c	/^static BOOL parser_get_variable_names(char* sname) $/;"	f	file:
parser_inputing_path	src/parser.c	/^static BOOL parser_inputing_path(char* sname) $/;"	f	file:
parser_operator_method_name	src/compiler.c	/^static void parser_operator_method_name(char* name, int name_size, sParserInfo* info)$/;"	f	file:
pointer_backward	src/obj_pointer.c	/^BOOL pointer_backward(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_equals	src/obj_pointer.c	/^BOOL pointer_equals(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_forward	src/obj_pointer.c	/^BOOL pointer_forward(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_getByte	src/obj_pointer.c	/^BOOL pointer_getByte(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_getLong	src/obj_pointer.c	/^BOOL pointer_getLong(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_getShort	src/obj_pointer.c	/^BOOL pointer_getShort(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_getUInt	src/obj_pointer.c	/^BOOL pointer_getUInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_setValue	src/obj_pointer.c	/^BOOL pointer_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pointer_toString	src/obj_pointer.c	/^BOOL pointer_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
pop_object	src/vm.c	/^CLObject pop_object(sVMInfo* info)$/;"	f
pop_object_except_top	src/vm.c	/^void pop_object_except_top(sVMInfo* info)$/;"	f
pop_object_n	src/vm.c	/^void pop_object_n(sVMInfo* info, int n)$/;"	f
pop_vminfo	src/vm.c	/^static void pop_vminfo(sVMInfo* info)$/;"	f	file:
postposition_operator	src/parse.c	/^static BOOL postposition_operator(unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
prefix	Makefile	/^prefix=\/home\/ab25cq$/;"	m
prepare_for_break_labels	src/node.c	/^static void prepare_for_break_labels(unsigned int** break_labels_before, int** break_labels_len_before, unsigned int break_labels[], int* break_labels_len, sCompileInfo* info)$/;"	f	file:
prepare_for_continue_labels	src/node.c	/^static void prepare_for_continue_labels(unsigned int** continue_labels_before, int** continue_labels_len_before, unsigned int continue_labels[], int* continue_labels_len, sCompileInfo* info)$/;"	f	file:
preprocess_source	src/preprocessor.c	/^static BOOL preprocess_source(char* sname, char* output_sname)$/;"	f	file:
preprocessor	src/preprocessor.c	/^static BOOL preprocessor(sBuf* source, sBuf* source2)$/;"	f	file:
preprocessor_final	src/preprocessor.c	/^static void preprocessor_final()$/;"	f	file:
preprocessor_init	src/preprocessor.c	/^static void preprocessor_init()$/;"	f	file:
print_buffer	src/clover.h	/^    sBuf* print_buffer;$/;"	m	struct:sVMInfoStruct
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
push_object	src/vm.c	/^void push_object(CLObject object, sVMInfo* info)$/;"	f
push_vminfo	src/vm.c	/^void push_vminfo(sVMInfo* info)$/;"	f
put_fun_to_hash_for_native_class	src/klass.c	/^static void put_fun_to_hash_for_native_class(char* class_name, fNativeClassInitializar fun)$/;"	f	file:
put_fun_to_hash_for_native_method	src/klass.c	/^static void put_fun_to_hash_for_native_method(char* path, fNativeMethod fun)$/;"	f	file:
put_to_array	src/obj_array.c	/^static void put_to_array(CLObject self, int index, CLObject item)$/;"	f	file:
read_block_type_from_file	src/klass.c	/^static BOOL read_block_type_from_file(int fd, sCLBlockType* block_type)$/;"	f	file:
read_char_from_file	src/klass.c	/^static BOOL read_char_from_file(int fd, char* c)$/;"	f	file:
read_class_from_file	src/klass.c	/^static sCLClass* read_class_from_file(int fd)$/;"	f	file:
read_field_from_file	src/klass.c	/^static BOOL read_field_from_file(int fd, sCLField* field)$/;"	f	file:
read_from_file	src/klass.c	/^static BOOL read_from_file(int f, void* buf, size_t size)$/;"	f	file:
read_generics_param_types	src/klass.c	/^BOOL read_generics_param_types(int fd, sCLGenericsParamTypes* generics_param_types)$/;"	f
read_int_from_file	src/klass.c	/^static BOOL read_int_from_file(int fd, int* n)$/;"	f	file:
read_long_long_from_file	src/klass.c	/^static BOOL read_long_long_from_file(int fd, long long* n)$/;"	f	file:
read_method_from_buffer	src/klass.c	/^static BOOL read_method_from_buffer(sCLClass* klass, sCLMethod* method, int fd)$/;"	f	file:
read_param_initializer_from_file	src/klass.c	/^static BOOL read_param_initializer_from_file(int fd, sCLParamInitializer* param_initializer)$/;"	f	file:
read_param_initializers_from_file	src/klass.c	/^static BOOL read_param_initializers_from_file(int fd, int* num_params, sCLParamInitializer** param_initializer)$/;"	f	file:
read_params_from_file	src/klass.c	/^static BOOL read_params_from_file(int fd, int* num_params, sCLType** param_types)$/;"	f	file:
read_type_from_file	src/klass.c	/^static BOOL read_type_from_file(int fd, sCLType* type)$/;"	f	file:
read_virtual_method_map	src/klass.c	/^BOOL read_virtual_method_map(int fd, sCLClass* klass)$/;"	f
real_caller_class	src/common.h	/^    sCLNodeType* real_caller_class;$/;"	m	struct:sCompileInfoStruct
real_caller_method	src/common.h	/^    sCLMethod* real_caller_method;$/;"	m	struct:sCompileInfoStruct
rehash	src/obj_hash.c	/^static BOOL rehash(CLObject self, sVMInfo* info, int new_size) $/;"	f	file:
release_entry	src/debug.c	/^void release_entry(void* memory, const char* file_name, int line, const char* func_name)$/;"	f
remove_class_from_class_table	src/klass.c	/^static void remove_class_from_class_table(char* namespace, char* class_name, int parametor_num)$/;"	f	file:
remove_module_from_table	src/module.c	/^static void remove_module_from_table(char* namespace, char* module_name)$/;"	f	file:
remove_object	src/vm.c	/^void remove_object(sVMInfo* info, int number)$/;"	f
remove_object2	src/vm.c	/^void remove_object2(CLObject obj, sVMInfo* info)$/;"	f
replace_bytes	src/obj_bytes.c	/^void replace_bytes(CLObject bytes, char* buf, int size)$/;"	f
reserved_words	src/parse.c	/^static BOOL reserved_words(BOOL* processed, char* buf, unsigned int* node, sParserInfo* info, int sline_top, sVarTable* lv_table)$/;"	f	file:
resizse_vmm	src/klass_ctime.c	/^static BOOL resizse_vmm(sCLClass* klass)$/;"	f	file:
run_all_loaded_class_fields_initializer	src/klass.c	/^BOOL run_all_loaded_class_fields_initializer() $/;"	f
run_all_loaded_class_initialize_method	src/klass.c	/^BOOL run_all_loaded_class_initialize_method() $/;"	f
run_class_fields_initializer	src/klass.c	/^static BOOL run_class_fields_initializer(sCLClass* klass)$/;"	f	file:
run_fields_initializer	src/klass.c	/^BOOL run_fields_initializer(CLObject object, sCLClass* klass, CLObject vm_type)$/;"	f
run_parser	src/interpreter.c	/^static BOOL run_parser(char* parser_command, char* source, ALLOC sBuf* output)$/;"	f	file:
sAliasItem	src/alias.c	/^struct sAliasItem {$/;"	s	file:
sBlockInfo	src/common.h	/^    } sBlockInfo;$/;"	m	struct:sCompileInfoStruct	typeref:struct:sCompileInfoStruct::__anon13
sBuf	src/clover.h	/^typedef struct sBufStruct sBuf;$/;"	t	typeref:struct:sBufStruct
sBufStruct	src/clover.h	/^struct sBufStruct {$/;"	s
sBuf_append	src/buffer.c	/^void sBuf_append(sBuf* self, void* str, size_t size)$/;"	f
sBuf_append_char	src/buffer.c	/^void sBuf_append_char(sBuf* self, char c)$/;"	f
sBuf_append_str	src/buffer.c	/^void sBuf_append_str(sBuf* self, char* str)$/;"	f
sBuf_init	src/buffer.c	/^void sBuf_init(sBuf* self)$/;"	f
sBuf_show	src/buffer.c	/^void sBuf_show(sBuf* self)$/;"	f
sByteCode	src/clover.h	/^typedef struct sByteCodeStruct sByteCode;$/;"	t	typeref:struct:sByteCodeStruct
sByteCodeStruct	src/clover.h	/^struct sByteCodeStruct {$/;"	s
sByteCode_append	src/buffer.c	/^static void sByteCode_append(sByteCode* self, int value, BOOL no_output_to_bytecodes)$/;"	f	file:
sByteCode_free	src/buffer.c	/^void sByteCode_free(sByteCode* self)$/;"	f
sByteCode_init	src/buffer.c	/^void sByteCode_init(sByteCode* self)$/;"	f
sCLArray	src/clover.h	/^typedef struct sCLArrayStruct sCLArray;$/;"	t	typeref:struct:sCLArrayStruct
sCLArrayItems	src/clover.h	/^typedef struct sCLArrayItemsStruct sCLArrayItems;$/;"	t	typeref:struct:sCLArrayItemsStruct
sCLArrayItemsStruct	src/clover.h	/^struct sCLArrayItemsStruct {$/;"	s
sCLArrayStruct	src/clover.h	/^struct sCLArrayStruct {$/;"	s
sCLBlock	src/clover.h	/^typedef struct sCLBlockStruct sCLBlock;$/;"	t	typeref:struct:sCLBlockStruct
sCLBlockStruct	src/clover.h	/^struct sCLBlockStruct {$/;"	s
sCLBlockType	src/clover.h	/^typedef struct sCLBlockTypeStruct sCLBlockType;$/;"	t	typeref:struct:sCLBlockTypeStruct
sCLBlockTypeStruct	src/clover.h	/^struct sCLBlockTypeStruct {$/;"	s
sCLBool	src/clover.h	/^typedef struct sCLBoolStruct sCLBool;$/;"	t	typeref:struct:sCLBoolStruct
sCLBoolStruct	src/clover.h	/^struct sCLBoolStruct {$/;"	s
sCLByte	src/clover.h	/^typedef struct sCLByteStruct sCLByte;$/;"	t	typeref:struct:sCLByteStruct
sCLByteStruct	src/clover.h	/^struct sCLByteStruct {$/;"	s
sCLBytes	src/clover.h	/^typedef struct sCLBytesStruct sCLBytes;$/;"	t	typeref:struct:sCLBytesStruct
sCLBytesStruct	src/clover.h	/^struct sCLBytesStruct {$/;"	s
sCLChar	src/clover.h	/^typedef struct sCLCharStruct sCLChar;$/;"	t	typeref:struct:sCLCharStruct
sCLCharStruct	src/clover.h	/^struct sCLCharStruct {$/;"	s
sCLClass	src/clover.h	/^typedef struct sCLClassStruct sCLClass;$/;"	t	typeref:struct:sCLClassStruct
sCLClassObject	src/clover.h	/^typedef struct sCLClassObjectStruct sCLClassObject;$/;"	t	typeref:struct:sCLClassObjectStruct
sCLClassObjectStruct	src/clover.h	/^struct sCLClassObjectStruct {$/;"	s
sCLClassStruct	src/clover.h	/^struct sCLClassStruct {$/;"	s
sCLDouble	src/clover.h	/^typedef struct sCLDoubleStruct sCLDouble;$/;"	t	typeref:struct:sCLDoubleStruct
sCLDoubleStruct	src/clover.h	/^struct sCLDoubleStruct {$/;"	s
sCLField	src/clover.h	/^typedef struct sCLFieldStruct sCLField;$/;"	t	typeref:struct:sCLFieldStruct
sCLFieldObject	src/clover.h	/^typedef struct sCLFieldObjectStruct sCLFieldObject;$/;"	t	typeref:struct:sCLFieldObjectStruct
sCLFieldObjectStruct	src/clover.h	/^struct sCLFieldObjectStruct {$/;"	s
sCLFieldStruct	src/clover.h	/^struct sCLFieldStruct {$/;"	s
sCLFloat	src/clover.h	/^typedef struct sCLFloatStruct sCLFloat;$/;"	t	typeref:struct:sCLFloatStruct
sCLFloatStruct	src/clover.h	/^struct sCLFloatStruct {$/;"	s
sCLGenericsParamTypes	src/clover.h	/^typedef struct sCLGenericsParamTypesStruct sCLGenericsParamTypes;$/;"	t	typeref:struct:sCLGenericsParamTypesStruct
sCLGenericsParamTypesStruct	src/clover.h	/^struct sCLGenericsParamTypesStruct {$/;"	s
sCLHash	src/clover.h	/^typedef struct sCLHashStruct sCLHash;$/;"	t	typeref:struct:sCLHashStruct
sCLHashData	src/clover.h	/^typedef struct sCLHashDataStruct sCLHashData;$/;"	t	typeref:struct:sCLHashDataStruct
sCLHashDataItem	src/clover.h	/^typedef struct sCLHashDataItemStruct sCLHashDataItem;$/;"	t	typeref:struct:sCLHashDataItemStruct
sCLHashDataItemStruct	src/clover.h	/^struct sCLHashDataItemStruct {$/;"	s
sCLHashDataStruct	src/clover.h	/^struct sCLHashDataStruct {$/;"	s
sCLHashStruct	src/clover.h	/^struct sCLHashStruct {$/;"	s
sCLHeapManager	src/heap.c	/^typedef struct sCLHeapManager_ sCLHeapManager;$/;"	t	typeref:struct:sCLHeapManager_	file:
sCLHeapManager_	src/heap.c	/^struct sCLHeapManager_ {$/;"	s	file:
sCLInt	src/clover.h	/^typedef struct sCLIntStruct sCLInt;$/;"	t	typeref:struct:sCLIntStruct
sCLIntStruct	src/clover.h	/^struct sCLIntStruct {$/;"	s
sCLLong	src/clover.h	/^typedef struct sCLLongStruct sCLLong;$/;"	t	typeref:struct:sCLLongStruct
sCLLongStruct	src/clover.h	/^struct sCLLongStruct {$/;"	s
sCLMethod	src/clover.h	/^typedef struct sCLMethodStruct sCLMethod;$/;"	t	typeref:struct:sCLMethodStruct
sCLMethodObject	src/clover.h	/^typedef struct sCLMethodObjectStruct sCLMethodObject;$/;"	t	typeref:struct:sCLMethodObjectStruct
sCLMethodObjectStruct	src/clover.h	/^struct sCLMethodObjectStruct {$/;"	s
sCLMethodStruct	src/clover.h	/^struct sCLMethodStruct {$/;"	s
sCLModule	src/clover.h	/^typedef struct sCLModuleStruct sCLModule;$/;"	t	typeref:struct:sCLModuleStruct
sCLModuleStruct	src/clover.h	/^struct sCLModuleStruct {$/;"	s
sCLMutex	src/clover.h	/^typedef struct sCLMutexStruct sCLMutex;$/;"	t	typeref:struct:sCLMutexStruct
sCLMutexStruct	src/clover.h	/^struct sCLMutexStruct {$/;"	s
sCLNameSpace	src/clover.h	/^typedef struct sCLNameSpaceStruct sCLNameSpace;$/;"	t	typeref:struct:sCLNameSpaceStruct
sCLNameSpaceStruct	src/clover.h	/^struct sCLNameSpaceStruct {$/;"	s
sCLNodeGenericsParamTypes	src/compiler.c	/^typedef struct sCLNodeGenericsParamTypesStruct sCLNodeGenericsParamTypes;$/;"	t	typeref:struct:sCLNodeGenericsParamTypesStruct	file:
sCLNodeGenericsParamTypesStruct	src/compiler.c	/^struct sCLNodeGenericsParamTypesStruct {$/;"	s	file:
sCLNodeType	src/clover.h	/^typedef struct sCLNodeTypeStruct sCLNodeType;$/;"	t	typeref:struct:sCLNodeTypeStruct
sCLNodeTypeStruct	src/clover.h	/^struct sCLNodeTypeStruct {$/;"	s
sCLNull	src/clover.h	/^typedef struct sCLNullStruct sCLNull;$/;"	t	typeref:struct:sCLNullStruct
sCLNullStruct	src/clover.h	/^struct sCLNullStruct {$/;"	s
sCLObjectHeader	src/clover.h	/^typedef struct sCLObjectHeaderStruct sCLObjectHeader;$/;"	t	typeref:struct:sCLObjectHeaderStruct
sCLObjectHeaderStruct	src/clover.h	/^struct sCLObjectHeaderStruct {$/;"	s
sCLOnigurumaRegex	src/clover.h	/^typedef struct sCLOnigurumaRegexStruct sCLOnigurumaRegex;$/;"	t	typeref:struct:sCLOnigurumaRegexStruct
sCLOnigurumaRegexStruct	src/clover.h	/^struct sCLOnigurumaRegexStruct {$/;"	s
sCLParamInitializer	src/clover.h	/^typedef struct sCLParamInitializerStruct sCLParamInitializer;$/;"	t	typeref:struct:sCLParamInitializerStruct
sCLParamInitializerStruct	src/clover.h	/^struct sCLParamInitializerStruct {$/;"	s
sCLPointer	src/clover.h	/^typedef struct sCLPointerStruct sCLPointer;$/;"	t	typeref:struct:sCLPointerStruct
sCLPointerStruct	src/clover.h	/^struct sCLPointerStruct {$/;"	s
sCLRange	src/clover.h	/^typedef struct sCLRangeStruct sCLRange;$/;"	t	typeref:struct:sCLRangeStruct
sCLRangeStruct	src/clover.h	/^struct sCLRangeStruct {$/;"	s
sCLShort	src/clover.h	/^typedef struct sCLShortStruct sCLShort;$/;"	t	typeref:struct:sCLShortStruct
sCLShortStruct	src/clover.h	/^struct sCLShortStruct {$/;"	s
sCLString	src/clover.h	/^typedef struct sCLStringStruct sCLString;$/;"	t	typeref:struct:sCLStringStruct
sCLStringData	src/clover.h	/^typedef struct sCLStringDataStruct sCLStringData;$/;"	t	typeref:struct:sCLStringDataStruct
sCLStringDataStruct	src/clover.h	/^struct sCLStringDataStruct {$/;"	s
sCLStringStruct	src/clover.h	/^struct sCLStringStruct {$/;"	s
sCLThread	src/clover.h	/^typedef struct sCLThreadStruct sCLThread;$/;"	t	typeref:struct:sCLThreadStruct
sCLThreadStruct	src/clover.h	/^struct sCLThreadStruct {$/;"	s
sCLType	src/clover.h	/^typedef struct sCLTypeStruct sCLType;$/;"	t	typeref:struct:sCLTypeStruct
sCLTypeObject	src/clover.h	/^typedef struct sCLTypeObjectStruct sCLTypeObject;$/;"	t	typeref:struct:sCLTypeObjectStruct
sCLTypeObjectStruct	src/clover.h	/^struct sCLTypeObjectStruct {$/;"	s
sCLTypeStruct	src/clover.h	/^struct sCLTypeStruct {$/;"	s
sCLUInt	src/clover.h	/^typedef struct sCLUIntStruct sCLUInt;$/;"	t	typeref:struct:sCLUIntStruct
sCLUIntStruct	src/clover.h	/^struct sCLUIntStruct {$/;"	s
sCLUserObject	src/clover.h	/^typedef struct sCLUserObjectStruct sCLUserObject;$/;"	t	typeref:struct:sCLUserObjectStruct
sCLUserObjectStruct	src/clover.h	/^struct sCLUserObjectStruct {$/;"	s
sCompileInfo	src/common.h	/^typedef struct sCompileInfoStruct sCompileInfo;$/;"	t	typeref:struct:sCompileInfoStruct
sCompileInfoStruct	src/common.h	/^struct sCompileInfoStruct {$/;"	s
sConst	src/clover.h	/^typedef struct sConstStruct sConst;$/;"	t	typeref:struct:sConstStruct
sConstStruct	src/clover.h	/^struct sConstStruct {$/;"	s
sConst_append	src/buffer.c	/^static int sConst_append(sConst* self, void* data, int size, BOOL no_output_to_bytecodes)$/;"	f	file:
sConst_free	src/buffer.c	/^void sConst_free(sConst* self)$/;"	f
sConst_init	src/buffer.c	/^void sConst_init(sConst* self)$/;"	f
sEntriedClassItem	src/alias.c	/^struct sEntriedClassItem {$/;"	s	file:
sGenericsParamPattern	src/common.h	/^typedef struct sGenericsParamPatternStruct sGenericsParamPattern;$/;"	t	typeref:struct:sGenericsParamPatternStruct
sGenericsParamPatternStruct	src/common.h	/^struct sGenericsParamPatternStruct {$/;"	s
sHandle	src/heap.c	/^typedef struct sHandle_ sHandle;$/;"	t	typeref:struct:sHandle_	file:
sHandle_	src/heap.c	/^struct sHandle_ {$/;"	s	file:
sIfBlock	src/common.h	/^        } sIfBlock;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon7
sLoopInfo	src/common.h	/^    } sLoopInfo;$/;"	m	struct:sCompileInfoStruct	typeref:struct:sCompileInfoStruct::__anon12
sMethod	src/common.h	/^        } sMethod;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon6
sMultipleVar	src/common.h	/^        } sMultipleVar;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon11
sNativeClass	src/klass.c	/^typedef struct sNativeClassStruct sNativeClass;$/;"	t	typeref:struct:sNativeClassStruct	file:
sNativeClassHashItem	src/klass.c	/^struct sNativeClassHashItem {$/;"	s	file:
sNativeClassStruct	src/klass.c	/^struct sNativeClassStruct {$/;"	s	file:
sNativeMethod	src/klass.c	/^typedef struct sNativeMethodStruct sNativeMethod;$/;"	t	typeref:struct:sNativeMethodStruct	file:
sNativeMethodHashItem	src/klass.c	/^struct sNativeMethodHashItem {$/;"	s	file:
sNativeMethodStruct	src/klass.c	/^struct sNativeMethodStruct {$/;"	s	file:
sNode	src/common.h	/^typedef struct sNodeStruct sNode;$/;"	t	typeref:struct:sNodeStruct
sNodeBlock	src/common.h	/^typedef struct sNodeBlockStruct sNodeBlock;$/;"	t	typeref:struct:sNodeBlockStruct
sNodeBlockStruct	src/common.h	/^struct sNodeBlockStruct {$/;"	s
sNodeStruct	src/common.h	/^struct sNodeStruct {$/;"	s
sNodeTree	src/common.h	/^typedef struct sNodeTreeStruct sNodeTree;$/;"	t	typeref:struct:sNodeTreeStruct
sNodeTreeStruct	src/common.h	/^struct sNodeTreeStruct {$/;"	s
sNodeTree_create_array	src/node_tree.c	/^unsigned int sNodeTree_create_array(unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_block	src/node_tree.c	/^unsigned int sNodeTree_create_block(sCLNodeType* type_, unsigned int block)$/;"	f
sNodeTree_create_break	src/node_tree.c	/^unsigned int sNodeTree_create_break(sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_byte_value	src/node_tree.c	/^unsigned int sNodeTree_create_byte_value(unsigned char value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_bytes_value	src/node_tree.c	/^unsigned int sNodeTree_create_bytes_value(MANAGED char* value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_call_block	src/node_tree.c	/^unsigned int sNodeTree_create_call_block(char* var_name, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_character_value	src/node_tree.c	/^unsigned int sNodeTree_create_character_value(wchar_t c)$/;"	f
sNodeTree_create_class_field	src/node_tree.c	/^unsigned int sNodeTree_create_class_field(char* var_name, sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_class_method_call	src/node_tree.c	/^unsigned int sNodeTree_create_class_method_call(char* var_name, sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle, unsigned int block_object, unsigned int block_node)$/;"	f
sNodeTree_create_class_name	src/node_tree.c	/^unsigned int sNodeTree_create_class_name(sCLNodeType* type)$/;"	f
sNodeTree_create_continue	src/node_tree.c	/^unsigned int sNodeTree_create_continue()$/;"	f
sNodeTree_create_define_var	src/node_tree.c	/^unsigned int sNodeTree_create_define_var(char* var_name, sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_do	src/node_tree.c	/^unsigned int sNodeTree_create_do(unsigned int conditional, unsigned int block, sCLNodeType* type_)$/;"	f
sNodeTree_create_dvalue	src/node_tree.c	/^unsigned int sNodeTree_create_dvalue(double dvalue, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_false	src/node_tree.c	/^unsigned int sNodeTree_create_false()$/;"	f
sNodeTree_create_fields	src/node_tree.c	/^unsigned int sNodeTree_create_fields(char* name, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_for	src/node_tree.c	/^unsigned int sNodeTree_create_for(unsigned int conditional, unsigned int conditional2, unsigned int conditional3, unsigned int block, sCLNodeType* type_)$/;"	f
sNodeTree_create_fvalue	src/node_tree.c	/^unsigned int sNodeTree_create_fvalue(float fvalue, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_hash	src/node_tree.c	/^unsigned int sNodeTree_create_hash(unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_if	src/node_tree.c	/^unsigned int sNodeTree_create_if(unsigned int if_conditional, unsigned int if_block, unsigned int else_block, unsigned int* else_if_conditional, unsigned int* else_if_block, int else_if_num, sCLNodeType* type_)$/;"	f
sNodeTree_create_inherit	src/node_tree.c	/^unsigned int sNodeTree_create_inherit(unsigned int left, unsigned int right, unsigned int middle, unsigned int block_object, unsigned int block_node)$/;"	f
sNodeTree_create_long_value	src/node_tree.c	/^unsigned int sNodeTree_create_long_value(unsigned long value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_method_call	src/node_tree.c	/^unsigned int sNodeTree_create_method_call(char* var_name, unsigned int left, unsigned int right, unsigned int middle, unsigned int block_object, unsigned int block_node)$/;"	f
sNodeTree_create_new_expression	src/node_tree.c	/^unsigned int sNodeTree_create_new_expression(sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle, unsigned int block_object, unsigned int block_node)$/;"	f
sNodeTree_create_null	src/node_tree.c	/^unsigned int sNodeTree_create_null()$/;"	f
sNodeTree_create_operand	src/node_tree.c	/^unsigned int sNodeTree_create_operand(enum eOperand operand, unsigned int left, unsigned int right, unsigned int middle, BOOL quote)$/;"	f
sNodeTree_create_param	src/node_tree.c	/^unsigned int sNodeTree_create_param(unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_path_value	src/node_tree.c	/^unsigned int sNodeTree_create_path_value(MANAGED char* value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_range	src/node_tree.c	/^unsigned int sNodeTree_create_range(unsigned int head, unsigned int tail)$/;"	f
sNodeTree_create_regex	src/node_tree.c	/^unsigned int sNodeTree_create_regex(char* regex, BOOL global, BOOL multiline, BOOL ignore_case)$/;"	f
sNodeTree_create_return	src/node_tree.c	/^unsigned int sNodeTree_create_return(sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_revert	src/node_tree.c	/^unsigned int sNodeTree_create_revert(sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_short_value	src/node_tree.c	/^unsigned int sNodeTree_create_short_value(unsigned short value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_string_value	src/node_tree.c	/^unsigned int sNodeTree_create_string_value(MANAGED char* value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_super	src/node_tree.c	/^unsigned int sNodeTree_create_super(unsigned int left, unsigned int right, unsigned int middle, unsigned int block_object, unsigned int block_node)$/;"	f
sNodeTree_create_throw	src/node_tree.c	/^unsigned int sNodeTree_create_throw(sCLNodeType* klass, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_true	src/node_tree.c	/^unsigned int sNodeTree_create_true()$/;"	f
sNodeTree_create_try	src/node_tree.c	/^unsigned int sNodeTree_create_try(unsigned int try_block, unsigned int* catch_blocks, int catch_block_number, unsigned int finally_block, sCLNodeType** exception_type, char exception_variable_name[CL_CATCH_BLOCK_NUMBER_MAX][CL_VARIABLE_NAME_MAX+1])$/;"	f
sNodeTree_create_tuple	src/node_tree.c	/^unsigned int sNodeTree_create_tuple(unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_uint_value	src/node_tree.c	/^unsigned int sNodeTree_create_uint_value(unsigned int value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_value	src/node_tree.c	/^unsigned int sNodeTree_create_value(int value, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_var	src/node_tree.c	/^unsigned int sNodeTree_create_var(char* var_name, unsigned int left, unsigned int right, unsigned int middle)$/;"	f
sNodeTree_create_while	src/node_tree.c	/^unsigned int sNodeTree_create_while(unsigned int conditional, unsigned int block, sCLNodeType* type_)$/;"	f
sOperand	src/common.h	/^        } sOperand;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon10
sParamInfo	src/common.h	/^    } sParamInfo;$/;"	m	struct:sCompileInfoStruct	typeref:struct:sCompileInfoStruct::__anon14
sParserInfo	src/common.h	/^typedef struct sParserInfoStruct sParserInfo;$/;"	t	typeref:struct:sParserInfoStruct
sParserInfoStruct	src/common.h	/^struct sParserInfoStruct {$/;"	s
sPreprocessorFunction	src/preprocessor.c	/^typedef struct sPreprocessorFunctionStruct sPreprocessorFunction;$/;"	t	typeref:struct:sPreprocessorFunctionStruct	file:
sPreprocessorFunctionStruct	src/preprocessor.c	/^struct sPreprocessorFunctionStruct {$/;"	s	file:
sRegex	src/common.h	/^        } sRegex;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon9
sThreadFuncArg	src/obj_thread.c	/^struct sThreadFuncArg {$/;"	s	file:
sTryBlock	src/common.h	/^        } sTryBlock;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon8
sVMInfo	src/clover.h	/^typedef struct sVMInfoStruct sVMInfo;$/;"	t	typeref:struct:sVMInfoStruct
sVMInfoStruct	src/clover.h	/^struct sVMInfoStruct {$/;"	s
sVMType	src/clover.h	/^struct sVMType {$/;"	s
sVMethodMap	src/clover.h	/^typedef struct sVMethodMapStruct sVMethodMap;$/;"	t	typeref:struct:sVMethodMapStruct
sVMethodMapStruct	src/clover.h	/^struct sVMethodMapStruct {$/;"	s
sVar	src/clover.h	/^typedef struct sVarStruct sVar;$/;"	t	typeref:struct:sVarStruct
sVarName	src/common.h	/^        } sVarName;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon5
sVarStruct	src/clover.h	/^struct sVarStruct {$/;"	s
sVarTable	src/clover.h	/^typedef struct sVarTableStruct sVarTable;$/;"	t	typeref:struct:sVarTableStruct
sVarTableStruct	src/clover.h	/^struct sVarTableStruct {$/;"	s
save_all_modified_classes	src/klass_ctime.c	/^void save_all_modified_classes()$/;"	f
save_all_modified_modules	src/module.c	/^void save_all_modified_modules()$/;"	f
save_class	src/klass_ctime.c	/^static BOOL save_class(sCLClass* klass)$/;"	f	file:
save_code	src/compiler.c	/^static BOOL save_code(sByteCode* code, sConst* constant, sVarTable* gv_table, int max_stack, char* sname)$/;"	f	file:
save_module_to_file	src/module.c	/^static BOOL save_module_to_file(sCLModule* self)$/;"	f	file:
search_for_class_file_from_class_name	src/klass.c	/^static BOOL search_for_class_file_from_class_name(char* class_file, unsigned int class_file_size, char* real_class_name, int mixin_version)$/;"	f	file:
search_for_implemeted_interface	src/klass.c	/^BOOL search_for_implemeted_interface(sCLClass* klass, sCLClass* interface)$/;"	f
search_for_implemeted_interface_core	src/klass.c	/^static BOOL search_for_implemeted_interface_core(sCLClass* klass, sCLClass* interface) $/;"	f	file:
search_for_method_from_virtual_method_table	src/klass.c	/^static sCLMethod* search_for_method_from_virtual_method_table(CLObject type_object, char* method_name, CLObject* class_params, int num_params, BOOL search_for_class_method, int block_num, int block_num_params, CLObject* block_param_type, CLObject block_type, sVMInfo* info)$/;"	f	file:
search_for_method_of_generics_param_type	src/node.c	/^static BOOL search_for_method_of_generics_param_type(sCLClass** klass, sCLMethod** method, sCLNodeType** type_, sCompileInfo* info, char* method_name, sCLNodeType** class_params, int* num_params, BOOL class_method, BOOL block_exist, int block_num_params, sCLNodeType** block_param_types, sCLNodeType* block_type, int* used_param_num_with_initializer, sCLNodeType** result_type, sCLNodeType** err_messsage_class_params)$/;"	f	file:
search_for_method_of_inner_generics_param_class	src/node.c	/^static BOOL search_for_method_of_inner_generics_param_class(sCLClass** klass, sCLMethod** method, sCLNodeType** type_, sCompileInfo* info, char* method_name, sCLNodeType** class_params, int* num_params, BOOL class_method, BOOL block_exist, int block_num_params, sCLNodeType** block_param_types, sCLNodeType* block_type, int* used_param_num_with_initializer, sCLNodeType** result_type, sCLNodeType** err_messsage_class_params)$/;"	f	file:
search_for_method_of_non_generics	src/node.c	/^static BOOL search_for_method_of_non_generics(sCLClass** klass, sCLMethod** method, sCLNodeType** type_, sCompileInfo* info, char* method_name, sCLNodeType** class_params, int* num_params, BOOL class_method, BOOL block_exist, int block_num_params, sCLNodeType** block_param_types, sCLNodeType* block_type, int* used_param_num_with_initializer, sCLNodeType** result_type, unsigned int block_id, sCLNodeType** err_messsage_class_params)$/;"	f	file:
search_for_method_of_outside_generics_param_class	src/node.c	/^static BOOL search_for_method_of_outside_generics_param_class(sCLClass** klass, sCLMethod** method, sCLNodeType** type_, sCompileInfo* info, char* method_name, sCLNodeType** class_params, int* num_params, BOOL class_method, BOOL block_exist, int block_num_params, sCLNodeType** block_param_types, sCLNodeType* block_type, int* used_param_num_with_initializer, sCLNodeType** result_type, sCLNodeType** err_messsage_class_params)$/;"	f	file:
search_for_module_file_from_module_name	src/module.c	/^static BOOL search_for_module_file_from_module_name(char* module_file, unsigned int module_file_size, char* real_module_name)$/;"	f	file:
search_for_super_class	src/klass.c	/^BOOL search_for_super_class(sCLClass* klass, sCLClass* searched_class)$/;"	f
set_alias_flag_to_all_methods	src/alias.c	/^BOOL set_alias_flag_to_all_methods(sCLClass* klass)$/;"	f
set_alias_flag_to_method	src/alias.c	/^BOOL set_alias_flag_to_method(sCLClass* klass, char* method_name)$/;"	f
set_class_version	src/klass_ctime.c	/^BOOL set_class_version(sCLClass* klass, char version)$/;"	f
set_env_vars	src/vm.c	/^static void set_env_vars()$/;"	f	file:
set_field_index	src/klass_ctime.c	/^void set_field_index(sCLClass* klass, char* name, BOOL class_field)$/;"	f
set_flag_to_entried_class	src/alias.c	/^static BOOL set_flag_to_entried_class(char* real_class_name)$/;"	f	file:
set_signal	src/vm.c	/^static void set_signal()$/;"	f	file:
set_signal_for_interpreter	src/interpreter.c	/^static void set_signal_for_interpreter() $/;"	f	file:
set_special_class_to_global_pointer_of_type	src/klass_ctime.c	/^static void set_special_class_to_global_pointer_of_type(sCLClass* klass, int parametor_num)$/;"	f	file:
set_zero_goto_point_of_continue	src/node.c	/^static BOOL set_zero_goto_point_of_continue(sCompileInfo* info)$/;"	f	file:
set_zero_on_goto_point_of_break	src/node.c	/^static BOOL set_zero_on_goto_point_of_break(sCompileInfo* info)$/;"	f	file:
sharedstatedir	Makefile	/^sharedstatedir=${prefix}\/com$/;"	m
short_setValue	src/obj_short.c	/^BOOL short_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
short_toInt	src/obj_short.c	/^BOOL short_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
short_toLong	src/obj_short.c	/^BOOL short_toLong(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
show_all_method	src/klass_ctime.c	/^void show_all_method(sCLClass* klass, char* method_name)$/;"	f
show_all_method_for_errmsg	src/errmsg.c	/^void show_all_method_for_errmsg(sCLClass* klass, char* method_name)$/;"	f
show_array_object_to_stdout	src/obj_array.c	/^static void show_array_object_to_stdout(CLObject obj)$/;"	f	file:
show_buffer	src/buffer.c	/^void show_buffer(char* buf, int len)$/;"	f
show_caller_method	src/node.c	/^static void show_caller_method(char* method_name, sCLNodeType** class_params, int num_params, BOOL existance_of_block, sCLNodeType** block_class_params, int block_num_params, sCLNodeType* block_type, sCompileInfo* info)$/;"	f	file:
show_cl_type	src/type.c	/^void show_cl_type(sCLType* self, sCLClass* klass, sVMInfo* info)$/;"	f
show_class	src/klass_ctime.c	/^void show_class(sCLClass* klass)$/;"	f
show_class_list	src/klass.c	/^void show_class_list(sVMInfo* info)$/;"	f
show_class_list_on_compile_time	src/klass_ctime.c	/^void show_class_list_on_compile_time()$/;"	f
show_constants	src/buffer.c	/^void show_constants(sConst* constant)$/;"	f
show_generics_pattern	src/klass_ctime.c	/^void show_generics_pattern(sGenericsParamPattern* pattern)$/;"	f
show_heap	src/heap.c	/^void show_heap(sVMInfo* info)$/;"	f
show_method	src/klass_ctime.c	/^void show_method(sCLClass* klass, sCLMethod* method)$/;"	f
show_method_for_errmsg	src/errmsg.c	/^void show_method_for_errmsg(sCLClass* klass, sCLMethod* method)$/;"	f
show_mutex_object	src/obj_mutex.c	/^static void show_mutex_object(sVMInfo* info, CLObject obj)$/;"	f	file:
show_node	src/node_tree.c	/^void show_node(unsigned int node)$/;"	f
show_node_type	src/klass_ctime.c	/^void show_node_type(sCLNodeType* node_type)$/;"	f
show_node_type_for_errmsg	src/errmsg.c	/^void show_node_type_for_errmsg(sCLNodeType* node_type)$/;"	f
show_object_value	src/vm.c	/^void show_object_value(sVMInfo* info, CLObject obj)$/;"	f
show_stack	src/vm.c	/^void show_stack(sVMInfo* info)$/;"	f
show_stack	src/vm.c	/^void show_stack(sVMInfo* info, MVALUE* top_of_stack, MVALUE* var)$/;"	f
show_string_object	src/obj_string.c	/^static void show_string_object(sVMInfo* info, CLObject obj)$/;"	f	file:
show_thread_object	src/obj_thread.c	/^static void show_thread_object(sVMInfo* info, CLObject obj)$/;"	f	file:
show_type	src/klass_ctime.c	/^void show_type(sCLClass* klass, sCLType* type)$/;"	f
show_type_for_errmsg	src/errmsg.c	/^void show_type_for_errmsg(sCLClass* klass, sCLType* type)$/;"	f
show_type_object	src/obj_type_object.c	/^void show_type_object(CLObject type_object)$/;"	f
show_type_object2	src/obj_type_object.c	/^static void show_type_object2(sVMInfo* info, CLObject obj)$/;"	f	file:
show_type_object2	src/vm.c	/^static void show_type_object2(CLObject type_object, sVMInfo* info)$/;"	f	file:
show_user_object	src/obj_user_object.c	/^static void show_user_object(sVMInfo* info, CLObject obj)$/;"	f	file:
show_var_table	src/vtable.c	/^void show_var_table(sVarTable* var_table)$/;"	f
show_var_table_with_parent	src/vtable.c	/^void show_var_table_with_parent(sVarTable* var_table)$/;"	f
sig_int	src/interpreter.c	/^void sig_int()$/;"	f
skip_block	src/compiler.c	/^static BOOL skip_block(char** p, char* sname, int* sline)$/;"	f	file:
skip_class_definition	src/compiler.c	/^static BOOL skip_class_definition(sParserInfo* info, int parse_phase_num, BOOL mixin_, BOOL interface, BOOL abstract_, BOOL enum_, BOOL native_) $/;"	f	file:
skip_field_initializer	src/compile.c	/^BOOL skip_field_initializer(char** p, char* sname, int* sline, char* current_namespace, sCLNodeType* klass, sVarTable* lv_table)$/;"	f
skip_namespace_and_class_and_generics_type	src/compiler.c	/^static BOOL skip_namespace_and_class_and_generics_type(char** p, sParserInfo* info)$/;"	f	file:
skip_spaces_and_lf	src/parse.c	/^void skip_spaces_and_lf(char** p, int* sline)$/;"	f
skip_spaces_at_type_object	src/obj_type_object.c	/^static void skip_spaces_at_type_object(char** p)$/;"	f	file:
sline	src/common.h	/^    int* sline;$/;"	m	struct:sCompileInfoStruct
sline	src/common.h	/^    int* sline;$/;"	m	struct:sParserInfoStruct
sname	src/common.h	/^    char* sname;$/;"	m	struct:sCompileInfoStruct
sname	src/common.h	/^    char* sname;$/;"	m	struct:sParserInfoStruct
solve_generics_types_for_node_type	src/node_type.c	/^BOOL solve_generics_types_for_node_type(sCLNodeType* node_type, ALLOC sCLNodeType** result, sCLNodeType* type_)$/;"	f
solve_generics_types_of_class	src/klass.c	/^static BOOL solve_generics_types_of_class(sCLClass* klass, sCLClass** result, CLObject type_object)$/;"	f	file:
solve_generics_types_of_type_object	src/obj_type_object.c	/^BOOL solve_generics_types_of_type_object(CLObject type_object, ALLOC CLObject* solved_type_object, CLObject type_, sVMInfo* info)$/;"	f
solve_generics_types_of_type_object_core	src/obj_type_object.c	/^static int solve_generics_types_of_type_object_core(CLObject type_object, ALLOC CLObject* solved_type_object, CLObject type_, sVMInfo* info)$/;"	f	file:
solve_generics_types_of_type_object_core2	src/obj_type_object.c	/^BOOL solve_generics_types_of_type_object_core2(CLObject type_object, ALLOC CLObject* solved_type_object, CLObject type_, sVMInfo* info)$/;"	f
stack	src/clover.h	/^    MVALUE* stack;$/;"	m	struct:sVMInfoStruct
stack_num	src/common.h	/^    int* stack_num;$/;"	m	struct:sCompileInfoStruct
stack_ptr	src/clover.h	/^    MVALUE* stack_ptr;$/;"	m	struct:sVMInfoStruct
stack_size	src/clover.h	/^    int stack_size;$/;"	m	struct:sVMInfoStruct
start_vm_log	src/vm.c	/^void start_vm_log(sVMInfo* info)$/;"	f
start_vm_mutex_signal	src/obj_thread.c	/^void start_vm_mutex_signal()$/;"	f
start_vm_mutex_wait	src/obj_thread.c	/^void start_vm_mutex_wait()$/;"	f
store_field	src/node.c	/^static BOOL store_field(unsigned int node, char* field_name, BOOL class_field, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
store_field_core	src/node.c	/^static BOOL store_field_core(unsigned int node, char* field_name, BOOL class_field, sCLNodeType* right_type, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
store_local_variable	src/node.c	/^static BOOL store_local_variable(char* name, sVar* var, unsigned int node, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
store_local_variable_core	src/node.c	/^static BOOL store_local_variable_core(int var_index, sCLNodeType** type_, sCLNodeType* right_type, sCompileInfo* info)$/;"	f	file:
store_tuple	src/node.c	/^static BOOL store_tuple(unsigned int node, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
store_tuple_core	src/node.c	/^static BOOL store_tuple_core(unsigned int node, int* element_num, int tuple_element_num, sCLNodeType* right_type, sCLNodeType** type_, sCLNodeType** class_params, int* num_params, sCompileInfo* info)$/;"	f	file:
string_append	src/obj_string.c	/^void string_append(CLObject string, char* str, int n)$/;"	f
string_object_to_str	src/obj_string.c	/^BOOL string_object_to_str(ALLOC char** result, CLObject string)$/;"	f
substitution_node	src/parse.c	/^static BOOL substitution_node(unsigned int* node, sParserInfo* info, enum eNodeSubstitutionType substitution_type, int sline_top, sVarTable* lv_table, BOOL quote)$/;"	f	file:
substitution_posibility	src/node_type.c	/^BOOL substitution_posibility(sCLNodeType* left_type, sCLNodeType* right_type)$/;"	f
substitution_posibility_for_super_class	src/node_type.c	/^static BOOL substitution_posibility_for_super_class(sCLNodeType* left_type, sCLNodeType* right_type, sCLNodeType* type_)$/;"	f	file:
substitution_posibility_of_class	src/type.c	/^BOOL substitution_posibility_of_class(sCLClass* left_type, sCLClass* right_type)$/;"	f
substitution_posibility_of_type_object	src/obj_type_object.c	/^BOOL substitution_posibility_of_type_object(CLObject left_type, CLObject right_type, BOOL dynamic_typing)$/;"	f
substitution_posibility_of_type_object_with_class_name	src/obj_type_object.c	/^BOOL substitution_posibility_of_type_object_with_class_name(char* left_type_object_name, CLObject right_type, BOOL dynamic_typing, sVMInfo* info)$/;"	f
substitution_posibility_of_type_object_without_generics	src/obj_type_object.c	/^BOOL substitution_posibility_of_type_object_without_generics(CLObject left_type, CLObject right_type, BOOL dynamic_typing)$/;"	f
substitution_posibility_with_solving_generics	src/node_type.c	/^BOOL substitution_posibility_with_solving_generics(sCLNodeType* left_type, sCLNodeType* right_type, sCLClass* caller_class, sCLMethod* caller_method)$/;"	f
sysconfdir	Makefile	/^sysconfdir=${prefix}\/etc\/clover$/;"	m
t_malloc_entry	src/debug.c	/^typedef struct _t_malloc_entry t_malloc_entry;$/;"	t	typeref:struct:_t_malloc_entry	file:
this_module_is_modified	src/module.c	/^void this_module_is_modified(sCLModule* self)$/;"	f
thread_block_obj	src/clover.h	/^    CLObject thread_block_obj;$/;"	m	struct:sVMInfoStruct
thread_final	src/obj_thread.c	/^void thread_final()$/;"	f
thread_func	src/obj_thread.c	/^void* thread_func(void* param)$/;"	f
thread_init	src/obj_thread.c	/^void thread_init()$/;"	f
thread_obj	src/clover.h	/^    CLObject thread_obj;$/;"	m	struct:sVMInfoStruct
tm_tm	src/obj_tm.c	/^BOOL tm_tm(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
type_checking_of_method	src/obj_method.c	/^static BOOL type_checking_of_method(sCLClass* klass, sCLMethod* method, CLObject params, sVMInfo* info) $/;"	f	file:
type_identity	src/node_type.c	/^BOOL type_identity(sCLNodeType* type1, sCLNodeType* type2)$/;"	f
type_identity_of_cl_type_with_solving_generics	src/klass_ctime.c	/^static BOOL type_identity_of_cl_type_with_solving_generics(sCLNodeType* klass1, sCLType* type1, sCLNodeType* klass2, sCLType* type2)$/;"	f	file:
type_identity_without_star	src/node_type.c	/^BOOL type_identity_without_star(sCLNodeType* type1, sCLNodeType* type2)$/;"	f
type_to_string_core	src/obj_type_object.c	/^static void type_to_string_core(char* buf, int size, CLObject type_object)$/;"	f	file:
uCode	src/clover.h	/^    } uCode;$/;"	m	struct:sCLMethodStruct	typeref:union:sCLMethodStruct::__anon3
uValue	src/clover.h	/^    } uValue;$/;"	m	struct:sCLFieldStruct	typeref:union:sCLFieldStruct::__anon2
uValue	src/common.h	/^    } uValue;$/;"	m	struct:sNodeTreeStruct	typeref:union:sNodeTreeStruct::__anon4
uint_setValue	src/obj_uint.c	/^BOOL uint_setValue(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
uint_toInt	src/obj_uint.c	/^BOOL uint_toInt(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
uint_toLong	src/obj_uint.c	/^BOOL uint_toLong(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
uint_toString	src/obj_uint.c	/^BOOL uint_toString(MVALUE** stack_ptr, MVALUE* lvar, sVMInfo* info, CLObject vm_type, sCLClass* klass)$/;"	f
um_index2pointer	src/utf_mb_str.c	/^char* um_index2pointer(enum eUtfMbsKind code, char* mbs, int pos)$/;"	f
um_is_none_ascii	src/utf_mb_str.c	/^int um_is_none_ascii(enum eUtfMbsKind code, unsigned char c)$/;"	f
um_pointer2index	src/utf_mb_str.c	/^int um_pointer2index(enum eUtfMbsKind code, char* mbs, char* pointer)$/;"	f
um_strlen	src/utf_mb_str.c	/^int um_strlen(enum eUtfMbsKind code, char* mbs)$/;"	f
unload_class	src/klass.c	/^void unload_class(char* namespace, char* class_name, int parametor_num)$/;"	f
unload_module	src/module.c	/^void unload_module(char* namespace, char* module_name)$/;"	f
usage	src/main.c	/^static void usage()$/;"	f	file:
version	src/main.c	/^static void version()$/;"	f	file:
visible_control_character	src/vm.c	/^static unsigned char visible_control_character(unsigned char c)$/;"	f	file:
vm_error	src/vm.c	/^void vm_error(char* msg, ...)$/;"	f
vm_log	src/vm.c	/^void vm_log(sVMInfo* info, char* msg, ...)$/;"	f
vm_log_with_log_number	src/vm.c	/^void vm_log_with_log_number(int number, char* msg, ...)$/;"	f
vm_mutex_lock	src/obj_thread.c	/^void vm_mutex_lock()$/;"	f
vm_mutex_unlock	src/obj_thread.c	/^void vm_mutex_unlock()$/;"	f
vm_type_context	src/clover.h	/^    CLObject vm_type_context;$/;"	m	struct:sVMInfoStruct
vm_types	src/clover.h	/^    CLObject vm_types[CL_VM_TYPES_MAX];$/;"	m	struct:sVMInfoStruct
while_type	src/common.h	/^        sCLNodeType* while_type;$/;"	m	struct:sCompileInfoStruct::__anon13
write_block_type_to_buffer	src/klass_ctime.c	/^static void write_block_type_to_buffer(sBuf* buf, sCLBlockType* block_type)$/;"	f	file:
write_char_value_to_buffer	src/klass_ctime.c	/^static void write_char_value_to_buffer(sBuf* buf, char value)$/;"	f	file:
write_class_to_buffer	src/klass_ctime.c	/^static void write_class_to_buffer(sCLClass* klass, sBuf* buf)$/;"	f	file:
write_field_to_buffer	src/klass_ctime.c	/^static void write_field_to_buffer(sBuf* buf, sCLField* field)$/;"	f	file:
write_generics_param_types_to_buffer	src/klass_ctime.c	/^static void write_generics_param_types_to_buffer(sBuf* buf, sCLGenericsParamTypes* generics_param_types)$/;"	f	file:
write_int_value_to_buffer	src/klass_ctime.c	/^static void write_int_value_to_buffer(sBuf* buf, int value)$/;"	f	file:
write_long_long_value_to_buffer	src/klass_ctime.c	/^static void write_long_long_value_to_buffer(sBuf* buf, long long value)$/;"	f	file:
write_method_to_buffer	src/klass_ctime.c	/^static void write_method_to_buffer(sBuf* buf, sCLMethod* method)$/;"	f	file:
write_param_initializers_to_buffer	src/klass_ctime.c	/^static void write_param_initializers_to_buffer(sBuf* buf, int num_params, sCLParamInitializer* param_initilizer)$/;"	f	file:
write_params_to_buffer	src/klass_ctime.c	/^static void write_params_to_buffer(sBuf* buf, int num_params, sCLType* param_types)$/;"	f	file:
write_type_name_to_buffer	src/obj_type_object.c	/^void write_type_name_to_buffer(char* buf, int size, CLObject type_object)$/;"	f
write_type_name_to_buffer_core	src/obj_type_object.c	/^static void write_type_name_to_buffer_core(char* buf, int size, CLObject type_object)$/;"	f	file:
write_type_to_buffer	src/klass_ctime.c	/^static void write_type_to_buffer(sBuf* buf, sCLType* type)$/;"	f	file:
write_virtual_method_map	src/klass_ctime.c	/^static void write_virtual_method_map(sBuf* buf, sCLClass* klass)$/;"	f	file:
xcalloc	src/debug.c	/^ALLOC void* xcalloc(size_t count, size_t size)$/;"	f
xgetmaxx	src/xfunc.c	/^int xgetmaxx()$/;"	f
xgetmaxy	src/xfunc.c	/^int xgetmaxy()$/;"	f
xmalloc	src/debug.c	/^ALLOC void* xmalloc(size_t size)$/;"	f
xrealloc	src/debug.c	/^ALLOC void* xrealloc(void* ptr, size_t size)$/;"	f
xstrdup	src/debug.c	/^ALLOC char* xstrdup(char* str)$/;"	f
xstrncat	src/debug.c	/^static char* xstrncat(char* des, char* str, int size)$/;"	f	file:
xstrncat	src/xfunc.c	/^char* xstrncat(char* des, char* str, int size)$/;"	f
xstrncpy	src/debug.c	/^static char* xstrncpy(char* des, char* src, int size)$/;"	f	file:
xstrncpy	src/xfunc.c	/^char* xstrncpy(char* des, char* src, int size)$/;"	f
xxrealloc	src/xfunc.c	/^void* xxrealloc(void* old_data, size_t old_data_size, size_t new_size)$/;"	f
