
class Object {
    native String class_name() throws ConvertingStringCodeException;
    native bool instanceof(ClassName class);
    native bool is_child(ClassName class);
}

class Clover {
    native static void print(String string) throws NullPointerException, ConvertingStringCodeException;
    static void println(String string) {
        Clover.print(string + "\n");
    }
    native static void show_classes();
    native static String output_to_str() with void block() throws ConvertingStringCodeException;

    alias print;
    alias println;
}

class System {
    native static String getenv(String env) throws ConvertingStringCodeException;
    native static int sleep(int second) throws RangeException;
    native static void exit(int status_code) throws RangeException;
//    native static void popen(String command) with void block(File file);
}

class Thread {
    native Thread() with void block() throws Exception;
    native void join();
}

class Mutex {
    native Mutex();

    native void run() with void block();
}

class Block {
}

class ClassName {
    native String to_str() throws ConvertingStringCodeException;
}

class Exception {
    private String message;

    Exception(String message) {
        self.message = message;
    }

    String get_message() {
        return self.message;
    }
}

class NullPointerException extends Exception {
    NullPointerException(String message) {
        self.message = message;
    }
}

class RangeException extends Exception {
    RangeException(String message) {
        self.message = message;
    }
}

class ConvertingStringCodeException extends Exception {
    ConvertingStringCodeException(String message) {
        self.message = message;
    }
}

class ClassNotFoundException extends Exception {
    ClassNotFoundException(String message) {
        self.message = message;
    }
}

class IOException extends Exception {
    IOException(String message) {
        self.message = message;
    }
}

class String {
    native String();

    native int length();
    native void append(String str);

    void print() {
        Clover.print(self);
    }
    void println() {
        Clover.println(self);
    }

    native int char(int index) throws RangeException;

    int operator[] (int index) throws RangeException {
        return self.char(index);
    }

    native int replace(int index, int character) throws RangeException;

    int operator[]= (int index, int character) throws RangeException {
        return self.replace(index, character);
    }
}

class Array<T> {
    native Array();

    native void add(T item);
    native T items(int index) throws RangeException;
    native int length();
    
    T operator[] (int index) throws RangeException {
        return self.items(index);
    }
}

class Hash<T> {
}

/*
class Bytes {
}
*/

class File {
    //native write(Bytes date, int len);
}

class RegularFile extends File {
    native RegularFile(String file_name, String mode) throws ConvertingStringCodeException, Exception, IOException;
}

class void {
}

class int {
    native String to_str() throws Exception;
    native bool to_bool();
}

class float {
    native int to_int();
    native String to_str() throws ConvertingStringCodeException;
}

class bool {
    native String to_str() throws ConvertingStringCodeException;
    native int to_int();
}

class null {
    native int to_int();
    native String to_str() throws ConvertingStringCodeException;
    native bool to_bool();
}

