Array_add	src/obj_array.c	/^BOOL Array_add(MVALUE** stack_ptr, MVALUE* lvar, s/
Array_items	src/obj_array.c	/^BOOL Array_items(MVALUE** stack_ptr, MVALUE* lvar,/
Array_length	src/obj_array.c	/^BOOL Array_length(MVALUE** stack_ptr, MVALUE* lvar/
Array_setItem	src/obj_array.c	/^BOOL Array_setItem(MVALUE** stack_ptr, MVALUE* lva/
Array_setValue	src/obj_array.c	/^BOOL Array_setValue(MVALUE** stack_ptr, MVALUE* lv/
Block_parametors	src/obj_block.c	/^BOOL Block_parametors(MVALUE** stack_ptr, MVALUE* /
Block_resultType	src/obj_block.c	/^BOOL Block_resultType(MVALUE** stack_ptr, MVALUE* /
Bytes_Bytes	src/obj_bytes.c	/^BOOL Bytes_Bytes(MVALUE** stack_ptr, MVALUE* lvar,/
Bytes_char	src/obj_bytes.c	/^BOOL Bytes_char(MVALUE** stack_ptr, MVALUE* lvar, /
Bytes_cmp	src/obj_bytes.c	/^BOOL Bytes_cmp(MVALUE** stack_ptr, MVALUE* lvar, s/
Bytes_length	src/obj_bytes.c	/^BOOL Bytes_length(MVALUE** stack_ptr, MVALUE* lvar/
Bytes_replace	src/obj_bytes.c	/^BOOL Bytes_replace(MVALUE** stack_ptr, MVALUE* lva/
Bytes_setValue	src/obj_bytes.c	/^BOOL Bytes_setValue(MVALUE** stack_ptr, MVALUE* lv/
Bytes_toPointer	src/obj_bytes.c	/^BOOL Bytes_toPointer(MVALUE** stack_ptr, MVALUE* l/
Bytes_toString	src/obj_bytes.c	/^BOOL Bytes_toString(MVALUE** stack_ptr, MVALUE* lv/
Class_newInstance	src/obj_class_object.c	/^BOOL Class_newInstance(MVALUE** stack_ptr, MVALUE*/
Clover_gc	src/obj_clover.c	/^BOOL Clover_gc(MVALUE** stack_ptr, MVALUE* lvar, s/
Clover_outputToString	src/obj_clover.c	/^BOOL Clover_outputToString(MVALUE** stack_ptr, MVA/
Clover_print	src/obj_clover.c	/^BOOL Clover_print(MVALUE** stack_ptr, MVALUE* lvar/
Clover_printf	src/obj_clover.c	/^BOOL Clover_printf(MVALUE** stack_ptr, MVALUE* lva/
Clover_showClasses	src/obj_clover.c	/^BOOL Clover_showClasses(MVALUE** stack_ptr, MVALUE/
Clover_sprintf	src/obj_clover.c	/^BOOL Clover_sprintf(MVALUE** stack_ptr, MVALUE* lv/
Enum_toHash	src/obj_enum.c	/^BOOL Enum_toHash(MVALUE** stack_ptr, MVALUE* lvar,/
Hash_assoc	src/obj_hash.c	/^BOOL Hash_assoc(MVALUE** stack_ptr, MVALUE* lvar, /
Hash_each	src/obj_hash.c	/^BOOL Hash_each(MVALUE** stack_ptr, MVALUE* lvar, s/
Hash_erase	src/obj_hash.c	/^BOOL Hash_erase(MVALUE** stack_ptr, MVALUE* lvar, /
Hash_length	src/obj_hash.c	/^BOOL Hash_length(MVALUE** stack_ptr, MVALUE* lvar,/
Hash_put	src/obj_hash.c	/^BOOL Hash_put(MVALUE** stack_ptr, MVALUE* lvar, sV/
Hash_setValue	src/obj_hash.c	/^BOOL Hash_setValue(MVALUE** stack_ptr, MVALUE* lva/
Mcompiler	src/compiler.c	/^int main(int argc, char** argv)$/
Method_blockParametors	src/obj_method.c	/^BOOL Method_blockParametors(MVALUE** stack_ptr, MV/
Method_blockResultType	src/obj_method.c	/^BOOL Method_blockResultType(MVALUE** stack_ptr, MV/
Method_exceptions	src/obj_method.c	/^BOOL Method_exceptions(MVALUE** stack_ptr, MVALUE*/
Method_invokeMethod	src/obj_method.c	/^BOOL Method_invokeMethod(MVALUE** stack_ptr, MVALU/
Method_isAbstractMethod	src/obj_method.c	/^BOOL Method_isAbstractMethod(MVALUE** stack_ptr, M/
Method_isClassMethod	src/obj_method.c	/^BOOL Method_isClassMethod(MVALUE** stack_ptr, MVAL/
Method_isConstructor	src/obj_method.c	/^BOOL Method_isConstructor(MVALUE** stack_ptr, MVAL/
Method_isGenericsNewableConstructor	src/obj_method.c	/^BOOL Method_isGenericsNewableConstructor(MVALUE** /
Method_isNativeMethod	src/obj_method.c	/^BOOL Method_isNativeMethod(MVALUE** stack_ptr, MVA/
Method_isParamVariableArguments	src/obj_method.c	/^BOOL Method_isParamVariableArguments(MVALUE** stac/
Method_isPrivateMethod	src/obj_method.c	/^BOOL Method_isPrivateMethod(MVALUE** stack_ptr, MV/
Method_isProtectedMethod	src/obj_method.c	/^BOOL Method_isProtectedMethod(MVALUE** stack_ptr, /
Method_isSyncronizedMethod	src/obj_method.c	/^BOOL Method_isSyncronizedMethod(MVALUE** stack_ptr/
Method_isVirtualMethod	src/obj_method.c	/^BOOL Method_isVirtualMethod(MVALUE** stack_ptr, MV/
Method_name	src/obj_method.c	/^BOOL Method_name(MVALUE** stack_ptr, MVALUE* lvar,/
Method_parametors	src/obj_method.c	/^BOOL Method_parametors(MVALUE** stack_ptr, MVALUE*/
Method_path	src/obj_method.c	/^BOOL Method_path(MVALUE** stack_ptr, MVALUE* lvar,/
Method_resultType	src/obj_method.c	/^BOOL Method_resultType(MVALUE** stack_ptr, MVALUE*/
Method_setValue	src/obj_method.c	/^BOOL Method_setValue(MVALUE** stack_ptr, MVALUE* l/
Minterpreter	src/interpreter.c	/^int main(int argc, char** argv)$/
Mmain	src/main.c	/^int main(int argc, char** argv) $/
Mparser	src/parser.c	/^int main(int argc, char** argv)$/
Mpreprocessor	src/preprocessor.c	/^int main(int argc, char* argv[])$/
Mutex_Mutex	src/obj_mutex.c	/^BOOL Mutex_Mutex(MVALUE** stack_ptr, MVALUE* lvar,/
Mutex_run	src/obj_mutex.c	/^BOOL Mutex_run(MVALUE** stack_ptr, MVALUE* lvar, s/
Mutex_setValue	src/obj_mutex.c	/^BOOL Mutex_setValue(MVALUE** stack_ptr, MVALUE* lv/
Object_ID	src/obj_user_object.c	/^BOOL Object_ID(MVALUE** stack_ptr, MVALUE* lvar, s/
Object_fields	src/obj_user_object.c	/^BOOL Object_fields(MVALUE** stack_ptr, MVALUE* lva/
Object_numFields	src/obj_user_object.c	/^BOOL Object_numFields(MVALUE** stack_ptr, MVALUE* /
Object_setField	src/obj_user_object.c	/^BOOL Object_setField(MVALUE** stack_ptr, MVALUE* l/
Object_setType	src/obj_user_object.c	/^BOOL Object_setType(MVALUE** stack_ptr, MVALUE* lv/
Object_type	src/obj_user_object.c	/^BOOL Object_type(MVALUE** stack_ptr, MVALUE* lvar,/
OnigurumaRegex_compile	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_compile(MVALUE** stack_ptr, MV/
OnigurumaRegex_encode	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_encode(MVALUE** stack_ptr, MVA/
OnigurumaRegex_global	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_global(MVALUE** stack_ptr, MVA/
OnigurumaRegex_ignoreCase	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_ignoreCase(MVALUE** stack_ptr,/
OnigurumaRegex_multiLine	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_multiLine(MVALUE** stack_ptr, /
OnigurumaRegex_setEncode	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setEncode(MVALUE** stack_ptr, /
OnigurumaRegex_setGlobal	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setGlobal(MVALUE** stack_ptr, /
OnigurumaRegex_setIgnoreCase	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setIgnoreCase(MVALUE** stack_p/
OnigurumaRegex_setMultiLine	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setMultiLine(MVALUE** stack_pt/
OnigurumaRegex_setValue	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_setValue(MVALUE** stack_ptr, M/
OnigurumaRegex_source	src/obj_oniguruma_regex.c	/^BOOL OnigurumaRegex_source(MVALUE** stack_ptr, MVA/
Range_head	src/obj_range.c	/^BOOL Range_head(MVALUE** stack_ptr, MVALUE* lvar, /
Range_setHead	src/obj_range.c	/^BOOL Range_setHead(MVALUE** stack_ptr, MVALUE* lva/
Range_setTail	src/obj_range.c	/^BOOL Range_setTail(MVALUE** stack_ptr, MVALUE* lva/
Range_setValue	src/obj_range.c	/^BOOL Range_setValue(MVALUE** stack_ptr, MVALUE* lv/
Range_tail	src/obj_range.c	/^BOOL Range_tail(MVALUE** stack_ptr, MVALUE* lvar, /
String_append	src/obj_string.c	/^BOOL String_append(MVALUE** stack_ptr, MVALUE* lva/
String_char	src/obj_string.c	/^BOOL String_char(MVALUE** stack_ptr, MVALUE* lvar,/
String_cmp	src/obj_string.c	/^BOOL String_cmp(MVALUE** stack_ptr, MVALUE* lvar, /
String_length	src/obj_string.c	/^BOOL String_length(MVALUE** stack_ptr, MVALUE* lva/
String_match	src/obj_string.c	/^BOOL String_match(MVALUE** stack_ptr, MVALUE* lvar/
String_matchReverse	src/obj_string.c	/^BOOL String_matchReverse(MVALUE** stack_ptr, MVALU/
String_replace	src/obj_string.c	/^BOOL String_replace(MVALUE** stack_ptr, MVALUE* lv/
String_setValue	src/obj_string.c	/^BOOL String_setValue(MVALUE** stack_ptr, MVALUE* l/
String_toBytes	src/obj_string.c	/^BOOL String_toBytes(MVALUE** stack_ptr, MVALUE* lv/
String_toDouble	src/obj_string.c	/^BOOL String_toDouble(MVALUE** stack_ptr, MVALUE* l/
String_toInt	src/obj_string.c	/^BOOL String_toInt(MVALUE** stack_ptr, MVALUE* lvar/
System_access	src/obj_system.c	/^BOOL System_access(MVALUE** stack_ptr, MVALUE* lva/
System_basename	src/obj_system.c	/^BOOL System_basename(MVALUE** stack_ptr, MVALUE* l/
System_chdir	src/obj_system.c	/^BOOL System_chdir(MVALUE** stack_ptr, MVALUE* lvar/
System_chmod	src/obj_system.c	/^BOOL System_chmod(MVALUE** stack_ptr, MVALUE* lvar/
System_chown	src/obj_system.c	/^BOOL System_chown(MVALUE** stack_ptr, MVALUE* lvar/
System_chroot	src/obj_system.c	/^BOOL System_chroot(MVALUE** stack_ptr, MVALUE* lva/
System_close	src/obj_system.c	/^BOOL System_close(MVALUE** stack_ptr, MVALUE* lvar/
System_closedir	src/obj_system.c	/^BOOL System_closedir(MVALUE** stack_ptr, MVALUE* l/
System_dirname	src/obj_system.c	/^BOOL System_dirname(MVALUE** stack_ptr, MVALUE* lv/
System_dup2	src/obj_system.c	/^BOOL System_dup2(MVALUE** stack_ptr, MVALUE* lvar,/
System_execv	src/obj_system.c	/^BOOL System_execv(MVALUE** stack_ptr, MVALUE* lvar/
System_execvp	src/obj_system.c	/^BOOL System_execvp(MVALUE** stack_ptr, MVALUE* lva/
System_exit	src/obj_system.c	/^BOOL System_exit(MVALUE** stack_ptr, MVALUE* lvar,/
System_flock	src/obj_system.c	/^BOOL System_flock(MVALUE** stack_ptr, MVALUE* lvar/
System_fnmatch	src/obj_system.c	/^BOOL System_fnmatch(MVALUE** stack_ptr, MVALUE* lv/
System_fork	src/obj_system.c	/^BOOL System_fork(MVALUE** stack_ptr, MVALUE* lvar,/
System_getcwd	src/obj_system.c	/^BOOL System_getcwd(MVALUE** stack_ptr, MVALUE* lva/
System_getenv	src/obj_system.c	/^BOOL System_getenv(MVALUE** stack_ptr, MVALUE* lva/
System_getgid	src/obj_system.c	/^BOOL System_getgid(MVALUE** stack_ptr, MVALUE* lva/
System_getpgid	src/obj_system.c	/^BOOL System_getpgid(MVALUE** stack_ptr, MVALUE* lv/
System_getpid	src/obj_system.c	/^BOOL System_getpid(MVALUE** stack_ptr, MVALUE* lva/
System_getppid	src/obj_system.c	/^BOOL System_getppid(MVALUE** stack_ptr, MVALUE* lv/
System_getuid	src/obj_system.c	/^BOOL System_getuid(MVALUE** stack_ptr, MVALUE* lva/
System_isatty	src/obj_system.c	/^BOOL System_isatty(MVALUE** stack_ptr, MVALUE* lva/
System_lchmod	src/obj_system.c	/^BOOL System_lchmod(MVALUE** stack_ptr, MVALUE* lva/
System_lchown	src/obj_system.c	/^BOOL System_lchown(MVALUE** stack_ptr, MVALUE* lva/
System_link	src/obj_system.c	/^BOOL System_link(MVALUE** stack_ptr, MVALUE* lvar,/
System_lstat	src/obj_system.c	/^BOOL System_lstat(MVALUE** stack_ptr, MVALUE* lvar/
System_mkdir	src/obj_system.c	/^BOOL System_mkdir(MVALUE** stack_ptr, MVALUE* lvar/
System_mktime	src/obj_system.c	/^BOOL System_mktime(MVALUE** stack_ptr, MVALUE* lva/
System_msleep	src/obj_system.c	/^BOOL System_msleep(MVALUE** stack_ptr, MVALUE* lva/
System_nanosleep	src/obj_system.c	/^BOOL System_nanosleep(MVALUE** stack_ptr, MVALUE* /
System_open	src/obj_system.c	/^BOOL System_open(MVALUE** stack_ptr, MVALUE* lvar,/
System_opendir	src/obj_system.c	/^BOOL System_opendir(MVALUE** stack_ptr, MVALUE* lv/
System_pipe	src/obj_system.c	/^BOOL System_pipe(MVALUE** stack_ptr, MVALUE* lvar,/
System_rand	src/obj_system.c	/^BOOL System_rand(MVALUE** stack_ptr, MVALUE* lvar,/
System_read	src/obj_system.c	/^BOOL System_read(MVALUE** stack_ptr, MVALUE* lvar,/
System_readdir	src/obj_system.c	/^BOOL System_readdir(MVALUE** stack_ptr, MVALUE* lv/
System_readlink	src/obj_system.c	/^BOOL System_readlink(MVALUE** stack_ptr, MVALUE* l/
System_rename	src/obj_system.c	/^BOOL System_rename(MVALUE** stack_ptr, MVALUE* lva/
System_rmdir	src/obj_system.c	/^BOOL System_rmdir(MVALUE** stack_ptr, MVALUE* lvar/
System_setpgid	src/obj_system.c	/^BOOL System_setpgid(MVALUE** stack_ptr, MVALUE* lv/
System_sleep	src/obj_system.c	/^BOOL System_sleep(MVALUE** stack_ptr, MVALUE* lvar/
System_srand	src/obj_system.c	/^BOOL System_srand(MVALUE** stack_ptr, MVALUE* lvar/
System_stat	src/obj_system.c	/^BOOL System_stat(MVALUE** stack_ptr, MVALUE* lvar,/
System_symlink	src/obj_system.c	/^BOOL System_symlink(MVALUE** stack_ptr, MVALUE* lv/
System_system	src/obj_system.c	/^BOOL System_system(MVALUE** stack_ptr, MVALUE* lva/
System_tcgetattr	src/obj_system.c	/^BOOL System_tcgetattr(MVALUE** stack_ptr, MVALUE* /
System_tcsetpgrp	src/obj_system.c	/^BOOL System_tcsetpgrp(MVALUE** stack_ptr, MVALUE* /
System_time	src/obj_system.c	/^BOOL System_time(MVALUE** stack_ptr, MVALUE* lvar,/
System_truncate	src/obj_system.c	/^BOOL System_truncate(MVALUE** stack_ptr, MVALUE* l/
System_umask	src/obj_system.c	/^BOOL System_umask(MVALUE** stack_ptr, MVALUE* lvar/
System_unlink	src/obj_system.c	/^BOOL System_unlink(MVALUE** stack_ptr, MVALUE* lva/
System_utime	src/obj_system.c	/^BOOL System_utime(MVALUE** stack_ptr, MVALUE* lvar/
System_wait	src/obj_system.c	/^BOOL System_wait(MVALUE** stack_ptr, MVALUE* lvar,/
System_waitpid	src/obj_system.c	/^BOOL System_waitpid(MVALUE** stack_ptr, MVALUE* lv/
System_write	src/obj_system.c	/^BOOL System_write(MVALUE** stack_ptr, MVALUE* lvar/
Thread_Thread	src/obj_thread.c	/^BOOL Thread_Thread(MVALUE** stack_ptr, MVALUE* lva/
Thread_join	src/obj_thread.c	/^BOOL Thread_join(MVALUE** stack_ptr, MVALUE* lvar,/
Thread_setValue	src/obj_thread.c	/^BOOL Thread_setValue(MVALUE** stack_ptr, MVALUE* l/
WaitStatus_WCOREDUMP	src/obj_wait_status.c	/^BOOL WaitStatus_WCOREDUMP(MVALUE** stack_ptr, MVAL/
WaitStatus_WEXITSTATUS	src/obj_wait_status.c	/^BOOL WaitStatus_WEXITSTATUS(MVALUE** stack_ptr, MV/
WaitStatus_WIFCONTINUED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFCONTINUED(MVALUE** stack_ptr, M/
WaitStatus_WIFEXITED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFEXITED(MVALUE** stack_ptr, MVAL/
WaitStatus_WIFSIGNALED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFSIGNALED(MVALUE** stack_ptr, MV/
WaitStatus_WIFSTOPPED	src/obj_wait_status.c	/^BOOL WaitStatus_WIFSTOPPED(MVALUE** stack_ptr, MVA/
WaitStatus_WSTOPSIG	src/obj_wait_status.c	/^BOOL WaitStatus_WSTOPSIG(MVALUE** stack_ptr, MVALU/
WaitStatus_WTERMSIG	src/obj_wait_status.c	/^BOOL WaitStatus_WTERMSIG(MVALUE** stack_ptr, MVALU/
add_class_to_class_table	src/klass.c	/^static void add_class_to_class_table(char* namespa/
add_dependence_class	src/klass_ctime.c	/^void add_dependence_class(sCLClass* klass, sCLClas/
add_dependences	src/parse.c	/^static void add_dependences(sCLClass* klass, sCLCl/
add_dependences_with_node_type	src/klass_ctime.c	/^static void add_dependences_with_node_type(sCLClas/
add_field	src/klass_ctime.c	/^BOOL add_field(sCLClass* klass, BOOL static_, BOOL/
add_fields	src/compiler.c	/^static BOOL add_fields(sParserInfo* info, int pars/
add_generics_param_type	src/klass_ctime.c	/^BOOL add_generics_param_type(sCLClass* klass, char/
add_generics_param_type_name	src/klass_ctime.c	/^BOOL add_generics_param_type_name(sCLClass* klass,/
add_generics_param_type_to_method	src/klass_ctime.c	/^BOOL add_generics_param_type_to_method(sCLClass* k/
add_implemented_interface	src/klass_ctime.c	/^BOOL add_implemented_interface(sCLClass* klass, sC/
add_included_module	src/klass_ctime.c	/^BOOL add_included_module(sCLClass* klass, sCLModul/
add_item_to_hash	src/obj_hash.c	/^BOOL add_item_to_hash(CLObject self, CLObject key,/
add_loaded_class_to_table	src/load_class.c	/^void add_loaded_class_to_table(sCLClass* loaded_cl/
add_method	src/klass_ctime.c	/^void add_method(sCLClass* klass, BOOL static_, BOO/
add_method_to_virtual_method_table	src/klass_ctime.c	/^static BOOL add_method_to_virtual_method_table(sCL/
add_method_to_virtual_method_table_core	src/klass_ctime.c	/^static BOOL add_method_to_virtual_method_table_cor/
add_param_initializer_to_method	src/klass_ctime.c	/^BOOL add_param_initializer_to_method(sCLClass* kla/
add_param_to_method	src/klass_ctime.c	/^BOOL add_param_to_method(sCLClass* klass, sCLNodeT/
add_preprocessor	src/preprocessor.c	/^static BOOL add_preprocessor(char* name, MANAGED s/
add_super_class	src/klass_ctime.c	/^BOOL add_super_class(sCLClass* klass, sCLNodeType*/
add_to_array	src/obj_array.c	/^void add_to_array(CLObject self, CLObject item, sV/
after_class_name	src/parse.c	/^static BOOL after_class_name(sCLNodeType* type, un/
alias_words	src/parse.c	/^static BOOL alias_words(BOOL* processed, char* buf/
alloc_array_items	src/obj_array.c	/^static CLObject alloc_array_items(int mvalue_num)$/
alloc_array_object	src/obj_array.c	/^static CLObject alloc_array_object(CLObject type_o/
alloc_block_object	src/obj_block.c	/^static CLObject alloc_block_object()$/
alloc_bool_object	src/obj_bool.c	/^static CLObject alloc_bool_object()$/
alloc_byte_object	src/obj_byte.c	/^static CLObject alloc_byte_object()$/
alloc_bytecode_of_method	src/klass.c	/^void alloc_bytecode_of_method(sCLMethod* method)$/
alloc_bytes_object	src/obj_bytes.c	/^static CLObject alloc_bytes_object(CLObject type_o/
alloc_char_object	src/obj_char.c	/^static CLObject alloc_char_object()$/
alloc_class	src/klass.c	/^sCLClass* alloc_class(char* namespace, char* class/
alloc_class_on_compile_time	src/klass_ctime.c	/^sCLClass* alloc_class_on_compile_time(char* namesp/
alloc_double_object	src/obj_double.c	/^static CLObject alloc_double_object()$/
alloc_float_object	src/obj_float.c	/^static CLObject alloc_float_object()$/
alloc_hash_items	src/obj_hash.c	/^static CLObject alloc_hash_items(int mvalue_num)$/
alloc_hash_object	src/obj_hash.c	/^static CLObject alloc_hash_object(CLObject type_ob/
alloc_heap_mem	src/heap.c	/^CLObject alloc_heap_mem(int size, CLObject type_ob/
alloc_integer_object	src/obj_int.c	/^static CLObject alloc_integer_object()$/
alloc_long_object	src/obj_long.c	/^static CLObject alloc_long_object()$/
alloc_mutex_object	src/obj_mutex.c	/^static CLObject alloc_mutex_object(CLObject type_o/
alloc_node	src/node_tree.c	/^static unsigned int alloc_node()$/
alloc_node_block	src/node_tree.c	/^unsigned int alloc_node_block(sCLNodeType* block_t/
alloc_node_type	src/node_type.c	/^sCLNodeType* alloc_node_type()$/
alloc_null_object	src/obj_null.c	/^static CLObject alloc_null_object()$/
alloc_pointer_object	src/obj_pointer.c	/^static CLObject alloc_pointer_object()$/
alloc_range_object	src/obj_range.c	/^static CLObject alloc_range_object(CLObject type_o/
alloc_regex_object	src/obj_oniguruma_regex.c	/^static CLObject alloc_regex_object(CLObject type_o/
alloc_short_object	src/obj_short.c	/^static CLObject alloc_short_object()$/
alloc_string_object	src/obj_string.c	/^static CLObject alloc_string_object(unsigned int l/
alloc_thread_object	src/obj_thread.c	/^static CLObject alloc_thread_object(CLObject type_/
alloc_type_object	src/obj_type_object.c	/^static CLObject alloc_type_object()$/
alloc_uint_object	src/obj_uint.c	/^static CLObject alloc_uint_object()$/
allocate_cl_type	src/type.c	/^sCLType* allocate_cl_type()$/
allocate_new_class	src/compiler.c	/^static BOOL allocate_new_class(char* class_name, s/
append_buf_to_bytecodes	src/buffer.c	/^void append_buf_to_bytecodes(sByteCode* self, int*/
append_buf_to_constant_pool	src/buffer.c	/^void append_buf_to_constant_pool(sConst* self, cha/
append_character_to_module	src/module.c	/^void append_character_to_module(sCLModule* self, c/
append_code_to_bytecodes	src/buffer.c	/^void append_code_to_bytecodes(sByteCode* code, sCo/
append_constant_pool_to_bytecodes	src/buffer.c	/^void append_constant_pool_to_bytecodes(sByteCode* /
append_double_value_to_constant_pool	src/buffer.c	/^int append_double_value_to_constant_pool(sConst* c/
append_float_value_to_constant_pool	src/buffer.c	/^int append_float_value_to_constant_pool(sConst* co/
append_generics_type_to_bytecode	src/buffer.c	/^void append_generics_type_to_bytecode(sByteCode* s/
append_int_value_to_bytecodes	src/buffer.c	/^void append_int_value_to_bytecodes(sByteCode* self/
append_int_value_to_constant_pool	src/buffer.c	/^int append_int_value_to_constant_pool(sConst* cons/
append_module_to_table	src/module.c	/^static BOOL append_module_to_table(char* name, sCL/
append_namespace_to_curernt_namespace	src/namespace.c	/^BOOL append_namespace_to_curernt_namespace(char* c/
append_node_to_node_block	src/node_tree.c	/^void append_node_to_node_block(unsigned int node_b/
append_opecode_to_bytecodes	src/buffer.c	/^void append_opecode_to_bytecodes(sByteCode* self, /
append_str_to_bytecodes	src/buffer.c	/^void append_str_to_bytecodes(sByteCode* code, sCon/
append_str_to_constant_pool	src/buffer.c	/^int append_str_to_constant_pool(sConst* constant, /
append_str_to_module	src/module.c	/^void append_str_to_module(sCLModule* self, char* s/
append_ulong_value_to_bytecodes	src/buffer.c	/^void append_ulong_value_to_bytecodes(sByteCode* se/
append_wstr_to_constant_pool	src/buffer.c	/^int append_wstr_to_constant_pool(sConst* constant,/
arrange_alignment_of_const	src/buffer.c	/^static void arrange_alignment_of_const(sConst* sel/
arrange_alignment_of_const_core	src/buffer.c	/^static void arrange_alignment_of_const_core(sConst/
atexit_fun	src/vm.c	/^void atexit_fun()$/
automatically_include_module_from_class	src/compiler.c	/^static BOOL automatically_include_module_from_clas/
automatically_super_class_addition	src/compiler.c	/^static BOOL automatically_super_class_addition(sPa/
bool_setValue	src/obj_bool.c	/^BOOL bool_setValue(MVALUE** stack_ptr, MVALUE* lva/
byte_setValue	src/obj_byte.c	/^BOOL byte_setValue(MVALUE** stack_ptr, MVALUE* lva/
byte_toInt	src/obj_byte.c	/^BOOL byte_toInt(MVALUE** stack_ptr, MVALUE* lvar, /
byte_toLong	src/obj_byte.c	/^BOOL byte_toLong(MVALUE** stack_ptr, MVALUE* lvar,/
byte_to_int	src/obj_byte.c	/^BOOL byte_to_int(MVALUE** stack_ptr, MVALUE* lvar,/
byte_to_string	src/obj_byte.c	/^BOOL byte_to_string(MVALUE** stack_ptr, MVALUE* lv/
call_clone_method	src/vm.c	/^static BOOL call_clone_method(sCLClass* klass, sVM/
call_method	src/node.c	/^static BOOL call_method(char* method_name, BOOL cl/
call_method_missing_method	src/vm.c	/^static BOOL call_method_missing_method(sCLClass* k/
call_preprocessor	src/preprocessor.c	/^static BOOL call_preprocessor(sBuf* command, sBuf*/
call_super	src/node.c	/^static BOOL call_super(char* method_name, sCLNodeT/
change_namespace	src/compiler.c	/^static BOOL change_namespace(sParserInfo* info)$/
char_setValue	src/obj_char.c	/^BOOL char_setValue(MVALUE** stack_ptr, MVALUE* lva/
char_toInt	src/obj_char.c	/^BOOL char_toInt(MVALUE** stack_ptr, MVALUE* lvar, /
char_toString	src/obj_char.c	/^BOOL char_toString(MVALUE** stack_ptr, MVALUE* lva/
chars_object_size	src/obj_string.c	/^static unsigned int chars_object_size(unsigned int/
check_abstract_methods	src/compiler.c	/^void check_abstract_methods(sParserInfo* info, int/
check_constructor_type_for_generics_newable	src/compiler.c	/^static void check_constructor_type_for_generics_ne/
check_implemented_abstract_methods	src/klass_ctime.c	/^BOOL check_implemented_abstract_methods(sCLNodeTyp/
check_implemented_interface	src/klass_ctime.c	/^BOOL check_implemented_interface(sCLNodeType* klas/
check_implemented_interface2	src/klass_ctime.c	/^BOOL check_implemented_interface2(sCLClass* klass,/
check_implemented_interface2_core	src/klass_ctime.c	/^static BOOL check_implemented_interface2_core(sCLC/
check_implemented_interface_between_super_classes	src/klass_ctime.c	/^BOOL check_implemented_interface_between_super_cla/
check_implemented_interface_without_super_class	src/klass_ctime.c	/^BOOL check_implemented_interface_without_super_cla/
check_method_params	src/klass.c	/^static BOOL check_method_params(sCLMethod* method,/
check_method_params_with_param_initializer	src/klass_ctime.c	/^static BOOL check_method_params_with_param_initial/
check_param_initializer	src/compiler.c	/^static void check_param_initializer(sByteCode* cod/
check_private_access	src/node.c	/^static BOOL check_private_access(sCLClass* klass, /
check_struct_implements_iclonable	src/compiler.c	/^void check_struct_implements_iclonable(sParserInfo/
check_the_existance_of_this_method_before	src/compiler.c	/^static void check_the_existance_of_this_method_bef/
check_the_same_interface_of_two_methods	src/klass_ctime.c	/^static BOOL check_the_same_interface_of_two_method/
check_the_same_parametor_of_two_methods	src/klass_ctime.c	/^BOOL check_the_same_parametor_of_two_methods(sCLNo/
check_valid_generics_type	src/node_type.c	/^BOOL check_valid_generics_type(sCLNodeType* type, /
check_valid_star_type	src/node_type.c	/^BOOL check_valid_star_type(sCLClass* klass)$/
checking	src/interface.c	/^\/\/ result: (FALSE) not found or failed in type c/
cl_compiler_final	src/compile.c	/^void cl_compiler_final()$/
cl_compiler_init	src/compile.c	/^void cl_compiler_init()$/
cl_eval_file	src/interface.c	/^BOOL cl_eval_file(char* file_name)$/
cl_final	src/vm.c	/^void cl_final()$/
cl_gc	src/heap.c	/^void cl_gc()$/
cl_get_class	src/klass.c	/^sCLClass* cl_get_class(char* real_class_name)$/
cl_get_class_with_namespace	src/klass.c	/^sCLClass* cl_get_class_with_namespace(char* namesp/
cl_init	src/vm.c	/^BOOL cl_init(int heap_size, int handle_size)$/
cl_parser_final	src/parser.c	/^static void cl_parser_final()$/
cl_parser_init	src/parser.c	/^static void cl_parser_init()$/
cl_print	src/interface.c	/^int cl_print(sVMInfo* info, char* msg, ...)$/
cl_type_to_buffer	src/interpreter.c	/^ALLOC char* cl_type_to_buffer(sCLType* cl_type, sC/
cl_vm	src/vm.c	/^static BOOL cl_vm(sByteCode* code, sConst* constan/
class_not_found	src/parse.c	/^static void class_not_found(char* namespace, char*/
clear_method_index_of_compile_time	src/klass_ctime.c	/^void clear_method_index_of_compile_time()$/
clone_cl_type	src/type.c	/^ALLOC sCLType* clone_cl_type(sCLType* cl_type2, sC/
clone_cl_type2	src/type.c	/^void clone_cl_type2(sCLType* self, sCLType* cl_typ/
clone_node_type	src/node_type.c	/^ALLOC sCLNodeType* clone_node_type(sCLNodeType* no/
clone_type_object_core	src/obj_type_object.c	/^static void clone_type_object_core(CLObject type_o/
compaction	src/heap.c	/^static void compaction(unsigned char* mark_flg)$/
compile_class	src/compiler.c	/^static BOOL compile_class(sParserInfo* info, BOOL /
compile_class_source	src/compiler.c	/^static BOOL compile_class_source(char* sname)$/
compile_error	src/parse.c	/^void compile_error(char* msg, ...)$/
compile_regex	src/obj_oniguruma_regex.c	/^static BOOL compile_regex(CLObject self, const Oni/
compile_script	src/compiler.c	/^static BOOL compile_script(char* sname, BOOL outpu/
correct_offset	src/obj_string.c	/^static BOOL correct_offset(CLObject offset, int* o/
correct_stack_pointer	src/compile.c	/^void correct_stack_pointer(int* stack_num, char* s/
correct_stack_pointer_n	src/compile.c	/^void correct_stack_pointer_n(int* stack_num, int n/
correct_stack_pointer_with_output_result	src/compile.c	/^void correct_stack_pointer_with_output_result(int*/
create_array_object	src/obj_array.c	/^CLObject create_array_object(CLObject type_object,/
create_array_object2	src/obj_array.c	/^CLObject create_array_object2(CLObject type_object/
create_array_object_for_new	src/obj_array.c	/^static CLObject create_array_object_for_new(CLObje/
create_array_object_with_element_class_name	src/obj_array.c	/^CLObject create_array_object_with_element_class_na/
create_block	src/obj_block.c	/^CLObject create_block(char* constant, int const_le/
create_bool_object	src/obj_bool.c	/^CLObject create_bool_object(BOOL value)$/
create_bool_object_for_new	src/obj_bool.c	/^static CLObject create_bool_object_for_new(CLObjec/
create_buffer_from_string_object	src/obj_string.c	/^BOOL create_buffer_from_string_object(CLObject str/
create_byte_object	src/obj_byte.c	/^CLObject create_byte_object(unsigned char value)$/
create_byte_object_for_new	src/obj_byte.c	/^static CLObject create_byte_object_for_new(CLObjec/
create_byte_object_with_type	src/obj_byte.c	/^CLObject create_byte_object_with_type(unsigned cha/
create_bytes_object	src/obj_bytes.c	/^CLObject create_bytes_object(char* str, int len, C/
create_bytes_object_by_multiply	src/obj_bytes.c	/^CLObject create_bytes_object_by_multiply(CLObject /
create_bytes_object_by_multiply_with_type	src/obj_bytes.c	/^CLObject create_bytes_object_by_multiply_with_type/
create_bytes_object_for_new	src/obj_bytes.c	/^static CLObject create_bytes_object_for_new(CLObje/
create_char_object	src/obj_char.c	/^CLObject create_char_object(wchar_t value)$/
create_char_object_for_new	src/obj_char.c	/^static CLObject create_char_object_for_new(CLObjec/
create_cl_type_from_module	src/module.c	/^void create_cl_type_from_module(sCLType* cl_type, /
create_cl_type_from_node_type	src/node_type.c	/^ALLOC sCLType* create_cl_type_from_node_type(sCLNo/
create_cl_type_from_node_type2	src/node_type.c	/^void create_cl_type_from_node_type2(sCLType* cl_ty/
create_class_object	src/obj_class_object.c	/^CLObject create_class_object(CLObject type_object,/
create_class_object_for_new	src/obj_class_object.c	/^static CLObject create_class_object_for_new(CLObje/
create_double_object	src/obj_double.c	/^CLObject create_double_object(double value)$/
create_double_object_for_new	src/obj_double.c	/^static CLObject create_double_object_for_new(CLObj/
create_double_object_with_type	src/obj_double.c	/^CLObject create_double_object_with_type(double val/
create_float_object	src/obj_float.c	/^CLObject create_float_object(float value)$/
create_float_object_for_new	src/obj_float.c	/^static CLObject create_float_object_for_new(CLObje/
create_float_object_with_type	src/obj_float.c	/^CLObject create_float_object_with_type(float value/
create_generics_param_type_pattern	src/klass_ctime.c	/^void create_generics_param_type_pattern(ALLOC sGen/
create_generics_param_type_pattern_core	src/klass_ctime.c	/^static void create_generics_param_type_pattern_cor/
create_hash_object	src/obj_hash.c	/^BOOL create_hash_object(CLObject* obj, CLObject ty/
create_hash_object_for_new	src/obj_hash.c	/^static CLObject create_hash_object_for_new(CLObjec/
create_int_object	src/obj_int.c	/^CLObject create_int_object(int value)$/
create_int_object_for_new	src/obj_int.c	/^static CLObject create_int_object_for_new(CLObject/
create_int_object_with_type	src/obj_int.c	/^CLObject create_int_object_with_type(int value, CL/
create_int_object_with_type_name	src/obj_int.c	/^CLObject create_int_object_with_type_name(int valu/
create_long_object	src/obj_long.c	/^CLObject create_long_object(unsigned long value)$/
create_long_object_for_new	src/obj_long.c	/^static CLObject create_long_object_for_new(CLObjec/
create_long_object_with_type	src/obj_long.c	/^CLObject create_long_object_with_type(unsigned lon/
create_method	src/klass_ctime.c	/^BOOL create_method(sCLClass* klass, sCLMethod** me/
create_method_object	src/obj_method.c	/^CLObject create_method_object(CLObject type_object/
create_method_object_for_new	src/obj_method.c	/^static CLObject create_method_object_for_new(CLObj/
create_method_path	src/klass_ctime.c	/^static void create_method_path(char* result, int r/
create_mutex_object	src/obj_mutex.c	/^static CLObject create_mutex_object(CLObject type_/
create_node_type_from_cl_type	src/node_type.c	/^ALLOC sCLNodeType* create_node_type_from_cl_type(s/
create_node_type_from_class_name	src/node_type.c	/^sCLNodeType* create_node_type_from_class_name(char/
create_null_object	src/obj_null.c	/^CLObject create_null_object()$/
create_null_object_for_new	src/obj_null.c	/^static CLObject create_null_object_for_new(CLObjec/
create_number_object_from_size	src/c_to_clover.c	/^CLObject create_number_object_from_size(size_t siz/
create_oniguruma_regex_object	src/obj_oniguruma_regex.c	/^BOOL create_oniguruma_regex_object(CLObject* self,/
create_pointer_object	src/obj_pointer.c	/^CLObject create_pointer_object(void* value, int si/
create_pointer_object_for_new	src/obj_pointer.c	/^static CLObject create_pointer_object_for_new(CLOb/
create_pointer_object_with_class_name	src/obj_pointer.c	/^CLObject create_pointer_object_with_class_name(voi/
create_range_object	src/obj_range.c	/^CLObject create_range_object(CLObject type_object,/
create_range_object_for_new	src/obj_range.c	/^static CLObject create_range_object_for_new(CLObje/
create_real_class_name	src/klass.c	/^void create_real_class_name(char* result, int resu/
create_real_module_name	src/module.c	/^static void create_real_module_name(char* result, /
create_regex_object_for_new	src/obj_oniguruma_regex.c	/^static CLObject create_regex_object_for_new(CLObje/
create_short_object	src/obj_short.c	/^CLObject create_short_object(unsigned short value)/
create_short_object_for_new	src/obj_short.c	/^static CLObject create_short_object_for_new(CLObje/
create_short_object_with_type	src/obj_short.c	/^CLObject create_short_object_with_type(unsigned sh/
create_string_object	src/obj_string.c	/^CLObject create_string_object(wchar_t* str, int le/
create_string_object_by_multiply	src/obj_string.c	/^CLObject create_string_object_by_multiply(CLObject/
create_string_object_by_multiply_with_type	src/obj_string.c	/^CLObject create_string_object_by_multiply_with_typ/
create_string_object_for_new	src/obj_string.c	/^static CLObject create_string_object_for_new(CLObj/
create_string_object_from_ascii_string	src/obj_string.c	/^BOOL create_string_object_from_ascii_string(CLObje/
create_string_object_from_ascii_string_with_class_name	src/obj_string.c	/^BOOL create_string_object_from_ascii_string_with_c/
create_string_object_with_class_name	src/obj_string.c	/^CLObject create_string_object_with_class_name(wcha/
create_thread_object	src/obj_thread.c	/^static CLObject create_thread_object(CLObject type/
create_type_object	src/obj_type_object.c	/^CLObject create_type_object(sCLClass* klass)$/
create_type_object_for_new	src/obj_type_object.c	/^static CLObject create_type_object_for_new(CLObjec/
create_type_object_from_bytecodes	src/obj_type_object.c	/^CLObject create_type_object_from_bytecodes(int** p/
create_type_object_from_cl_type	src/obj_type_object.c	/^CLObject create_type_object_from_cl_type(sCLClass*/
create_type_object_from_other_type_object	src/obj_type_object.c	/^CLObject create_type_object_from_other_type_object/
create_type_object_with_class_name	src/obj_type_object.c	/^CLObject create_type_object_with_class_name(char* /
create_type_object_with_class_name_and_generics_name	src/obj_type_object.c	/^CLObject create_type_object_with_class_name_and_ge/
create_type_object_with_class_name_and_generics_name_core	src/obj_type_object.c	/^static BOOL create_type_object_with_class_name_and/
create_uint_object	src/obj_uint.c	/^CLObject create_uint_object(unsigned int value)$/
create_uint_object_for_new	src/obj_uint.c	/^static CLObject create_uint_object_for_new(CLObjec/
create_uint_object_with_type	src/obj_uint.c	/^CLObject create_uint_object_with_type(unsigned int/
create_user_object	src/obj_user_object.c	/^BOOL create_user_object(CLObject type_object, CLOb/
create_user_object_with_class_name	src/obj_user_object.c	/^BOOL create_user_object_with_class_name(char* clas/
debug_calloc	src/debug.c	/^ALLOC void* debug_calloc(size_t count, size_t size/
debug_final	src/debug.c	/^void debug_final()$/
debug_free	src/debug.c	/^void debug_free(void* memory, const char* file_nam/
debug_init	src/debug.c	/^void debug_init()$/
debug_malloc	src/debug.c	/^ALLOC void* debug_malloc(size_t size, const char* /
debug_realloc	src/debug.c	/^ALLOC void* debug_realloc(void* memory, size_t siz/
debug_strdup	src/debug.c	/^ALLOC char* debug_strdup(char* str, const char* fi/
dec_stack_num	src/node.c	/^static void dec_stack_num(int* stack_num, int valu/
delete_comment	src/parse.c	/^BOOL delete_comment(sBuf* source, sBuf* source2)$/
determine_the_calling_method	src/node.c	/^static BOOL determine_the_calling_method(sCLClass*/
display_candidates	src/interpreter.c	/^void display_candidates(char** candidates)$/
do_call_method	src/node.c	/^static BOOL do_call_method(sCLClass* klass, sCLMet/
do_call_method_with_duck_typing	src/node.c	/^static BOOL do_call_method_with_duck_typing(sCLCla/
do_call_mixin	src/node.c	/^static BOOL do_call_mixin(sCLMethod* method, int m/
do_include_file	src/compiler.c	/^static BOOL do_include_file(char* sname, char* cur/
does_this_var_exist	src/vtable.c	/^BOOL does_this_var_exist(sVarTable* table, char* n/
double_setValue	src/obj_double.c	/^BOOL double_setValue(MVALUE** stack_ptr, MVALUE* l/
double_toFloat	src/obj_double.c	/^BOOL double_toFloat(MVALUE** stack_ptr, MVALUE* lv/
double_toInt	src/obj_double.c	/^BOOL double_toInt(MVALUE** stack_ptr, MVALUE* lvar/
double_toString	src/obj_double.c	/^BOOL double_toString(MVALUE** stack_ptr, MVALUE* l/
entry_exception_object	src/vm.c	/^void entry_exception_object(sVMInfo* info, sCLClas/
entry_exception_object_with_class_name	src/vm.c	/^void entry_exception_object_with_class_name(sVMInf/
entry_native_enum_fields	src/obj_enum.c	/^void entry_native_enum_fields(sCLClass* klass, int/
entry_vtable_to_node_block	src/vtable.c	/^void entry_vtable_to_node_block(unsigned int block/
enum_to_hash	src/obj_enum.c	/^BOOL enum_to_hash(CLObject hash, sCLClass* klass, /
equalibility_of_key	src/obj_hash.c	/^static BOOL equalibility_of_key(CLObject left_key,/
erase_item	src/obj_hash.c	/^static BOOL erase_item(CLObject self, CLObject key/
error	src/parse.c	/^\/\/ result: (FALSE) there is an error (TRUE) succ/
eval_str	src/interpreter.c	/^static BOOL eval_str(char* str)$/
expect_next_character	src/parse.c	/^BOOL expect_next_character(char* characters, int* /
expect_next_character_with_one_forward	src/parse.c	/^void expect_next_character_with_one_forward(char* /
expression_add_sub	src/parse.c	/^static BOOL expression_add_sub(unsigned int* node,/
expression_and	src/parse.c	/^static BOOL expression_and(unsigned int* node, sPa/
expression_and_and	src/parse.c	/^static BOOL expression_and_and(unsigned int* node,/
expression_comma	src/parse.c	/^static BOOL expression_comma(unsigned int* node, s/
expression_comparison_equal_operator	src/parse.c	/^static BOOL expression_comparison_equal_operator(u/
expression_comparison_operator	src/parse.c	/^static BOOL expression_comparison_operator(unsigne/
expression_conditional_operator	src/parse.c	/^static BOOL expression_conditional_operator(unsign/
expression_monadic_operator	src/parse.c	/^static BOOL expression_monadic_operator(unsigned i/
expression_mult_div	src/parse.c	/^static BOOL expression_mult_div(unsigned int* node/
expression_node	src/parse.c	/^static BOOL expression_node(unsigned int* node, sP/
expression_node_do	src/parse.c	/^static BOOL expression_node_do(unsigned int* node,/
expression_node_for	src/parse.c	/^static BOOL expression_node_for(unsigned int* node/
expression_node_if	src/parse.c	/^static BOOL expression_node_if(unsigned int* node,/
expression_node_try	src/parse.c	/^static BOOL expression_node_try(unsigned int* node/
expression_node_while	src/parse.c	/^static BOOL expression_node_while(unsigned int* no/
expression_or	src/parse.c	/^static BOOL expression_or(unsigned int* node, sPar/
expression_or_or	src/parse.c	/^static BOOL expression_or_or(unsigned int* node, s/
expression_range	src/parse.c	/^static BOOL expression_range(unsigned int* node, s/
expression_shift	src/parse.c	/^static BOOL expression_shift(unsigned int* node, s/
expression_substitution	src/parse.c	/^static BOOL expression_substitution(unsigned int* /
expression_xor	src/parse.c	/^static BOOL expression_xor(unsigned int* node, sPa/
extends_and_implements	src/compiler.c	/^static BOOL extends_and_implements(sParserInfo* in/
extname	src/compiler.c	/^static char* extname(char* file_name)$/
final_vtable	src/vtable.c	/^void final_vtable()$/
float_setValue	src/obj_float.c	/^BOOL float_setValue(MVALUE** stack_ptr, MVALUE* lv/
float_toDouble	src/obj_float.c	/^BOOL float_toDouble(MVALUE** stack_ptr, MVALUE* lv/
float_toInt	src/obj_float.c	/^BOOL float_toInt(MVALUE** stack_ptr, MVALUE* lvar,/
float_toString	src/obj_float.c	/^BOOL float_toString(MVALUE** stack_ptr, MVALUE* lv/
fold_variable_arguments_to_array	src/node.c	/^static void fold_variable_arguments_to_array(sCLMe/
found	src/klass_ctime.c	/^\/\/ result: (NULL) not found (sCLMethod*) found$/
free_block_object	src/obj_block.c	/^static void free_block_object(CLObject self)$/
free_bytes_object	src/obj_bytes.c	/^void free_bytes_object(CLObject self)$/
free_cl_types	src/type.c	/^void free_cl_types()$/
free_class	src/klass.c	/^static void free_class(sCLClass* klass)$/
free_module	src/module.c	/^static void free_module(sCLModule* self)$/
free_mutex_object	src/obj_mutex.c	/^static void free_mutex_object(CLObject obj)$/
free_node_blocks	src/node_tree.c	/^static void free_node_blocks()$/
free_node_types	src/node_type.c	/^void free_node_types()$/
free_nodes	src/node_tree.c	/^void free_nodes()$/
free_regex_object	src/obj_oniguruma_regex.c	/^static void free_regex_object(CLObject obj)$/
gc	src/heap.c	/^static void gc(CLObject type_object)$/
gc_all	src/heap.c	/^static void gc_all()$/
get_alias_hash	src/alias.c	/^static int get_alias_hash(char* alias_name)$/
get_bytes_and_int_object_from_stack	src/vm.c	/^static BOOL get_bytes_and_int_object_from_stack(CL/
get_class_info_from_bytecode	src/vm.c	/^static BOOL get_class_info_from_bytecode(sCLClass*/
get_class_name_from_bytecodes	src/vm.c	/^static void get_class_name_from_bytecodes(int** pc/
get_class_name_or_namespace_name	src/interpreter.c	/^static void get_class_name_or_namespace_name(char*/
get_definition_from_class	src/compiler.c	/^static BOOL get_definition_from_class(sParserInfo*/
get_field	src/klass.c	/^sCLField* get_field(sCLClass* klass, char* field_n/
get_field_including_super_classes	src/klass_ctime.c	/^sCLField* get_field_including_super_classes(sCLNod/
get_field_index	src/klass_ctime.c	/^int get_field_index(sCLClass* klass, char* field_n/
get_field_index_including_super_classes	src/klass_ctime.c	/^int get_field_index_including_super_classes(sCLCla/
get_field_index_including_super_classes_without_class_field	src/klass_ctime.c	/^int get_field_index_including_super_classes_withou/
get_field_index_without_class_field	src/klass_ctime.c	/^static int get_field_index_without_class_field(sCL/
get_field_num_including_super_classes	src/klass.c	/^int get_field_num_including_super_classes(sCLClass/
get_field_num_including_super_classes_without_class_field	src/klass.c	/^int get_field_num_including_super_classes_without_/
get_field_type	src/klass_ctime.c	/^BOOL get_field_type(sCLClass* klass, sCLField* fie/
get_func	src/preprocessor.c	/^static sPreprocessorFunction* get_func(char* name)/
get_generics_param_number	src/klass_ctime.c	/^int get_generics_param_number(sCLClass* klass)$/
get_generics_param_types	src/klass_ctime.c	/^sCLGenericsParamTypes* get_generics_param_types(sC/
get_generics_type_num	src/parse.c	/^int get_generics_type_num(sCLClass* klass, char* t/
get_generics_type_num_of_method_scope	src/parse.c	/^int get_generics_type_num_of_method_scope(sCLClass/
get_hash	src/klass.c	/^unsigned int get_hash(char* name)$/
get_hash_item	src/obj_hash.c	/^static BOOL get_hash_item(CLObject self, CLObject /
get_hash_key_for_native_class	src/klass.c	/^static unsigned int get_hash_key_for_native_class(/
get_hash_key_for_native_method	src/klass.c	/^static unsigned int get_hash_key_for_native_method/
get_hash_value	src/obj_hash.c	/^static BOOL get_hash_value(CLObject key, sVMInfo* /
get_heap_mem_size	src/heap.c	/^static unsigned int get_heap_mem_size(CLObject obj/
get_hex_number	src/parse.c	/^static BOOL get_hex_number(char* buf, size_t buf_s/
get_loaded_class	src/load_class.c	/^char* get_loaded_class(int index)$/
get_method	src/klass_ctime.c	/^sCLMethod* get_method(sCLClass* klass, char* metho/
get_method_from_index	src/klass_ctime.c	/^sCLMethod* get_method_from_index(sCLClass* klass, /
get_method_index	src/klass_ctime.c	/^int get_method_index(sCLClass* klass, sCLMethod* m/
get_method_index_from_the_parametor_point	src/klass_ctime.c	/^int get_method_index_from_the_parametor_point(sCLC/
get_method_names	src/klass_ctime.c	/^ALLOC char** get_method_names(sCLClass* klass)$/
get_method_names_with_arguments	src/interpreter.c	/^ALLOC ALLOC char** get_method_names_with_arguments/
get_method_num_params	src/klass_ctime.c	/^int get_method_num_params(sCLMethod* method)$/
get_method_with_type_params_and_param_initializer_on_super_classes	src/klass_ctime.c	/^sCLMethod* get_method_with_type_params_and_param_i/
get_method_with_type_params_on_super_classes	src/klass_ctime.c	/^sCLMethod* get_method_with_type_params_on_super_cl/
get_module	src/module.c	/^sCLModule* get_module(char* namespace, char* name)/
get_module_body	src/module.c	/^char* get_module_body(sCLModule* module)$/
get_module_from_cl_type	src/module.c	/^sCLModule* get_module_from_cl_type(sCLClass* klass/
get_module_from_real_module_name	src/module.c	/^static sCLModule* get_module_from_real_module_name/
get_native_class_initializar	src/klass.c	/^static fNativeClassInitializar get_native_class_in/
get_native_method	src/klass.c	/^static fNativeMethod get_native_method(char* path)/
get_number	src/parse.c	/^static BOOL get_number(char* buf, size_t buf_size,/
get_object_from_mvalue	src/heap.c	/^CLObject get_object_from_mvalue(MVALUE mvalue)$/
get_oct_number	src/parse.c	/^static BOOL get_oct_number(char* buf, size_t buf_s/
get_one_bool_object_from_stack	src/vm.c	/^static BOOL get_one_bool_object_from_stack(CLObjec/
get_one_byte_object_from_stack	src/vm.c	/^static BOOL get_one_byte_object_from_stack(CLObjec/
get_one_int_object_from_stack	src/vm.c	/^static BOOL get_one_int_object_from_stack(CLObject/
get_one_long_object_from_stack	src/vm.c	/^static BOOL get_one_long_object_from_stack(CLObjec/
get_one_short_object_from_stack	src/vm.c	/^static BOOL get_one_short_object_from_stack(CLObje/
get_one_uint_object_from_stack	src/vm.c	/^static BOOL get_one_uint_object_from_stack(CLObjec/
get_params	src/parse.c	/^static BOOL get_params(sParserInfo* info, unsigned/
get_parent_var_num	src/node.c	/^static int get_parent_var_num(sNodeBlock* block)$/
get_result_type_of_method	src/klass_ctime.c	/^ALLOC sCLNodeType* get_result_type_of_method(sCLNo/
get_static_fields_num	src/klass.c	/^int get_static_fields_num(sCLClass* klass)$/
get_static_fields_num_including_super_class	src/klass.c	/^static int get_static_fields_num_including_super_c/
get_static_fields_num_on_super_class	src/klass_ctime.c	/^static int get_static_fields_num_on_super_class(sC/
get_string_and_int_object_from_stack	src/vm.c	/^static BOOL get_string_and_int_object_from_stack(C/
get_sum_of_fields_on_super_clasess	src/klass_ctime.c	/^static int get_sum_of_fields_on_super_clasess(sCLC/
get_sum_of_fields_on_super_clasess_without_class_fields	src/klass_ctime.c	/^static int get_sum_of_fields_on_super_clasess_with/
get_sum_of_fields_on_super_classes	src/klass.c	/^static int get_sum_of_fields_on_super_classes(sCLC/
get_sum_of_parent_var_num	src/vtable.c	/^static int get_sum_of_parent_var_num(sVarTable* it/
get_two_bool_object_from_stack	src/vm.c	/^static BOOL get_two_bool_object_from_stack(CLObjec/
get_two_byte_object_from_stack	src/vm.c	/^static BOOL get_two_byte_object_from_stack(CLObjec/
get_two_bytes_object_from_stack	src/vm.c	/^static BOOL get_two_bytes_object_from_stack(CLObje/
get_two_double_object_from_stack	src/vm.c	/^static BOOL get_two_double_object_from_stack(CLObj/
get_two_float_object_from_stack	src/vm.c	/^static BOOL get_two_float_object_from_stack(CLObje/
get_two_int_object_from_stack	src/vm.c	/^static BOOL get_two_int_object_from_stack(CLObject/
get_two_long_object_from_stack	src/vm.c	/^static BOOL get_two_long_object_from_stack(CLObjec/
get_two_short_object_from_stack	src/vm.c	/^static BOOL get_two_short_object_from_stack(CLObje/
get_two_string_object_from_stack	src/vm.c	/^static BOOL get_two_string_object_from_stack(CLObj/
get_two_uint_object_from_stack	src/vm.c	/^static BOOL get_two_uint_object_from_stack(CLObjec/
get_type_from_mvalue	src/vm.c	/^CLObject get_type_from_mvalue(MVALUE* mvalue, sVMI/
get_type_object_from_cl_type	src/obj_type_object.c	/^CLObject get_type_object_from_cl_type(sCLType* cl_/
get_type_object_from_cl_type_core	src/obj_type_object.c	/^static CLObject get_type_object_from_cl_type_core(/
get_type_patterns_from_generics_param_type	src/node_type.c	/^BOOL get_type_patterns_from_generics_param_type(sC/
get_value_with_size	src/c_to_clover.c	/^unsigned long get_value_with_size(size_t size, CLO/
get_var_names	src/interpreter.c	/^static char** get_var_names(int* num_var_names)$/
get_variable_from_this_table_only_with_index	src/vtable.c	/^sVar* get_variable_from_this_table_only_with_index/
heap_final	src/heap.c	/^void heap_final()$/
heap_init	src/heap.c	/^void heap_init(int heap_size, int size_hadles)$/
inc_stack_num	src/node.c	/^static void inc_stack_num(int* stack_num, int* max/
include_file	src/compiler.c	/^static BOOL include_file(sParserInfo* info, int pa/
include_module	src/compiler.c	/^static BOOL include_module(sCLModule* module, sPar/
increment_and_decrement	src/parse.c	/^static BOOL increment_and_decrement(enum eOperand /
init_block_vtable	src/vtable.c	/^sVarTable* init_block_vtable(sVarTable* lv_table)$/
init_generics_type_pattern	src/klass_ctime.c	/^static void init_generics_type_pattern()$/
init_method	src/compiler.c	/^static BOOL init_method(sParserInfo* info, int par/
init_method_block_vtable	src/vtable.c	/^sVarTable* init_method_block_vtable(sVarTable* lv_/
init_node_blocks	src/node_tree.c	/^static void init_node_blocks()$/
init_node_types	src/node_type.c	/^void init_node_types()$/
init_nodes	src/node_tree.c	/^void init_nodes()$/
init_var_table	src/vtable.c	/^sVarTable* init_var_table()$/
init_vtable	src/vtable.c	/^void init_vtable()$/
initialize_hidden_class_method_and_flags	src/klass.c	/^static void initialize_hidden_class_method_and_fla/
initialize_hidden_class_method_of_anonymous	src/obj_anonymous.c	/^void initialize_hidden_class_method_of_anonymous(s/
initialize_hidden_class_method_of_array	src/obj_array.c	/^void initialize_hidden_class_method_of_array(sCLCl/
initialize_hidden_class_method_of_block	src/obj_block.c	/^void initialize_hidden_class_method_of_block(sCLCl/
initialize_hidden_class_method_of_bytes	src/obj_bytes.c	/^void initialize_hidden_class_method_of_bytes(sCLCl/
initialize_hidden_class_method_of_class_object	src/obj_class_object.c	/^void initialize_hidden_class_method_of_class_objec/
initialize_hidden_class_method_of_hash	src/obj_hash.c	/^void initialize_hidden_class_method_of_hash(sCLCla/
initialize_hidden_class_method_of_immediate_bool	src/obj_bool.c	/^void initialize_hidden_class_method_of_immediate_b/
initialize_hidden_class_method_of_immediate_byte	src/obj_byte.c	/^void initialize_hidden_class_method_of_immediate_b/
initialize_hidden_class_method_of_immediate_char	src/obj_char.c	/^void initialize_hidden_class_method_of_immediate_c/
initialize_hidden_class_method_of_immediate_double	src/obj_double.c	/^void initialize_hidden_class_method_of_immediate_d/
initialize_hidden_class_method_of_immediate_float	src/obj_float.c	/^void initialize_hidden_class_method_of_immediate_f/
initialize_hidden_class_method_of_immediate_int	src/obj_int.c	/^void initialize_hidden_class_method_of_immediate_i/
initialize_hidden_class_method_of_immediate_long	src/obj_long.c	/^void initialize_hidden_class_method_of_immediate_l/
initialize_hidden_class_method_of_immediate_null	src/obj_null.c	/^void initialize_hidden_class_method_of_immediate_n/
initialize_hidden_class_method_of_immediate_short	src/obj_short.c	/^void initialize_hidden_class_method_of_immediate_s/
initialize_hidden_class_method_of_immediate_uint	src/obj_uint.c	/^void initialize_hidden_class_method_of_immediate_u/
initialize_hidden_class_method_of_immediate_void	src/obj_void.c	/^void initialize_hidden_class_method_of_immediate_v/
initialize_hidden_class_method_of_method_object	src/obj_method.c	/^void initialize_hidden_class_method_of_method_obje/
initialize_hidden_class_method_of_mutex	src/obj_mutex.c	/^void initialize_hidden_class_method_of_mutex(sCLCl/
initialize_hidden_class_method_of_oniguruma_regex	src/obj_oniguruma_regex.c	/^void initialize_hidden_class_method_of_oniguruma_r/
initialize_hidden_class_method_of_pointer	src/obj_pointer.c	/^void initialize_hidden_class_method_of_pointer(sCL/
initialize_hidden_class_method_of_range	src/obj_range.c	/^void initialize_hidden_class_method_of_range(sCLCl/
initialize_hidden_class_method_of_string	src/obj_string.c	/^void initialize_hidden_class_method_of_string(sCLC/
initialize_hidden_class_method_of_thread	src/obj_thread.c	/^void initialize_hidden_class_method_of_thread(sCLC/
initialize_hidden_class_method_of_type	src/obj_type_object.c	/^void initialize_hidden_class_method_of_type(sCLCla/
initialize_hidden_class_method_of_user_object	src/obj_user_object.c	/^void initialize_hidden_class_method_of_user_object/
int_setValue	src/obj_int.c	/^BOOL int_setValue(MVALUE** stack_ptr, MVALUE* lvar/
int_toByte	src/obj_int.c	/^BOOL int_toByte(MVALUE** stack_ptr, MVALUE* lvar, /
int_toChar	src/obj_int.c	/^BOOL int_toChar(MVALUE** stack_ptr, MVALUE* lvar, /
int_toDouble	src/obj_int.c	/^BOOL int_toDouble(MVALUE** stack_ptr, MVALUE* lvar/
int_toFloat	src/obj_int.c	/^BOOL int_toFloat(MVALUE** stack_ptr, MVALUE* lvar,/
int_toLong	src/obj_int.c	/^BOOL int_toLong(MVALUE** stack_ptr, MVALUE* lvar, /
int_toShort	src/obj_int.c	/^BOOL int_toShort(MVALUE** stack_ptr, MVALUE* lvar,/
int_toString	src/obj_int.c	/^BOOL int_toString(MVALUE** stack_ptr, MVALUE* lvar/
int_toUInt	src/obj_int.c	/^BOOL int_toUInt(MVALUE** stack_ptr, MVALUE* lvar, /
is_abstract_method_implemented	src/klass_ctime.c	/^static BOOL is_abstract_method_implemented(sCLNode/
is_already_added_on_loaded_class_table	src/load_class.c	/^static BOOL is_already_added_on_loaded_class_table/
is_already_contained_on_dependeces	src/klass_ctime.c	/^static BOOL is_already_contained_on_dependeces(sCL/
is_called_from_inside	src/node.c	/^static BOOL is_called_from_inside(sCLClass* real_c/
is_dynamic_typing_class	src/klass.c	/^BOOL is_dynamic_typing_class(sCLClass* klass)$/
is_generics_param_class	src/klass.c	/^BOOL is_generics_param_class(sCLClass* klass)$/
is_generics_param_type	src/klass_ctime.c	/^BOOL is_generics_param_type(sCLNodeType* node_type/
is_method_exception_class	src/klass_ctime.c	/^BOOL is_method_exception_class(sCLClass* klass, sC/
is_parent_class	src/klass_ctime.c	/^BOOL is_parent_class(sCLClass* klass1, sCLClass* k/
is_parent_class_by_name	src/obj_enum.c	/^static BOOL is_parent_class_by_name(sCLClass* klas/
is_parent_native_class	src/klass_ctime.c	/^BOOL is_parent_native_class(sCLClass* klass1)$/
is_this_class_entried	src/alias.c	/^static BOOL is_this_class_entried(char* real_class/
is_this_clone_method	src/klass_ctime.c	/^static BOOL is_this_clone_method(sCLClass* klass, /
is_this_completion_method	src/klass_ctime.c	/^static BOOL is_this_completion_method(sCLClass* kl/
is_this_completion_method_of_class_method	src/klass_ctime.c	/^static BOOL is_this_completion_method_of_class_met/
is_this_giving_type_parametor	src/klass_ctime.c	/^BOOL is_this_giving_type_parametor(sCLNodeType* ca/
is_this_initialize_method	src/klass_ctime.c	/^static BOOL is_this_initialize_method(sCLClass* kl/
is_this_method_missing_method	src/klass_ctime.c	/^static BOOL is_this_method_missing_method(sCLClass/
is_this_method_missing_method_of_class_method	src/klass_ctime.c	/^static BOOL is_this_method_missing_method_of_class/
is_valid_class_pointer	src/klass.c	/^BOOL is_valid_class_pointer(void* class_pointer)$/
is_valid_object	src/heap.c	/^BOOL is_valid_object(CLObject obj)$/
items_object_size	src/obj_array.c	/^static unsigned int items_object_size(int mvalue_n/
line_buffer_from_head_to_cursor_point	src/interpreter.c	/^static ALLOC char* line_buffer_from_head_to_cursor/
load_class_final	src/load_class.c	/^void load_class_final()$/
load_class_init	src/load_class.c	/^void load_class_init()$/
load_code	src/interface.c	/^static BOOL load_code(sByteCode* code, sConst* con/
load_module_from_file	src/module.c	/^static BOOL load_module_from_file(ALLOC sCLModule*/
load_type_object_core	src/obj_type_object.c	/^static BOOL load_type_object_core(CLObject object,/
load_type_object_from_cl_type_core	src/obj_type_object.c	/^static void load_type_object_from_cl_type_core(CLO/
long_setValue	src/obj_long.c	/^BOOL long_setValue(MVALUE** stack_ptr, MVALUE* lva/
long_toByte	src/obj_long.c	/^BOOL long_toByte(MVALUE** stack_ptr, MVALUE* lvar,/
long_toChar	src/obj_long.c	/^BOOL long_toChar(MVALUE** stack_ptr, MVALUE* lvar,/
long_toDouble	src/obj_long.c	/^BOOL long_toDouble(MVALUE** stack_ptr, MVALUE* lva/
long_toFloat	src/obj_long.c	/^BOOL long_toFloat(MVALUE** stack_ptr, MVALUE* lvar/
long_toInt	src/obj_long.c	/^BOOL long_toInt(MVALUE** stack_ptr, MVALUE* lvar, /
long_toShort	src/obj_long.c	/^BOOL long_toShort(MVALUE** stack_ptr, MVALUE* lvar/
long_toString	src/obj_long.c	/^BOOL long_toString(MVALUE** stack_ptr, MVALUE* lva/
long_toUInt	src/obj_long.c	/^BOOL long_toUInt(MVALUE** stack_ptr, MVALUE* lvar,/
make_block_result	src/compile.c	/^void make_block_result(sCLNodeType** result_type)$/
make_group_strings_from_region	src/obj_string.c	/^static BOOL make_group_strings_from_region(OnigReg/
make_group_strings_with_range_from_region	src/obj_string.c	/^static BOOL make_group_strings_with_range_from_reg/
make_substr_from_string_object	src/obj_string.c	/^static CLObject make_substr_from_string_object(CLO/
make_super_class_list	src/klass_ctime.c	/^BOOL make_super_class_list(sCLClass* klass)$/
mark	src/heap.c	/^static void mark(unsigned char* mark_flg, CLObject/
mark_array_object	src/obj_array.c	/^static void mark_array_object(CLObject object, uns/
mark_block_object	src/obj_block.c	/^static void mark_block_object(CLObject object, uns/
mark_class_fields	src/klass.c	/^void mark_class_fields(unsigned char* mark_flg)$/
mark_class_fields_of_class	src/klass.c	/^static void mark_class_fields_of_class(sCLClass* k/
mark_class_fields_of_class_and_super_class	src/klass.c	/^static void mark_class_fields_of_class_and_super_c/
mark_class_object	src/obj_class_object.c	/^static void mark_class_object(CLObject object, uns/
mark_hash_object	src/obj_hash.c	/^static void mark_hash_object(CLObject object, unsi/
mark_object	src/heap.c	/^void mark_object(CLObject obj, unsigned char* mark/
mark_range_object	src/obj_range.c	/^static void mark_range_object(CLObject object, uns/
mark_regex_object	src/obj_oniguruma_regex.c	/^static void mark_regex_object(CLObject object, uns/
mark_string_object	src/obj_string.c	/^static void mark_string_object(CLObject object, un/
mark_type_object	src/obj_type_object.c	/^static void mark_type_object(CLObject object, unsi/
mark_type_object_core	src/obj_type_object.c	/^static void mark_type_object_core(CLObject object,/
mark_user_object	src/obj_user_object.c	/^static void mark_user_object(CLObject object, unsi/
method	src/klass_ctime.c	/^\/\/ result: (NULL) not found the method (sCLMetho/
method_not_found	src/node.c	/^static BOOL method_not_found(sCLNodeType** type_, /
methods_and_fields_and_alias	src/compiler.c	/^static BOOL methods_and_fields_and_alias(sParserIn/
mgetmaxx	src/interpreter.c	/^static int mgetmaxx()$/
mgetmaxy	src/interpreter.c	/^static int mgetmaxy()$/
module_final	src/module.c	/^void module_final()$/
module_init	src/module.c	/^void module_init()$/
my_complete_internal	src/interpreter.c	/^static int my_complete_internal(int count, int key/
new_generics_type_pattern	src/klass_ctime.c	/^static sGenericsParamPattern* new_generics_type_pa/
new_vm_mutex	src/obj_thread.c	/^void new_vm_mutex()$/
node_expression	src/parse.c	/^BOOL node_expression(unsigned int* node, sParserIn/
node_expression_without_comma	src/parse.c	/^BOOL node_expression_without_comma(unsigned int* n/
node_type_to_buffer	src/node_type.c	/^ALLOC char* node_type_to_buffer(sCLNodeType* node_/
null_check_for_eq	src/vm.c	/^static BOOL null_check_for_eq(sVMInfo* info)$/
null_check_for_neq	src/vm.c	/^static BOOL null_check_for_neq(sVMInfo* info)$/
num_loaded_class	src/load_class.c	/^int num_loaded_class()$/
object_size	src/obj_array.c	/^static unsigned int object_size()$/
object_to_ptr	src/heap.c	/^void* object_to_ptr(CLObject obj) $/
on_complete	src/interpreter.c	/^char* on_complete(const char* text, int a)$/
operand_posibility	src/node_type.c	/^BOOL operand_posibility(sCLNodeType* left_type, sC/
operand_posibility_with_class_name	src/node_type.c	/^BOOL operand_posibility_with_class_name(sCLNodeTyp/
output_exception_message	src/vm.c	/^void output_exception_message(CLObject exception_o/
output_exception_message_with_info	src/vm.c	/^static void output_exception_message_with_info(sVM/
output_result_for_interpreter	src/vm.c	/^static BOOL output_result_for_interpreter(sVMInfo*/
output_var_table	src/parser.c	/^static void output_var_table(sVarTable* table)$/
params_of_cl_type_to_params_of_node_type	src/node.c	/^static BOOL params_of_cl_type_to_params_of_node_ty/
parse	src/compiler.c	/^static BOOL parse(sParserInfo* info, int parse_pha/
parse_alias	src/compiler.c	/^static BOOL parse_alias(sParserInfo* info, int par/
parse_annotation	src/parse.c	/^void parse_annotation(char** p, char* sname, int* /
parse_block	src/compile.c	/^BOOL parse_block(unsigned int* block_id, char** p,/
parse_block_params	src/parse.c	/^static BOOL parse_block_params(sCLNodeType** class/
parse_class	src/compiler.c	/^static BOOL parse_class(sParserInfo* info, BOOL pr/
parse_class_name	src/interpreter.c	/^static BOOL parse_class_name(char** p, sCLClass** /
parse_constructor	src/compiler.c	/^static BOOL parse_constructor(sParserInfo* info, s/
parse_declaration_of_method_block	src/compiler.c	/^static BOOL parse_declaration_of_method_block(sPar/
parse_enum	src/compiler.c	/^static BOOL parse_enum(sParserInfo* info, BOOL pri/
parse_enum_element	src/compiler.c	/^static BOOL parse_enum_element(sParserInfo* info, /
parse_generics_param_types	src/compiler.c	/^static BOOL parse_generics_param_types(sParserInfo/
parse_generics_types_name	src/parse.c	/^BOOL parse_generics_types_name(char** p, char* sna/
parse_method	src/compiler.c	/^static BOOL parse_method(sParserInfo* info, BOOL s/
parse_module	src/compiler.c	/^static BOOL parse_module(sParserInfo* info, int pa/
parse_module_name	src/parse.c	/^BOOL parse_module_name(sCLModule** result, char** /
parse_namespace	src/compiler.c	/^static BOOL parse_namespace(sParserInfo* info, int/
parse_namespace_and_class_and_generics_type_without_generics_check	src/parse.c	/^BOOL parse_namespace_and_class_and_generics_type_w/
parse_params	src/parse.c	/^BOOL parse_params(sCLNodeType** class_params, int*/
parse_params_with_initializer	src/parse.c	/^BOOL parse_params_with_initializer(sCLNodeType** c/
parse_quote	src/parse.c	/^static void parse_quote(char** p, int* sline, BOOL/
parse_throws	src/compiler.c	/^static BOOL parse_throws(sParserInfo* info, sCLCla/
parse_word	src/parse.c	/^BOOL parse_word(char* buf, int buf_size, char** p,/
parser_err_msg	src/errmsg.c	/^void parser_err_msg(char* msg, char* sname, int sl/
parser_err_msg_format	src/errmsg.c	/^void parser_err_msg_format(char* sname, int sline,/
parser_err_msg_without_line	src/errmsg.c	/^void parser_err_msg_without_line(char* msg, ...)$/
parser_get_class_type	src/parser.c	/^static BOOL parser_get_class_type(char* sname) $/
parser_get_type	src/parser.c	/^static BOOL parser_get_type(char* sname) $/
parser_get_variable_names	src/parser.c	/^static BOOL parser_get_variable_names(char* sname)/
parser_inputing_path	src/parser.c	/^static BOOL parser_inputing_path(char* sname) $/
parser_operator_method_name	src/compiler.c	/^static void parser_operator_method_name(char* name/
pointer_backward	src/obj_pointer.c	/^BOOL pointer_backward(MVALUE** stack_ptr, MVALUE* /
pointer_equals	src/obj_pointer.c	/^BOOL pointer_equals(MVALUE** stack_ptr, MVALUE* lv/
pointer_forward	src/obj_pointer.c	/^BOOL pointer_forward(MVALUE** stack_ptr, MVALUE* l/
pointer_getByte	src/obj_pointer.c	/^BOOL pointer_getByte(MVALUE** stack_ptr, MVALUE* l/
pointer_getLong	src/obj_pointer.c	/^BOOL pointer_getLong(MVALUE** stack_ptr, MVALUE* l/
pointer_getShort	src/obj_pointer.c	/^BOOL pointer_getShort(MVALUE** stack_ptr, MVALUE* /
pointer_getUInt	src/obj_pointer.c	/^BOOL pointer_getUInt(MVALUE** stack_ptr, MVALUE* l/
pointer_setValue	src/obj_pointer.c	/^BOOL pointer_setValue(MVALUE** stack_ptr, MVALUE* /
pointer_toString	src/obj_pointer.c	/^BOOL pointer_toString(MVALUE** stack_ptr, MVALUE* /
pop_object	src/vm.c	/^CLObject pop_object(sVMInfo* info)$/
pop_object_except_top	src/vm.c	/^void pop_object_except_top(sVMInfo* info)$/
pop_object_n	src/vm.c	/^void pop_object_n(sVMInfo* info, int n)$/
pop_vminfo	src/vm.c	/^static void pop_vminfo(sVMInfo* info)$/
postposition_operator	src/parse.c	/^static BOOL postposition_operator(unsigned int* no/
preprocess_source	src/preprocessor.c	/^static BOOL preprocess_source(char* sname, char* o/
preprocessor	src/preprocessor.c	/^static BOOL preprocessor(sBuf* source, sBuf* sourc/
preprocessor_final	src/preprocessor.c	/^static void preprocessor_final()$/
preprocessor_init	src/preprocessor.c	/^static void preprocessor_init()$/
push_object	src/vm.c	/^void push_object(CLObject object, sVMInfo* info)$/
push_vminfo	src/vm.c	/^void push_vminfo(sVMInfo* info)$/
put_fun_to_hash_for_native_class	src/klass.c	/^static void put_fun_to_hash_for_native_class(char*/
put_fun_to_hash_for_native_method	src/klass.c	/^static void put_fun_to_hash_for_native_method(char/
put_to_array	src/obj_array.c	/^static void put_to_array(CLObject self, int index,/
rehash	src/obj_hash.c	/^static BOOL rehash(CLObject self, sVMInfo* info, i/
release_entry	src/debug.c	/^void release_entry(void* memory, const char* file_/
remove_class_from_class_table	src/klass.c	/^static void remove_class_from_class_table(char* na/
remove_module_from_table	src/module.c	/^static void remove_module_from_table(char* namespa/
remove_object	src/vm.c	/^void remove_object(sVMInfo* info, int number)$/
remove_object2	src/vm.c	/^void remove_object2(CLObject obj, sVMInfo* info)$/
replace_bytes	src/obj_bytes.c	/^void replace_bytes(CLObject bytes, char* buf, int /
reserved_words	src/parse.c	/^static BOOL reserved_words(BOOL* processed, char* /
resizse_vmm	src/klass_ctime.c	/^static BOOL resizse_vmm(sCLClass* klass)$/
run_class_fields_initializer	src/klass.c	/^static BOOL run_class_fields_initializer(sCLClass*/
run_fields_initializer	src/klass.c	/^BOOL run_fields_initializer(CLObject object, sCLCl/
run_parser	src/interpreter.c	/^static BOOL run_parser(char* parser_command, char*/
sAliasItem	src/alias.c	/^struct sAliasItem {$/
sBuf_append	src/buffer.c	/^void sBuf_append(sBuf* self, void* str, size_t siz/
sBuf_append_char	src/buffer.c	/^void sBuf_append_char(sBuf* self, char c)$/
sBuf_append_str	src/buffer.c	/^void sBuf_append_str(sBuf* self, char* str)$/
sBuf_init	src/buffer.c	/^void sBuf_init(sBuf* self)$/
sBuf_show	src/buffer.c	/^void sBuf_show(sBuf* self)$/
sByteCode_append	src/buffer.c	/^static void sByteCode_append(sByteCode* self, int /
sByteCode_free	src/buffer.c	/^void sByteCode_free(sByteCode* self)$/
sByteCode_init	src/buffer.c	/^void sByteCode_init(sByteCode* self)$/
sCLHeapManager	src/heap.c	/^typedef struct sCLHeapManager_ sCLHeapManager;$/
sCLHeapManager_	src/heap.c	/^struct sCLHeapManager_ {$/
sCLNodeGenericsParamTypes	src/compiler.c	/^typedef struct sCLNodeGenericsParamTypesStruct sCL/
sCLNodeGenericsParamTypesStruct	src/compiler.c	/^struct sCLNodeGenericsParamTypesStruct {$/
sConst_append	src/buffer.c	/^static int sConst_append(sConst* self, void* data,/
sConst_free	src/buffer.c	/^void sConst_free(sConst* self)$/
sConst_init	src/buffer.c	/^void sConst_init(sConst* self)$/
sEntriedClassItem	src/alias.c	/^struct sEntriedClassItem {$/
sHandle	src/heap.c	/^typedef struct sHandle_ sHandle;$/
sHandle_	src/heap.c	/^struct sHandle_ {$/
sNativeClass	src/klass.c	/^typedef struct sNativeClassStruct sNativeClass;$/
sNativeClassHashItem	src/klass.c	/^struct sNativeClassHashItem {$/
sNativeClassStruct	src/klass.c	/^struct sNativeClassStruct {$/
sNativeMethod	src/klass.c	/^typedef struct sNativeMethodStruct sNativeMethod;$/
sNativeMethodHashItem	src/klass.c	/^struct sNativeMethodHashItem {$/
sNativeMethodStruct	src/klass.c	/^struct sNativeMethodStruct {$/
sNodeTree_create_array	src/node_tree.c	/^unsigned int sNodeTree_create_array(unsigned int l/
sNodeTree_create_block	src/node_tree.c	/^unsigned int sNodeTree_create_block(sCLNodeType* t/
sNodeTree_create_break	src/node_tree.c	/^unsigned int sNodeTree_create_break(sCLNodeType* k/
sNodeTree_create_byte_value	src/node_tree.c	/^unsigned int sNodeTree_create_byte_value(unsigned /
sNodeTree_create_bytes_value	src/node_tree.c	/^unsigned int sNodeTree_create_bytes_value(MANAGED /
sNodeTree_create_call_block	src/node_tree.c	/^unsigned int sNodeTree_create_call_block(char* var/
sNodeTree_create_character_value	src/node_tree.c	/^unsigned int sNodeTree_create_character_value(wcha/
sNodeTree_create_class_field	src/node_tree.c	/^unsigned int sNodeTree_create_class_field(char* va/
sNodeTree_create_class_method_call	src/node_tree.c	/^unsigned int sNodeTree_create_class_method_call(ch/
sNodeTree_create_class_name	src/node_tree.c	/^unsigned int sNodeTree_create_class_name(sCLNodeTy/
sNodeTree_create_continue	src/node_tree.c	/^unsigned int sNodeTree_create_continue()$/
sNodeTree_create_define_var	src/node_tree.c	/^unsigned int sNodeTree_create_define_var(char* var/
sNodeTree_create_do	src/node_tree.c	/^unsigned int sNodeTree_create_do(unsigned int cond/
sNodeTree_create_dvalue	src/node_tree.c	/^unsigned int sNodeTree_create_dvalue(double dvalue/
sNodeTree_create_false	src/node_tree.c	/^unsigned int sNodeTree_create_false()$/
sNodeTree_create_fields	src/node_tree.c	/^unsigned int sNodeTree_create_fields(char* name, u/
sNodeTree_create_for	src/node_tree.c	/^unsigned int sNodeTree_create_for(unsigned int con/
sNodeTree_create_fvalue	src/node_tree.c	/^unsigned int sNodeTree_create_fvalue(float fvalue,/
sNodeTree_create_hash	src/node_tree.c	/^unsigned int sNodeTree_create_hash(unsigned int le/
sNodeTree_create_if	src/node_tree.c	/^unsigned int sNodeTree_create_if(unsigned int if_c/
sNodeTree_create_inherit	src/node_tree.c	/^unsigned int sNodeTree_create_inherit(unsigned int/
sNodeTree_create_long_value	src/node_tree.c	/^unsigned int sNodeTree_create_long_value(unsigned /
sNodeTree_create_method_call	src/node_tree.c	/^unsigned int sNodeTree_create_method_call(char* va/
sNodeTree_create_new_expression	src/node_tree.c	/^unsigned int sNodeTree_create_new_expression(sCLNo/
sNodeTree_create_null	src/node_tree.c	/^unsigned int sNodeTree_create_null()$/
sNodeTree_create_operand	src/node_tree.c	/^unsigned int sNodeTree_create_operand(enum eOperan/
sNodeTree_create_param	src/node_tree.c	/^unsigned int sNodeTree_create_param(unsigned int l/
sNodeTree_create_path_value	src/node_tree.c	/^unsigned int sNodeTree_create_path_value(MANAGED c/
sNodeTree_create_range	src/node_tree.c	/^unsigned int sNodeTree_create_range(unsigned int h/
sNodeTree_create_regex	src/node_tree.c	/^unsigned int sNodeTree_create_regex(char* regex, B/
sNodeTree_create_return	src/node_tree.c	/^unsigned int sNodeTree_create_return(sCLNodeType* /
sNodeTree_create_revert	src/node_tree.c	/^unsigned int sNodeTree_create_revert(sCLNodeType* /
sNodeTree_create_short_value	src/node_tree.c	/^unsigned int sNodeTree_create_short_value(unsigned/
sNodeTree_create_string_value	src/node_tree.c	/^unsigned int sNodeTree_create_string_value(MANAGED/
sNodeTree_create_super	src/node_tree.c	/^unsigned int sNodeTree_create_super(unsigned int l/
sNodeTree_create_throw	src/node_tree.c	/^unsigned int sNodeTree_create_throw(sCLNodeType* k/
sNodeTree_create_true	src/node_tree.c	/^unsigned int sNodeTree_create_true()$/
sNodeTree_create_try	src/node_tree.c	/^unsigned int sNodeTree_create_try(unsigned int try/
sNodeTree_create_tuple	src/node_tree.c	/^unsigned int sNodeTree_create_tuple(unsigned int l/
sNodeTree_create_uint_value	src/node_tree.c	/^unsigned int sNodeTree_create_uint_value(unsigned /
sNodeTree_create_value	src/node_tree.c	/^unsigned int sNodeTree_create_value(int value, uns/
sNodeTree_create_var	src/node_tree.c	/^unsigned int sNodeTree_create_var(char* var_name, /
sNodeTree_create_while	src/node_tree.c	/^unsigned int sNodeTree_create_while(unsigned int c/
sPreprocessorFunction	src/preprocessor.c	/^typedef struct sPreprocessorFunctionStruct sPrepro/
sPreprocessorFunctionStruct	src/preprocessor.c	/^struct sPreprocessorFunctionStruct {$/
sThreadFuncArg	src/obj_thread.c	/^struct sThreadFuncArg {$/
save_all_modified_classes	src/klass_ctime.c	/^void save_all_modified_classes()$/
save_all_modified_modules	src/module.c	/^void save_all_modified_modules()$/
save_class	src/klass_ctime.c	/^static BOOL save_class(sCLClass* klass)$/
save_code	src/compiler.c	/^static BOOL save_code(sByteCode* code, sConst* con/
save_module_to_file	src/module.c	/^static BOOL save_module_to_file(sCLModule* self)$/
search_for_method_of_generics_param_type	src/node.c	/^static BOOL search_for_method_of_generics_param_ty/
search_for_method_of_inner_generics_param_class	src/node.c	/^static BOOL search_for_method_of_inner_generics_pa/
search_for_method_of_non_generics	src/node.c	/^static BOOL search_for_method_of_non_generics(sCLC/
search_for_method_of_outside_generics_param_class	src/node.c	/^static BOOL search_for_method_of_outside_generics_/
set_class_version	src/klass_ctime.c	/^BOOL set_class_version(sCLClass* klass, char versi/
set_env_vars	src/vm.c	/^static void set_env_vars()$/
set_field_index	src/klass_ctime.c	/^void set_field_index(sCLClass* klass, char* name, /
set_flag_to_entried_class	src/alias.c	/^static BOOL set_flag_to_entried_class(char* real_c/
set_signal	src/vm.c	/^static void set_signal()$/
set_signal_for_interpreter	src/interpreter.c	/^static void set_signal_for_interpreter() $/
set_special_class_to_global_pointer_of_type	src/klass_ctime.c	/^static void set_special_class_to_global_pointer_of/
short_setValue	src/obj_short.c	/^BOOL short_setValue(MVALUE** stack_ptr, MVALUE* lv/
short_toInt	src/obj_short.c	/^BOOL short_toInt(MVALUE** stack_ptr, MVALUE* lvar,/
short_toLong	src/obj_short.c	/^BOOL short_toLong(MVALUE** stack_ptr, MVALUE* lvar/
show_all_method	src/klass_ctime.c	/^void show_all_method(sCLClass* klass, char* method/
show_all_method_for_errmsg	src/errmsg.c	/^void show_all_method_for_errmsg(sCLClass* klass, c/
show_array_object_to_stdout	src/obj_array.c	/^static void show_array_object_to_stdout(CLObject o/
show_buffer	src/buffer.c	/^void show_buffer(char* buf, int len)$/
show_caller_method	src/node.c	/^static void show_caller_method(char* method_name, /
show_cl_type	src/type.c	/^void show_cl_type(sCLType* self, sCLClass* klass, /
show_class	src/klass_ctime.c	/^void show_class(sCLClass* klass)$/
show_class_list_on_compile_time	src/klass_ctime.c	/^void show_class_list_on_compile_time()$/
show_constants	src/buffer.c	/^void show_constants(sConst* constant)$/
show_generics_pattern	src/klass_ctime.c	/^void show_generics_pattern(sGenericsParamPattern* /
show_heap	src/heap.c	/^void show_heap(sVMInfo* info)$/
show_method	src/klass_ctime.c	/^void show_method(sCLClass* klass, sCLMethod* metho/
show_method_for_errmsg	src/errmsg.c	/^void show_method_for_errmsg(sCLClass* klass, sCLMe/
show_mutex_object	src/obj_mutex.c	/^static void show_mutex_object(sVMInfo* info, CLObj/
show_node	src/node_tree.c	/^void show_node(unsigned int node)$/
show_node_type	src/klass_ctime.c	/^void show_node_type(sCLNodeType* node_type)$/
show_node_type_for_errmsg	src/errmsg.c	/^void show_node_type_for_errmsg(sCLNodeType* node_t/
show_object_value	src/vm.c	/^void show_object_value(sVMInfo* info, CLObject obj/
show_stack	src/vm.c	/^void show_stack(sVMInfo* info, MVALUE* top_of_stac/
show_string_object	src/obj_string.c	/^static void show_string_object(sVMInfo* info, CLOb/
show_thread_object	src/obj_thread.c	/^static void show_thread_object(sVMInfo* info, CLOb/
show_type	src/klass_ctime.c	/^void show_type(sCLClass* klass, sCLType* type)$/
show_type_for_errmsg	src/errmsg.c	/^void show_type_for_errmsg(sCLClass* klass, sCLType/
show_type_object2	src/obj_type_object.c	/^static void show_type_object2(sVMInfo* info, CLObj/
show_user_object	src/obj_user_object.c	/^static void show_user_object(sVMInfo* info, CLObje/
show_var_table	src/vtable.c	/^void show_var_table(sVarTable* var_table)$/
show_var_table_with_parent	src/vtable.c	/^void show_var_table_with_parent(sVarTable* var_tab/
sig_int	src/interpreter.c	/^void sig_int()$/
skip_block	src/compiler.c	/^static BOOL skip_block(char** p, char* sname, int*/
skip_class_definition	src/compiler.c	/^static BOOL skip_class_definition(sParserInfo* inf/
skip_namespace_and_class_and_generics_type	src/compiler.c	/^static BOOL skip_namespace_and_class_and_generics_/
skip_spaces_and_lf	src/parse.c	/^void skip_spaces_and_lf(char** p, int* sline)$/
skip_spaces_at_type_object	src/obj_type_object.c	/^static void skip_spaces_at_type_object(char** p)$/
solve_generics_types_for_node_type	src/node_type.c	/^BOOL solve_generics_types_for_node_type(sCLNodeTyp/
solve_generics_types_of_class	src/klass.c	/^static BOOL solve_generics_types_of_class(sCLClass/
solve_generics_types_of_type_object	src/obj_type_object.c	/^BOOL solve_generics_types_of_type_object(CLObject /
solve_generics_types_of_type_object_core	src/obj_type_object.c	/^static int solve_generics_types_of_type_object_cor/
solve_generics_types_of_type_object_core2	src/obj_type_object.c	/^BOOL solve_generics_types_of_type_object_core2(CLO/
start_vm_log	src/vm.c	/^void start_vm_log(sVMInfo* info)$/
start_vm_mutex_signal	src/obj_thread.c	/^void start_vm_mutex_signal()$/
start_vm_mutex_wait	src/obj_thread.c	/^void start_vm_mutex_wait()$/
string_append	src/obj_string.c	/^void string_append(CLObject string, char* str, int/
string_object_to_str	src/obj_string.c	/^BOOL string_object_to_str(ALLOC char** result, CLO/
substitution_node	src/parse.c	/^static BOOL substitution_node(unsigned int* node, /
substitution_posibility	src/node_type.c	/^BOOL substitution_posibility(sCLNodeType* left_typ/
substitution_posibility_for_super_class	src/node_type.c	/^static BOOL substitution_posibility_for_super_clas/
substitution_posibility_of_class	src/type.c	/^BOOL substitution_posibility_of_class(sCLClass* le/
substitution_posibility_of_type_object	src/obj_type_object.c	/^BOOL substitution_posibility_of_type_object(CLObje/
substitution_posibility_of_type_object_with_class_name	src/obj_type_object.c	/^BOOL substitution_posibility_of_type_object_with_c/
substitution_posibility_of_type_object_without_generics	src/obj_type_object.c	/^BOOL substitution_posibility_of_type_object_withou/
substitution_posibility_with_solving_generics	src/node_type.c	/^BOOL substitution_posibility_with_solving_generics/
success	src/alias.c	/^\/\/ result: (TRUE) success (FALSE) overflow$/
t_malloc_entry	src/debug.c	/^typedef struct _t_malloc_entry t_malloc_entry;$/
table	src/module.c	/^\/\/ result: (NULL) overflow module table (sCLModu/
this_module_is_modified	src/module.c	/^void this_module_is_modified(sCLModule* self)$/
thread_final	src/obj_thread.c	/^void thread_final()$/
thread_func	src/obj_thread.c	/^void* thread_func(void* param)$/
thread_init	src/obj_thread.c	/^void thread_init()$/
tm_tm	src/obj_tm.c	/^BOOL tm_tm(MVALUE** stack_ptr, MVALUE* lvar, sVMIn/
type_checking_of_method	src/obj_method.c	/^static BOOL type_checking_of_method(sCLClass* klas/
type_identity	src/node_type.c	/^BOOL type_identity(sCLNodeType* type1, sCLNodeType/
type_identity_of_cl_type_with_solving_generics	src/klass_ctime.c	/^static BOOL type_identity_of_cl_type_with_solving_/
type_identity_without_star	src/node_type.c	/^BOOL type_identity_without_star(sCLNodeType* type1/
uint_setValue	src/obj_uint.c	/^BOOL uint_setValue(MVALUE** stack_ptr, MVALUE* lva/
uint_toInt	src/obj_uint.c	/^BOOL uint_toInt(MVALUE** stack_ptr, MVALUE* lvar, /
uint_toLong	src/obj_uint.c	/^BOOL uint_toLong(MVALUE** stack_ptr, MVALUE* lvar,/
uint_toString	src/obj_uint.c	/^BOOL uint_toString(MVALUE** stack_ptr, MVALUE* lva/
um_index2pointer	src/utf_mb_str.c	/^char* um_index2pointer(enum eUtfMbsKind code, char/
um_is_none_ascii	src/utf_mb_str.c	/^int um_is_none_ascii(enum eUtfMbsKind code, unsign/
um_pointer2index	src/utf_mb_str.c	/^int um_pointer2index(enum eUtfMbsKind code, char* /
um_strlen	src/utf_mb_str.c	/^int um_strlen(enum eUtfMbsKind code, char* mbs)$/
unload_module	src/module.c	/^void unload_module(char* namespace, char* module_n/
usage	src/main.c	/^static void usage()$/
version	src/main.c	/^static void version()$/
visible_control_character	src/vm.c	/^static unsigned char visible_control_character(uns/
vm_error	src/vm.c	/^void vm_error(char* msg, ...)$/
vm_log	src/vm.c	/^void vm_log(sVMInfo* info, char* msg, ...)$/
vm_log_with_log_number	src/vm.c	/^void vm_log_with_log_number(int number, char* msg,/
vm_mutex_lock	src/obj_thread.c	/^void vm_mutex_lock()$/
vm_mutex_unlock	src/obj_thread.c	/^void vm_mutex_unlock()$/
write_block_type_to_buffer	src/klass_ctime.c	/^static void write_block_type_to_buffer(sBuf* buf, /
write_char_value_to_buffer	src/klass_ctime.c	/^static void write_char_value_to_buffer(sBuf* buf, /
write_class_to_buffer	src/klass_ctime.c	/^static void write_class_to_buffer(sCLClass* klass,/
write_field_to_buffer	src/klass_ctime.c	/^static void write_field_to_buffer(sBuf* buf, sCLFi/
write_generics_param_types_to_buffer	src/klass_ctime.c	/^static void write_generics_param_types_to_buffer(s/
write_int_value_to_buffer	src/klass_ctime.c	/^static void write_int_value_to_buffer(sBuf* buf, i/
write_long_long_value_to_buffer	src/klass_ctime.c	/^static void write_long_long_value_to_buffer(sBuf* /
write_method_to_buffer	src/klass_ctime.c	/^static void write_method_to_buffer(sBuf* buf, sCLM/
write_param_initializers_to_buffer	src/klass_ctime.c	/^static void write_param_initializers_to_buffer(sBu/
write_params_to_buffer	src/klass_ctime.c	/^static void write_params_to_buffer(sBuf* buf, int /
write_type_to_buffer	src/klass_ctime.c	/^static void write_type_to_buffer(sBuf* buf, sCLTyp/
write_virtual_method_map	src/klass_ctime.c	/^static void write_virtual_method_map(sBuf* buf, sC/
xcalloc	src/debug.c	/^ALLOC void* xcalloc(size_t count, size_t size)$/
xgetmaxx	src/xfunc.c	/^int xgetmaxx()$/
xgetmaxy	src/xfunc.c	/^int xgetmaxy()$/
xmalloc	src/debug.c	/^ALLOC void* xmalloc(size_t size)$/
xrealloc	src/debug.c	/^ALLOC void* xrealloc(void* ptr, size_t size)$/
xstrdup	src/debug.c	/^ALLOC char* xstrdup(char* str)$/
xstrncat	src/debug.c	/^static char* xstrncat(char* des, char* str, int si/
xstrncpy	src/debug.c	/^static char* xstrncpy(char* des, char* src, int si/
xxrealloc	src/xfunc.c	/^void* xxrealloc(void* old_data, size_t old_data_si/
