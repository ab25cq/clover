
/// special classes ///
class Object {
    native ClassName className() throws ConvertingStringCodeException;
    native bool instanceOf(ClassName class_name);
    native bool isChild(ClassName class_name);
    native int ID();
    native bool isNull();
}

class ClassName implements IComparable {
    native String toString() throws ConvertingStringCodeException;
    native bool equals(ClassName value);

    bool operator ==(ClassName value) {
        return self.equals(value);
    }
    bool operator !=(ClassName value) {
        return !self.equals(value);
    }
}

class anonymous {
    int toInt() {
        return self;
    }
}

class void {
}

class int implements IComparable {
    native String toString() throws ConvertingStringCodeException;
    native bool toBool();
    native byte toByte(); // throws OverflowException;

    generics_newable int(int value) {
        self.setValue(value);
    }

    native int setValue(int value);
    native int getValue();

    int operator ++() {
        self.setValue(self + 1);
        return self;
    }
    int operator ++2() {
        self.setValue(self + 1);
        return self -1;
    }
    int operator --() {
        self.setValue(self - 1);
        return self;
    }
    int operator --2() {
        self.setValue(self - 1);
        return self + 1;
    }
    int operator +=(int value) {
        return self \+= value;
    }
    int operator -=(int value) {
        return self \-= value;
    }
    int operator *=(int value) {
        return self \*= value;
    }
    int operator /=(int value) {
        return self \/= value;
    }
    int operator %=(int value) {
        return self \%= value;
    }
    int operator <<=(int value) {
        return self \<<= value;
    }
    int operator >>=(int value) {
        return self \>>= value;
    }
    int operator &=(int value) {
        return self \&= value;
    }
    int operator ^=(int value) {
        return self \^= value;
    }
    int operator |=(int value) {
        return self \|= value;
    }
    int operator +(int value) {
        return self \+ value;
    }
    int operator -(int value) {
        return self \- value;
    }
    int operator *(int value) {
        return self \* value;
    }
    int operator %(int value) {
        return self \% value;
    }
    int operator /(int value) {
        return self \/ value;
    }
    int operator <<(int value) {
        return self \<< value;
    }
    int operator >>(int value) {
        return self \>> value;
    }
    bool operator ==(int value) {
        return self \== value;
    }
    bool operator !=(int value) {
        return self \!= value;
    }
    bool operator <(int value) {
        return self \< value;
    }
    bool operator <=(int value) {
        return self \<= value;
    }
    bool operator >(int value) {
        return self \> value;
    }
    bool operator >=(int value) {
        return self \>= value;
    }
    int operator &(int value) {
        return self \& value;
    }
    int operator ^(int value) {
        return self \^ value;
    }
    int operator |(int value) {
        return self \| value;
    }
    int operator ~() {
        return \~self;
    }
}

class bool {
    native String toString() throws ConvertingStringCodeException;
    native int toInt();

    native bool setValue(bool value);
    native bool getValue();
    
    bool operator !() {
        return \!self;
    }
    bool operator &&(bool value) {
        return self \&& value;
    }
    bool operator ||(bool value) {
        return self \|| value;
    }
}

class float implements IComparable { 
    native int toInt();
    native String toString() throws ConvertingStringCodeException;

    native float setValue(float value);
    native float getValue();

    float operator +(float value) {
        return self \+ value;
    }
    float operator -(float value) {
        return self \- value;
    }
    float operator *(float value) {
        return self \* value;
    }
    float operator /(float value) {
        return self \/ value;
    }
    bool operator ==(float value) {
        return self \== value;
    }
    bool operator !=(float value) {
        return self \!= value;
    }
}

class byte implements IComparable {
    native String toString() throws ConvertingStringCodeException;
    native int toInt();

    native byte setValue(byte value);
    native byte getValue();

    byte operator +(byte value) {
        return self \+ value;
    }
    byte operator -(byte value) {
        return self \- value;
    }
    byte operator *(byte value) {
        return self \* value;
    }
    byte operator /(byte value) {
        return self \/ value;
    }
    bool operator ==(byte value) {
        return self \== value;
    }
    bool operator !=(byte value) {
        return self \!= value;
    }
}

class String implements IComparable {
    native String();

    native String setValue(String value);
    native String getValue();

    native int length();
    native void append(String str);

    void print() {
        Clover.print(self);
    }
    void println() {
        Clover.println(self);
    }

    native int char(int index) throws RangeException;

    int operator[] (int index) throws RangeException {
        return self.char(index);
    }

    native int replace(int index, int character) throws RangeException;

    int operator[]= (int index, int character) throws RangeException {
        return self.replace(index, character);
    }

    native Bytes toBytes() throws ConvertingStringCodeException;

    bool operator==(String right) {
        return (self \== right);
    }
    bool operator!=(String right) {
        return !(self \== right);
    }

    String operator +(String value) {
        return self \+ value;
    }
}

class Bytes {
    native String toString() throws ConvertingStringCodeException;
    native int length();
    native byte replace(int index, byte c);

    byte operator[]= (int index, byte c) {
        return self.replace(index, c);
    }

    native byte char(int index) throws RangeException;

    byte operator[] (int index) throws RangeException {
        return self.char(index);
    }
}

class Array<T implements IComparable> implements IComparable {
    native Array();

    native Array<T> setValue(Array<T> value);
    native Array<T> getValue();

    native void add(T item);
    native T items(int index) throws RangeException;
    native int length();
    
    T operator[] (int index) throws RangeException {
        return self.items(index);
    }

    bool operator==(Array<T> array2) {
        if(self.length() != array2.length()) {
            return false;
        }

        for(int i=0; i<self.length(); i++) {
            if(self[i] != array2[i]) {
                return false;
            }
        }

        return true;
    }
    bool operator!=(Array<T> array2) {
        return !(self == array2);
    }
}

class Hash<T> {
    //native Hash<T> setValue(Hash<T> value);
    //native Hash<T> getValue();
}

class Thread {
    native Thread() with void block() throws Exception;
    native void join();
}

class Mutex {
    native Mutex();

    native void run() with void block();
}

abstract class File {
    abstract void write(Bytes data) throws IOException, Exception;
    abstract Bytes read(int size) throws IOException;
}

class RegularFile extends File {
    native RegularFile(String file_name, String mode, int permission=0644) throws ConvertingStringCodeException, Exception, IOException;

    virtual native void write(Bytes data) throws IOException, Exception;
    virtual native Bytes read(int size) throws IOException;
}

class Block {
}

class Type {
}

/// user object class ///
class Anonymous0 {}   // for generics parametor
class Anonymous1 {}
class Anonymous2 {}
class Anonymous3 {}
class Anonymous4 {}
class Anonymous5 {}
class Anonymous6 {}
class Anonymous7 {}

class Clover {
    alias print;
    alias println;

    native static void print(String string) throws NullPointerException, ConvertingStringCodeException;
    static void println(String string) {
        Clover.print(string + "\n");
    }
    native static void showClasses();
    native static String outputToString() with void block() throws ConvertingStringCodeException;
}

class System {
    native static String getenv(String env) throws ConvertingStringCodeException;
    native static int sleep(int second) throws RangeException;
    native static void exit(int status_code) throws RangeException;
//    native static void popen(String command) with void block(File file);
}

interface IComparable {
    bool operator==(anonymous right);
    bool operator!=(anonymous right);
}

interface IComparableMore extends IComparable {
    bool operator>(anonymous right);
    bool operator<(anonymous right);
    bool operator>=(anonymous right);
    bool operator<=(anonymous right);
}

class Exception {
    private String message;

    Exception(String message) {
        self.message = message;
    }

    String getMessage() {
        return self.message;
    }
}

class NullPointerException extends Exception {
    NullPointerException(String message) {
        self.message = message;
    }
}

class RangeException extends Exception {
    RangeException(String message) {
        self.message = message;
    }
}

class ConvertingStringCodeException extends Exception {
    ConvertingStringCodeException(String message) {
        self.message = message;
    }
}

class ClassNotFoundException extends Exception {
    ClassNotFoundException(String message) {
        self.message = message;
    }
}

class IOException extends Exception {
    IOException(String message) {
        self.message = message;
    }
}

class OverflowException extends Exception {
    OverflowException(String message) {
        self.message = message;
    }
}

class CantSolveGenericsType extends Exception {
    CantSolveGenericsType(String message) {
        self.message = message;
    }
}
