
/// for generics classes ///
class Anonymous0 {}
class Anonymous1 {}
class Anonymous2 {}
class Anonymous3 {}
class Anonymous4 {}
class Anonymous5 {}
class Anonymous6 {}
class Anonymous7 {}

/// immediate value classes ///
abstract class immediate_value_class {
}

class void extends immediate_value_class {
}

class bool extends immediate_value_class {
    generics_newable bool(bool value) {
        self = value;
    }

    native String to_string() throws ConvertingStringCodeException;
    native int to_int();
}

class null extends immediate_value_class {
    native int to_int();
    native String to_string() throws ConvertingStringCodeException;
    native bool to_bool();
}

class int extends immediate_value_class {
    generics_newable int(int value) {
        self = value;
    }

    native String to_string() throws ConvertingStringCodeException;
    native bool to_bool();
    native byte to_byte(); // throws OverflowException;
}

class byte extends immediate_value_class {
    generics_newable byte(byte value) {
        self = value;
    }

    native String to_string() throws ConvertingStringCodeException;
    native int to_int();
}

class float extends immediate_value_class { 
    generics_newable float(float value) {
        self = value;
    }

    native int to_int();
    native String to_string() throws ConvertingStringCodeException;
}

/*
/// immediate value classes ///
abstract class immediate_value_class {
}

class void extends immediate_value_class {
}

class bool extends immediate_value_class {
    generics_newable bool(bool value) {
        self = value;
    }

    native String to_string() throws ConvertingStringCodeException;
    native int to_int();
}

class null extends immediate_value_class {
    native int to_int();
    native String to_string() throws ConvertingStringCodeException;
    native bool to_bool();
}

abstract class numeric <T> extends immediate_value_class {
    abstract T operator +(T value);
    abstract T operator -(T value);
    abstract T operator *(T value);
    abstract T operator /(T value);
}

class int extends numeric<int> {
    generics_newable int(int value) {
        self = value;
    }

    native String to_string() throws ConvertingStringCodeException;
    native bool to_bool();
    native byte to_byte(); // throws OverflowException;
}

class byte extends numeric<byte> {
    generics_newable byte(byte value) {
        self = value;
    }

    native String to_string() throws ConvertingStringCodeException;
    native int to_int();
}

class float extends numeric<float> {
    generics_newable float(float value) {
        self = value;
    }

    native int to_int();
    native String to_string() throws ConvertingStringCodeException;
}
*/

/// Child class of Object class ///

class Object {
    native String class_name() throws ConvertingStringCodeException;
    native bool instanceof(ClassName class);
    native bool is_child(ClassName class);
}

class Clover {
    alias print;
    alias println;

    native static void print(String string) throws NullPointerException, ConvertingStringCodeException;
    static void println(String string) {
        Clover.print(string + "\n");
    }
    native static void show_classes();
    native static String output_to_string() with void block() throws ConvertingStringCodeException;
}

class System {
    native static String getenv(String env) throws ConvertingStringCodeException;
    native static int sleep(int second) throws RangeException;
    native static void exit(int status_code) throws RangeException;
//    native static void popen(String command) with void block(File file);
}

class Thread {
    native Thread() with void block() throws Exception;
    native void join();
}

class Mutex {
    native Mutex();

    native void run() with void block();
}

class Block {
}

class ClassName {
    native String to_string() throws ConvertingStringCodeException;
}

class Exception {
    private String message;

    Exception(String message) {
        self.message = message;
    }

    String get_message() {
        return self.message;
    }
}

class NullPointerException extends Exception {
    NullPointerException(String message) {
        self.message = message;
    }
}

class RangeException extends Exception {
    RangeException(String message) {
        self.message = message;
    }
}

class ConvertingStringCodeException extends Exception {
    ConvertingStringCodeException(String message) {
        self.message = message;
    }
}

class ClassNotFoundException extends Exception {
    ClassNotFoundException(String message) {
        self.message = message;
    }
}

class IOException extends Exception {
    IOException(String message) {
        self.message = message;
    }
}

class OverflowException extends Exception {
    OverflowException(String message) {
        self.message = message;
    }
}

class CantSolveGenericsType extends Exception {
    CantSolveGenericsType(String message) {
        self.message = message;
    }
}

class String {
    native String();

    native int length();
    native void append(String str);

    void print() {
        Clover.print(self);
    }
    void println() {
        Clover.println(self);
    }

    native int char(int index) throws RangeException;

    int operator[] (int index) throws RangeException {
        return self.char(index);
    }

    native int replace(int index, int character) throws RangeException;

    int operator[]= (int index, int character) throws RangeException {
        return self.replace(index, character);
    }

    native Bytes to_bytes() throws ConvertingStringCodeException;
}

interface IComparable {
    bool operator==(IComparable right);
    bool operator!=(IComparable right);
    bool operator>(IComparable right);
    bool operator<(IComparable right);
    bool operator>=(IComparable right);
    bool operator<=(IComparable right);
}

class Array<T> {
    native Array();

    native void add(T item);
    native T items(int index) throws RangeException;
    native int length();
    
    T operator[] (int index) throws RangeException {
        return self.items(index);
    }

/*
    bool operator==(Array<T> array2) {
        if(self.length() != array2.length()) {
            return false;
        }

        for(int i=0; i<self.length(); i++) {
            if(self[i] != array2[i]) {
                return false;
            }
        }

        return true;
    }
*/
}

class ComparableArray<T implements IComparable> {
}

class Hash<T> {
}

class Bytes {
    native String to_string() throws ConvertingStringCodeException;
    native int length();
    native byte replace(int index, byte c);

    byte operator[]= (int index, byte c) {
        return self.replace(index, c);
    }

    native byte char(int index) throws RangeException;

    byte operator[] (int index) throws RangeException {
        return self.char(index);
    }
}

class Type {
}

abstract class File {
    abstract void write(Bytes data) throws IOException, Exception;
    abstract Bytes read(int size) throws IOException;
}

class RegularFile extends File {
    native RegularFile(String file_name, String mode, int permission=0644) throws ConvertingStringCodeException, Exception, IOException;

    virtual native void write(Bytes data) throws IOException, Exception;
    virtual native Bytes read(int size) throws IOException;
}
