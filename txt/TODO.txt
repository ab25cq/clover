-+- 仕様 -+------------------------------------------------------
immediate value class --> void, int, float, bool, null
special class --> Array, Hash, String
どちらもフィールドが追加できない。
継承したクラスでもフィールドが追加できない。-->special classは追加できるようにする。

open class --> user object class
継承できない。mixin classでもフィールドが追加できる.

superはクラスメソッドには対応していない

ブロックにはresult typeを最初に書く。
int a = int {
    111;
}

void {
    Clover.println("HELLO BLOCK");
}

継承するクラスとmixiするクラスは前方参照される

-+- clover -+----------------------------------
blockのブロックの変数と引数の数に関するバグはないか。スタックの位置とパーサーのつじつまはあっているか。引数の数とローカル変数の数を色々と変えてみてテストする。親の変数にもアクセスできるか。
blockのリファクタリング。結構黒魔術。

Mutexのテスト

ユーザーのオリジナルスペシャルクラスを作る場合、native methodの登録をどうするか。動的ライブラリを使うか。

spacial classやimmediate value classの継承のテスト
Array, String, Hashもフィールドを追加できるようにする。Array, String, Hashの子クラスでフィールドを追加したい。

pipeout, pipeinで外部プログラムと連携

文字列処理を入れる。
string_appendの実装。stringの仕様を変える。文字列を伸ばせるようにする。

Array, Hashの実装。Genericsの再チェック。










Clover.class_dependences(MyClass); 
クラスの依存クラスを文字列の配列で返す。クラスオブジェクトは無し。クラスは文字列で表す

Clover.class_file_path(MyClass); クラスファイルの絶対パスを返す

vm.cのExceptionで型が単なるException型のものがあるが、あれでいいのか。

引数数-1の処理をちゃんとする。printfもできるようにちゃんとする。

operatorのテスト
    Stringの+をoperator +で実装するかどうか。
    Stringの[]がまだ未実装
    operator []
    operator +
    operator -
    operator /
    operator *
    operator %

    Clover.printf

generics未実装なもの
    new T
    genericsのクラス引数のimplementsでダックタイピング IEnableNewOperator ---> new Tできる
    generics関数
    定数の引数

interface, implementsの実装。
    implementsは後から追加して定義できるようにする。これは、かなり自由度が高い。Javaはクラスの定義時に決まってしまうので自由度が低い。

compiler.cでパースのエラー処理、expect系が不完全。少し予想外が起こるとエラー出力が滅茶苦茶になる。

privateクラスの実装、compiler.cはできている。

refferとloadにグロブ対応。

GCの改良。毎回コンパクションはしない
世代別GC

namespaceのネスト対応。ネストすると::namespace名をcurrent_namespaceに追記するようにした。
使う部分はまだ特に何も触っていない。
namespaceのソースを分離。
-->ネスト対応は諦めた。

